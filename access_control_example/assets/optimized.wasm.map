{"version":3,"sources":["~lib/internal/allocator.ts","~lib/allocator/tlsf.ts","assembly/precomp.ts","~lib/memory.ts","~lib/internal/memory.ts","assembly/index.ts","~lib/internal/arraybuffer.ts","~lib/internal/typedarray.ts","~lib/array.ts","~lib/typedarray.ts"],"names":[],"mappings":"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","sourceRoot":"assemblyscript:///","sourceContents":["/** Number of alignment bits. */\nexport const AL_BITS: u32 = 3;\n/** Number of possible alignment values. */\nexport const AL_SIZE: usize = 1 << <usize>AL_BITS;\n/** Mask to obtain just the alignment bits. */\nexport const AL_MASK: usize = AL_SIZE - 1;\n/** Maximum 32-bit allocation size. */\nexport const MAX_SIZE_32: usize = 1 << 30; // 1GB\n","/**\n * Two-Level Segregate Fit Memory Allocator.\n *\n * A general purpose dynamic memory allocator specifically designed to meet real-time requirements.\n * Always aligns to 8 bytes.\n *\n * @module std/assembly/allocator/tlsf\n *//***/\n\n// ╒══════════════ Block size interpretation (32-bit) ═════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─╫─┴─┴─┤\n// │ |                    FL                       │ SB = SL + AL  │ ◄─ usize\n// └───────────────────────────────────────────────┴─────────╨─────┘\n// FL: first level, SL: second level, AL: alignment, SB: small block\n\nimport {\n  AL_BITS,\n  AL_SIZE,\n  AL_MASK\n} from \"../internal/allocator\";\n\nconst SL_BITS: u32 = 5;\nconst SL_SIZE: usize = 1 << <usize>SL_BITS;\n\nconst SB_BITS: usize = <usize>(SL_BITS + AL_BITS);\nconst SB_SIZE: usize = 1 << <usize>SB_BITS;\n\nconst FL_BITS: u32 = (sizeof<usize>() == sizeof<u32>()\n  ? 30 // ^= up to 1GB per block\n  : 32 // ^= up to 4GB per block\n) - SB_BITS;\n\n// ╒════════════════ Block structure layout (32-bit) ══════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┼─┤\n// │                          size                             │L│F│ ◄─┐ info\n// ╞═══════════════════════════════════════════════════════════╧═╧═╡   │      ┐\n// │                        if free: ◄ prev                        │ ◄─┤ usize\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                        if free: next ►                        │ ◄─┤\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                ... unused free space >= 0 ...                 │   │    = 0\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤   │\n// │                        if free: jump ▲                        │ ◄─┘\n// └───────────────────────────────────────────────────────────────┘ MIN SIZE ┘\n// F: FREE, L: LEFT_FREE\n\n/** Tag indicating that this block is free. */\nconst FREE: usize = 1 << 0;\n/** Tag indicating that this block's left block is free. */\nconst LEFT_FREE: usize = 1 << 1;\n/** Mask to obtain all tags. */\nconst TAGS: usize = FREE | LEFT_FREE;\n\n/** Block structure. */\n@unmanaged\nclass Block {\n\n  /** Info field holding this block's size and tags. */\n  info: usize;\n\n  /** End offset of the {@link Block#info} field. User data starts here. */\n  static readonly INFO: usize = (sizeof<usize>() + AL_MASK) & ~AL_MASK;\n\n  /** Previous free block, if any. Only valid if free. */\n  prev: Block | null;\n  /** Next free block, if any. Only valid if free. */\n  next: Block | null;\n\n  /** Minimum size of a block, excluding {@link Block#info}. */\n  static readonly MIN_SIZE: usize = (3 * sizeof<usize>() + AL_MASK) & ~AL_MASK;// prev + next + jump\n\n  /** Maximum size of a used block, excluding {@link Block#info}. */\n  static readonly MAX_SIZE: usize = 1 << (FL_BITS + SB_BITS);\n\n  /** Gets this block's left (free) block in memory. */\n  get left(): Block {\n    assert(this.info & LEFT_FREE); // must be free to contain a jump\n    return assert(\n      load<Block>(changetype<usize>(this) - sizeof<usize>())\n    ); // can't be null\n  }\n\n  /** Gets this block's right block in memory. */\n  get right(): Block {\n    assert(this.info & ~TAGS); // can't skip beyond the tail block\n    return assert(\n      changetype<Block>(\n        changetype<usize>(this) + Block.INFO + (this.info & ~TAGS)\n      )\n    ); // can't be null\n  }\n}\n\n// ╒════════════════ Root structure layout (32-bit) ═══════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤          ┐\n// │        0        |           flMap                            S│ ◄────┐\n// ╞═══════════════════════════════════════════════════════════════╡      │\n// │                           slMap[0] S                          │ ◄─┐  │\n// ├───────────────────────────────────────────────────────────────┤   │  │\n// │                           slMap[1]                            │ ◄─┤  │\n// ├───────────────────────────────────────────────────────────────┤  u32 │\n// │                              ...                              │ ◄─┤  │\n// ├───────────────────────────────────────────────────────────────┤   │  │\n// │                           slMap[22] P                         │ ◄─┘  │\n// ╞═══════════════════════════════════════════════════════════════╡    usize\n// │                            head[0]                            │ ◄────┤\n// ├───────────────────────────────────────────────────────────────┤      │\n// │                              ...                              │ ◄────┤\n// ├───────────────────────────────────────────────────────────────┤      │\n// │                           head[736]                           │ ◄────┤\n// ╞═══════════════════════════════════════════════════════════════╡      │\n// │                            tailRef                            │ ◄────┘\n// └───────────────────────────────────────────────────────────────┘   SIZE   ┘\n// S: Small blocks map, P: Possibly padded if 64-bit\n\nassert((1 << SL_BITS) <= 32); // second level must fit into 32 bits\n\n/** Root structure. */\n@unmanaged\nclass Root {\n\n  /** First level bitmap. */\n  flMap: usize = 0;\n\n  /** Start offset of second level maps. */\n  private static readonly SL_START: usize = sizeof<usize>();\n\n  // Using *one* SL map per *FL bit*\n\n  /** Gets the second level map for the specified first level. */\n  getSLMap(fl: usize): u32 {\n    assert(fl < FL_BITS); // fl out of range\n    return load<u32>(changetype<usize>(this) + fl * 4, Root.SL_START);\n  }\n\n  /** Sets the second level map for the specified first level. */\n  setSLMap(fl: usize, value: u32): void {\n    assert(fl < FL_BITS); // fl out of range\n    store<u32>(changetype<usize>(this) + fl * 4, value, Root.SL_START);\n  }\n\n  /** End offset of second level maps. */\n  private static readonly SL_END: usize = Root.SL_START + FL_BITS * 4;\n\n  // Using *number bits per SL* heads per *FL bit*\n\n  /** Start offset of FL/SL heads. */\n  private static readonly HL_START: usize = (Root.SL_END + AL_MASK) & ~AL_MASK;\n\n  /** Gets the head of the specified first and second level index. */\n  getHead(fl: usize, sl: u32): Block | null {\n    assert(fl < FL_BITS); // fl out of range\n    assert(sl < SL_SIZE); // sl out of range\n    return changetype<Block>(load<usize>(\n      changetype<usize>(this) + (fl * SL_SIZE + <usize>sl) * sizeof<usize>()\n    , Root.HL_START));\n  }\n\n  /** Sets the head of the specified first and second level index. */\n  setHead(fl: usize, sl: u32, value: Block | null): void {\n    assert(fl < FL_BITS); // fl out of range\n    assert(sl < SL_SIZE); // sl out of range\n    store<usize>(\n      changetype<usize>(this) + (fl * SL_SIZE + <usize>sl) * sizeof<usize>()\n    , changetype<usize>(value)\n    , Root.HL_START);\n  }\n\n  /** End offset of FL/SL heads. */\n  private static readonly HL_END: usize = (\n    Root.HL_START + FL_BITS * SL_SIZE * sizeof<usize>()\n  );\n\n  get tailRef(): usize { return load<usize>(0, Root.HL_END); }\n  set tailRef(value: usize) { store<usize>(0, value, Root.HL_END); }\n\n  /** Total size of the {@link Root} structure. */\n  static readonly SIZE: usize = Root.HL_END + sizeof<usize>();\n\n  /** Inserts a previously used block back into the free list. */\n  insert(block: Block): void {\n    // check as much as possible here to prevent invalid free blocks\n    assert(block); // cannot be null\n    var blockInfo = block.info;\n    assert(blockInfo & FREE); // must be free\n    var size: usize;\n    assert(\n      (size = block.info & ~TAGS) >= Block.MIN_SIZE && size < Block.MAX_SIZE\n    ); // must be valid, not necessary to compute yet if noAssert=true\n\n    var right: Block = assert(block.right); // can't be null\n    var rightInfo = right.info;\n\n    // merge with right block if also free\n    if (rightInfo & FREE) {\n      this.remove(right);\n      block.info = (blockInfo += Block.INFO + (rightInfo & ~TAGS));\n      right = block.right;\n      rightInfo = right.info;\n      // jump is set below\n    }\n\n    // merge with left block if also free\n    if (blockInfo & LEFT_FREE) {\n      let left: Block = assert(block.left); // can't be null\n      let leftInfo = left.info;\n      assert(leftInfo & FREE); // must be free according to tags\n      this.remove(left);\n      left.info = (leftInfo += Block.INFO + (blockInfo & ~TAGS));\n      block = left;\n      blockInfo = leftInfo;\n      // jump is set below\n    }\n\n    right.info = rightInfo | LEFT_FREE;\n    this.setJump(block, right);\n    // right is no longer used now, hence rightInfo is not synced\n\n    size = blockInfo & ~TAGS;\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE); // must be valid\n\n    // mapping_insert\n    var fl: usize, sl: u32;\n    if (size < SB_SIZE) {\n      fl = 0;\n      sl = <u32>(size / AL_SIZE);\n    } else {\n      fl = fls<usize>(size);\n      sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n      fl -= SB_BITS - 1;\n    }\n\n    // perform insertion\n    var head = this.getHead(fl, sl);\n    block.prev = null;\n    block.next = head;\n    if (head) head.prev = block;\n    this.setHead(fl, sl, block);\n\n    // update first and second level maps\n    this.flMap |= (1 << fl);\n    this.setSLMap(fl, this.getSLMap(fl) | (1 << sl));\n  }\n\n  /**\n   * Removes a free block from FL/SL maps. Does not alter left/jump because it\n   * is likely that splitting is performed afterwards, invalidating any changes\n   * again.\n   */\n  private remove(block: Block): void {\n    var blockInfo = block.info;\n    assert(blockInfo & FREE); // must be free\n    var size = blockInfo & ~TAGS;\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE); // must be valid\n\n    // mapping_insert\n    var fl: usize, sl: u32;\n    if (size < SB_SIZE) {\n      fl = 0;\n      sl = <u32>(size / AL_SIZE);\n    } else {\n      fl = fls<usize>(size);\n      sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n      fl -= SB_BITS - 1;\n    }\n\n    // link previous and next free block\n    var prev = block.prev;\n    var next = block.next;\n    if (prev) prev.next = next;\n    if (next) next.prev = prev;\n\n    // update head if we are removing it\n    if (block == this.getHead(fl, sl)) {\n      this.setHead(fl, sl, next);\n\n      // clear second level map if head is empty now\n      if (!next) {\n        let slMap = this.getSLMap(fl);\n        this.setSLMap(fl, slMap &= ~(1 << sl));\n\n        // clear first level map if second level is empty now\n        if (!slMap) this.flMap &= ~(1 << fl);\n      }\n    }\n  }\n\n  /** Searches for a free block of at least the specified size. */\n  search(size: usize): Block | null {\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE);\n\n    // mapping_search\n    var fl: usize, sl: u32;\n    if (size < SB_SIZE) {\n      fl = 0;\n      sl = <u32>(size / AL_SIZE);\n    } else {\n      // (*) size += (1 << (fls<usize>(size) - SL_BITS)) - 1;\n      fl = fls<usize>(size);\n      sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n      fl -= SB_BITS - 1;\n      // (*) instead of rounding up, use next second level list for better fit\n      if (sl < SL_SIZE - 1) ++sl;\n      else ++fl, sl = 0;\n    }\n\n    // search second level\n    var slMap = this.getSLMap(fl) & (~0 << sl);\n    var head: Block | null;\n    if (!slMap) {\n      // search next larger first level\n      let flMap = this.flMap & (~0 << (fl + 1));\n      if (!flMap) {\n        head = null;\n      } else {\n        fl = ffs<usize>(flMap);\n        slMap = assert(this.getSLMap(fl)); // can't be zero if fl points here\n        head = this.getHead(fl, ffs<u32>(slMap));\n      }\n    } else {\n      head = this.getHead(fl, ffs<u32>(slMap));\n    }\n    return head;\n  }\n\n  /** Links a free left with its right block in memory. */\n  private setJump(left: Block, right: Block): void {\n    assert(left.info & FREE);       // must be free\n    assert(left.right == right);    // right block must match\n    assert(right.info & LEFT_FREE); // right block must be tagged as LEFT_FREE\n    store<Block>(\n      changetype<usize>(right) - sizeof<usize>()\n    , left); // last word in left block's (free) data region\n  }\n\n  /**\n   * Uses the specified free block, removing it from internal maps and\n   * splitting it if possible, and returns its data pointer.\n   */\n  use(block: Block, size: usize): usize {\n    var blockInfo = block.info;\n    assert(blockInfo & FREE); // must be free so we can use it\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE); // must be valid\n    assert(!(size & AL_MASK)); // size must be aligned so the new block is\n\n    this.remove(block);\n\n    // split if the block can hold another MIN_SIZE block\n    var remaining = (blockInfo & ~TAGS) - size;\n    if (remaining >= Block.INFO + Block.MIN_SIZE) {\n      block.info = size | (blockInfo & LEFT_FREE); // also discards FREE\n\n      let spare = changetype<Block>(\n        changetype<usize>(block) + Block.INFO + size\n      );\n      spare.info = (remaining - Block.INFO) | FREE; // not LEFT_FREE\n      this.insert(spare); // also sets jump\n\n    // otherwise tag block as no longer FREE and right as no longer LEFT_FREE\n    } else {\n      block.info = blockInfo & ~FREE;\n      let right: Block = assert(block.right); // can't be null (tail)\n      right.info &= ~LEFT_FREE;\n    }\n\n    return changetype<usize>(block) + Block.INFO;\n  }\n\n  /** Adds more memory to the pool. */\n  addMemory(start: usize, end: usize): bool {\n    assert(start <= end);\n    assert(!(start & AL_MASK)); // must be aligned\n    assert(!(end & AL_MASK)); // must be aligned\n\n    var tailRef = this.tailRef;\n    var tailInfo: usize = 0;\n    if (tailRef) {\n      assert(start >= tailRef + sizeof<usize>()); // starts after tail\n\n      // merge with current tail if adjacent\n      if (start - Block.INFO == tailRef) {\n        start -= Block.INFO;\n        tailInfo = changetype<Block>(tailRef).info;\n      }\n\n    } else {\n      assert(start >= changetype<usize>(this) + Root.SIZE); // starts after root\n    }\n\n    // check if size is large enough for a free block and the tail block\n    var size = end - start;\n    if (size < Block.INFO + Block.MIN_SIZE + Block.INFO) {\n      return false;\n    }\n\n    // left size is total minus its own and the zero-length tail's header\n    var leftSize = size - 2 * Block.INFO;\n    var left = changetype<Block>(start);\n    left.info = leftSize | FREE | (tailInfo & LEFT_FREE);\n    left.prev = null;\n    left.next = null;\n\n    // tail is a zero-length used block\n    var tail = changetype<Block>(start + size - Block.INFO);\n    tail.info = 0 | LEFT_FREE;\n    this.tailRef = changetype<usize>(tail);\n\n    this.insert(left); // also merges with free left before tail / sets jump\n\n    return true;\n  }\n}\n\n/** Determines the first (LSB to MSB) set bit's index of a word. */\nfunction ffs<T>(word: T): T {\n  assert(word != 0); // word cannot be 0\n  return ctz<T>(word);  // differs from ffs only for 0\n}\n\n/** Determines the last (LSB to MSB) set bit's index of a word. */\nfunction fls<T>(word: T): T {\n  assert(word != 0); // word cannot be 0\n  const inv: T = (sizeof<T>() << 3) - 1;\n  return inv - clz<T>(word);\n}\n\n/** Reference to the initialized {@link Root} structure, once initialized. */\nvar ROOT: Root = changetype<Root>(0);\n\n// Memory allocator interface\n\n/** Allocates a chunk of memory. */\n@global export function __memory_allocate(size: usize): usize {\n\n  // initialize if necessary\n  var root = ROOT;\n  if (!root) {\n    let rootOffset = (HEAP_BASE + AL_MASK) & ~AL_MASK;\n    let pagesBefore = memory.size();\n    let pagesNeeded = <i32>((((rootOffset + Root.SIZE) + 0xffff) & ~0xffff) >>> 16);\n    if (pagesNeeded > pagesBefore && memory.grow(pagesNeeded - pagesBefore) < 0) unreachable();\n    ROOT = root = changetype<Root>(rootOffset);\n    root.tailRef = 0;\n    root.flMap = 0;\n    for (let fl: usize = 0; fl < FL_BITS; ++fl) {\n      root.setSLMap(fl, 0);\n      for (let sl: u32 = 0; sl < SL_SIZE; ++sl) {\n        root.setHead(fl, sl, null);\n      }\n    }\n    root.addMemory((rootOffset + Root.SIZE + AL_MASK) & ~AL_MASK, memory.size() << 16);\n  }\n\n  // search for a suitable block\n  if (size > Block.MAX_SIZE) unreachable();\n\n  // 32-bit MAX_SIZE is 1 << 30 and itself aligned, hence the following can't overflow MAX_SIZE\n  size = max<usize>((size + AL_MASK) & ~AL_MASK, Block.MIN_SIZE);\n\n  var block = root.search(size);\n  if (!block) {\n\n    // request more memory\n    let pagesBefore = memory.size();\n    let pagesNeeded = <i32>(((size + 0xffff) & ~0xffff) >>> 16);\n    let pagesWanted = max(pagesBefore, pagesNeeded); // double memory\n    if (memory.grow(pagesWanted) < 0) {\n      if (memory.grow(pagesNeeded) < 0) {\n        unreachable(); // out of memory\n      }\n    }\n    let pagesAfter = memory.size();\n    root.addMemory(<usize>pagesBefore << 16, <usize>pagesAfter << 16);\n    block = assert(root.search(size)); // must be found now\n  }\n\n  assert((block.info & ~TAGS) >= size);\n  return root.use(<Block>block, size);\n}\n\n/** Frees the chunk of memory at the specified address. */\n@global export function __memory_free(data: usize): void {\n  if (data) {\n    let root = ROOT;\n    if (root) {\n      let block = changetype<Block>(data - Block.INFO);\n      let blockInfo = block.info;\n      assert(!(blockInfo & FREE)); // must be used\n      block.info = blockInfo | FREE;\n      root.insert(changetype<Block>(data - Block.INFO));\n    }\n  }\n}\n\n@global export function __memory_reset(): void {\n  unreachable();\n}\n","export const precomp_base: i64[][][] = [\n    [\n        [54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982, 57905, 49316, 21502, 52590, 14035, 8553],\n        [26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [56720, 42423, 35507, 28126, 21237, 30545, 40832, 8432, 58237, 25771, 20110, 26346, 30309, 55179, 24335, 59271]\n    ],\n    [\n        [54910, 40767, 59087, 5397, 30354, 5690, 63624, 56900, 7129, 8508, 53729, 22390, 27348, 38415, 34961, 15215],\n        [126, 34634, 19610, 46803, 14221, 20743, 22119, 55009, 47143, 5338, 62479, 22817, 12434, 19675, 40654, 13165],\n        [34312, 63004, 23307, 29229, 39098, 12725, 31743, 20658, 30132, 4854, 47127, 64924, 3746, 21154, 59930, 23012],\n        [55670, 37578, 51171, 50482, 5019, 18493, 38144, 29300, 1985, 56670, 42750, 64622, 36266, 11561, 2266, 40814]\n    ],\n    [\n        [25336, 63465, 50267, 18785, 37865, 64316, 37279, 1147, 4255, 8705, 11956, 259, 43099, 47489, 48564, 42101],\n        [33976, 13276, 6653, 3766, 49871, 53083, 42222, 28424, 51462, 33502, 59477, 40889, 11032, 48459, 18429, 55793],\n        [55412, 43088, 47855, 56079, 62582, 8332, 42702, 48532, 142, 40220, 40316, 56508, 15274, 54409, 42807, 18001],\n        [64680, 2484, 22641, 27172, 54853, 1862, 48697, 63451, 52980, 25442, 11263, 24990, 26518, 16031, 39231, 62435]\n    ],\n    [\n        [10302, 26150, 24156, 35112, 47257, 65469, 40317, 19814, 24660, 43946, 12912, 4159, 25852, 30316, 56604, 49853],\n        [48890, 1203, 17355, 16031, 24642, 43907, 44219, 22635, 31760, 25925, 15336, 50527, 39278, 49914, 50083, 9560],\n        [45876, 57236, 4467, 47624, 12941, 8945, 284, 17677, 58006, 12849, 13348, 65066, 14945, 15813, 26942, 59676],\n        [43164, 58444, 63752, 59956, 40156, 10398, 28707, 4980, 3513, 22229, 4910, 11660, 59400, 40530, 10536, 10423]\n    ],\n    [\n        [40680, 4548, 42742, 37042, 52934, 33888, 30150, 24704, 37632, 2910, 51659, 1062, 19367, 14973, 24694, 61190],\n        [15072, 16664, 33679, 50551, 16152, 16115, 42610, 20778, 32013, 27957, 32146, 35650, 14161, 41060, 18889, 4106],\n        [22160, 3755, 50680, 36415, 12407, 57641, 2208, 46899, 14139, 48360, 58476, 48405, 58661, 31975, 5534, 11722],\n        [38138, 55193, 60399, 10153, 53181, 1494, 28354, 28790, 46269, 42151, 11561, 20461, 30019, 43926, 11860, 51870]\n    ],\n    [\n        [44830, 42350, 22799, 28898, 46887, 6000, 21657, 18734, 4113, 49923, 34701, 42742, 46576, 28968, 30613, 29073],\n        [26838, 48663, 2880, 502, 41567, 10383, 2732, 36424, 9283, 9981, 26711, 33924, 17495, 32794, 57490, 55693],\n        [22814, 17497, 48219, 17465, 24095, 38947, 20667, 64407, 19869, 14957, 40521, 45311, 8127, 9734, 1913, 23631],\n        [21560, 32219, 44356, 30378, 57287, 41726, 24078, 19180, 60351, 43991, 45991, 54160, 52043, 44893, 53735, 559]\n    ],\n    [\n        [30324, 23691, 53051, 4737, 48697, 4996, 49712, 54640, 55411, 19511, 1008, 31648, 17674, 5336, 49291, 16368],\n        [3946, 62402, 8972, 59102, 11549, 4523, 28278, 19501, 19234, 62246, 7698, 42096, 36434, 4072, 32384, 10090],\n        [15908, 58086, 38389, 40304, 32776, 14889, 42599, 33534, 3669, 6821, 9715, 61881, 26937, 41962, 22354, 35355],\n        [58652, 5289, 62527, 14828, 47511, 26703, 64428, 32081, 54010, 20672, 59534, 17845, 1239, 3125, 229, 12817]\n    ],\n    [\n        [9090, 49941, 36285, 5859, 48920, 31044, 47745, 19027, 36641, 51310, 14669, 24860, 49402, 39576, 30527, 61858],\n        [25118, 60745, 54715, 50434, 11782, 4341, 51412, 60833, 30495, 45578, 34223, 30027, 33230, 50671, 28395, 42227],\n        [804, 60084, 44477, 53000, 44388, 10780, 49022, 17459, 34945, 61218, 23444, 50932, 15501, 9266, 17255, 54325],\n        [2366, 49982, 38357, 49201, 32319, 24801, 20134, 3570, 12696, 20994, 22534, 11140, 3481, 44508, 27322, 3044]\n    ],\n    [\n        [17830, 11905, 63194, 43126, 9537, 48790, 50153, 18768, 4678, 61507, 34965, 31607, 11511, 48731, 40590, 6649],\n        [9734, 52980, 15204, 50807, 39199, 26211, 44635, 61650, 12683, 44573, 61761, 1782, 48277, 38118, 26053, 15414],\n        [12882, 28693, 2859, 10530, 41402, 59496, 9261, 63934, 18088, 39440, 1414, 35796, 1695, 43858, 37234, 28175],\n        [43010, 44689, 23552, 44895, 16117, 46350, 25604, 28976, 27119, 6941, 34223, 31989, 9222, 13343, 17110, 22525]\n    ],\n    [\n        [42244, 60990, 35569, 25565, 34845, 14905, 34118, 527, 8259, 19690, 62097, 62529, 60936, 28435, 48228, 10244],\n        [47354, 36034, 22649, 16130, 52944, 8415, 26911, 44824, 36327, 22986, 22167, 19443, 49796, 35897, 40851, 32767],\n        [58948, 63911, 25373, 37209, 46934, 34635, 54119, 33001, 51282, 45451, 50992, 4389, 33979, 1956, 26452, 7244],\n        [63222, 23022, 3679, 52306, 55676, 29829, 20149, 63415, 13736, 21063, 11668, 13569, 10294, 62983, 5459, 50020]\n    ],\n    [\n        [13894, 18681, 56482, 64496, 34912, 15990, 15199, 48095, 61427, 1286, 44675, 18206, 46466, 55845, 26489, 25578],\n        [35466, 35013, 24888, 31745, 59641, 48539, 54935, 39731, 27281, 61383, 56794, 50171, 26044, 43404, 24234, 44541],\n        [46640, 32164, 9099, 43126, 35224, 62832, 41949, 15088, 4487, 23667, 29756, 63204, 43467, 53924, 32863, 65433],\n        [9250, 11314, 17450, 53333, 20056, 11800, 21036, 36577, 44075, 13050, 27847, 3159, 56719, 45579, 12872, 16161]\n    ],\n    [\n        [27182, 18334, 47609, 16661, 32623, 56937, 31234, 60395, 5480, 28452, 65344, 4750, 43874, 3629, 53574, 19794],\n        [29190, 4077, 43584, 24874, 55858, 12778, 64937, 30787, 48202, 35485, 44241, 26555, 5519, 17757, 39357, 48605],\n        [60278, 39232, 15528, 26202, 30913, 57149, 22923, 46548, 35791, 50309, 25101, 35456, 33208, 10065, 27721, 20209],\n        [30992, 30836, 43821, 14809, 49509, 18774, 40394, 64183, 53478, 37925, 8, 48539, 31861, 64743, 42871, 31508]\n    ],\n    [\n        [4146, 57073, 13771, 37840, 4018, 31807, 48942, 47920, 51669, 13102, 51432, 23628, 11358, 6309, 44281, 62341],\n        [50940, 55402, 43587, 65099, 42912, 16699, 64247, 24977, 26320, 51359, 44744, 30278, 34110, 59728, 28149, 55808],\n        [57318, 48695, 55669, 52839, 48583, 19114, 17822, 7860, 64184, 33210, 25781, 12980, 64567, 65059, 52926, 58626],\n        [1892, 40664, 23936, 3787, 1779, 30556, 48132, 22387, 23481, 46886, 33100, 19659, 40122, 26507, 5897, 62379]\n    ],\n    [\n        [9428, 47781, 39642, 44981, 54357, 2702, 3261, 4650, 18852, 16517, 11492, 58519, 48511, 38826, 215, 15993],\n        [36836, 19922, 39201, 5905, 48737, 31917, 17979, 61303, 41540, 15381, 45725, 597, 43971, 17431, 44412, 2295],\n        [53298, 53623, 47840, 26527, 17901, 41348, 59220, 18921, 4465, 52332, 49286, 8107, 16292, 32206, 6524, 28210],\n        [61836, 34614, 36603, 30654, 62989, 19375, 57921, 31097, 7127, 44624, 6558, 3511, 24719, 65177, 23477, 57225]\n    ],\n    [\n        [24310, 35970, 47593, 17602, 3206, 25853, 27571, 11091, 32501, 27965, 57562, 63435, 57074, 61081, 26538, 49874],\n        [49274, 52054, 37548, 27184, 22593, 64263, 58472, 65073, 53223, 32617, 19081, 45176, 13779, 26586, 14396, 44195],\n        [23802, 19792, 41309, 44078, 23617, 52232, 35810, 30320, 27555, 57298, 46718, 16198, 37668, 20645, 47335, 20773],\n        [35738, 24440, 64184, 29044, 6396, 24255, 22765, 51949, 3958, 40642, 51620, 42775, 15758, 27183, 11783, 38268]\n    ],\n    [\n        [8356, 49288, 1876, 11343, 1493, 23695, 11366, 34503, 24017, 49658, 20590, 59992, 54411, 14885, 64892, 2013],\n        [26598, 47580, 35317, 15673, 43399, 24534, 32917, 47635, 25794, 48413, 26497, 19516, 4071, 2548, 18539, 50473],\n        [57906, 34427, 38421, 34796, 56391, 27538, 59117, 46755, 59385, 11532, 44589, 59040, 20197, 3831, 2151, 54534],\n        [43484, 29480, 31400, 65402, 34872, 23731, 63713, 33456, 33469, 14980, 33578, 10404, 51514, 59300, 7255, 23878]\n    ],\n    [\n        [34410, 2812, 62187, 45391, 49765, 59641, 32570, 54387, 6726, 52013, 37478, 11446, 56363, 23403, 10949, 2379],\n        [27494, 49027, 3622, 46230, 51604, 57461, 65100, 60749, 46835, 25555, 53956, 36575, 40165, 45915, 54824, 41475],\n        [47804, 23689, 51855, 63253, 62051, 65187, 64974, 31688, 41336, 25915, 53024, 30894, 18085, 52663, 24864, 54306],\n        [5058, 9624, 38661, 61830, 34251, 3106, 6630, 58093, 21674, 12234, 31873, 60596, 63844, 22138, 64925, 6599]\n    ],\n    [\n        [34052, 36946, 32639, 43869, 13386, 28264, 43998, 64961, 31532, 40102, 44289, 26128, 55321, 43896, 53651, 47784],\n        [12810, 63385, 58389, 44632, 60240, 21524, 10258, 25196, 30523, 18040, 8603, 14439, 8925, 28763, 19895, 14675],\n        [16816, 52726, 5340, 61530, 60091, 27150, 4531, 31625, 43559, 24567, 53727, 52308, 41695, 8480, 31582, 5035],\n        [7298, 10283, 58620, 34315, 49082, 47898, 804, 55809, 56931, 214, 13839, 55660, 41707, 29822, 46021, 43701]\n    ],\n    [\n        [11292, 36411, 22057, 50592, 47611, 17638, 19426, 21391, 30243, 23950, 42380, 41578, 56592, 27289, 62634, 40700],\n        [12584, 42461, 40922, 60312, 998, 61824, 58055, 10427, 12288, 9426, 29493, 27751, 45097, 22838, 14363, 58999],\n        [16694, 65289, 38857, 36069, 33584, 63461, 2569, 4346, 1344, 20258, 20617, 7731, 52913, 37987, 10295, 50907],\n        [54818, 62241, 52183, 60245, 31878, 40082, 23259, 14765, 61755, 25532, 7898, 32266, 63023, 21317, 1880, 21993]\n    ],\n    [\n        [54612, 54535, 45156, 37989, 21541, 10594, 32600, 61493, 23033, 3510, 46854, 22501, 61054, 41614, 48953, 12214],\n        [23384, 46056, 42634, 31992, 36530, 25882, 7634, 8072, 52628, 22040, 4530, 26417, 6457, 18813, 48976, 31936],\n        [4854, 47395, 40291, 61039, 55409, 29321, 24264, 34711, 7585, 56884, 43695, 7848, 37967, 35447, 43855, 54674],\n        [30280, 50265, 53553, 51505, 45779, 7652, 1758, 268, 33454, 54832, 19198, 7663, 48780, 21426, 24920, 17884]\n    ],\n    [\n        [28044, 20798, 26134, 28080, 11761, 2679, 37209, 6065, 1655, 52913, 7803, 55627, 25255, 50405, 13075, 19218],\n        [60430, 60673, 2919, 61645, 4320, 14795, 23033, 16297, 5651, 15977, 5262, 41928, 46056, 31327, 62448, 3865],\n        [136, 1341, 8779, 54831, 65200, 64787, 42946, 37888, 31733, 62701, 5257, 53149, 1718, 26263, 50823, 52017],\n        [54898, 5517, 6779, 6170, 3454, 22265, 18725, 57899, 55713, 32053, 21726, 60169, 40706, 48945, 49562, 5123]\n    ],\n    [\n        [63550, 58035, 44366, 38756, 62512, 20517, 20756, 37967, 64947, 28393, 60269, 29170, 41906, 7524, 14153, 35992],\n        [60274, 31787, 28494, 5971, 43188, 54644, 59481, 53670, 22290, 37128, 331, 8749, 51221, 10805, 59072, 20235],\n        [32956, 9301, 40744, 43940, 8005, 59028, 6042, 57815, 46832, 17446, 26156, 15833, 48818, 59675, 28865, 23306],\n        [49528, 37514, 4533, 21834, 28572, 33595, 39613, 21847, 8235, 39884, 49386, 33404, 46238, 4533, 14019, 44341]\n    ],\n    [\n        [13520, 10062, 19796, 50982, 28127, 1185, 21896, 7294, 35522, 55885, 16199, 9499, 7474, 17154, 20526, 32199],\n        [43044, 58825, 11948, 35655, 27574, 9647, 24265, 33261, 26619, 32517, 60079, 41127, 32747, 50634, 1462, 22573],\n        [6688, 12150, 2309, 50326, 44494, 29011, 42576, 62321, 25619, 61073, 23225, 17508, 34902, 22453, 42856, 30701],\n        [9856, 42216, 54394, 49566, 27078, 23409, 44003, 60759, 1741, 13484, 57096, 9099, 64921, 12952, 33369, 19993]\n    ],\n    [\n        [39994, 36924, 38716, 9988, 17688, 25308, 63263, 34266, 43908, 39256, 6720, 13578, 20356, 12646, 27774, 58447],\n        [28872, 23151, 53577, 7594, 42708, 31053, 6792, 17705, 57524, 246, 50757, 41199, 47301, 21016, 15318, 35555],\n        [506, 5084, 33264, 20991, 16469, 58774, 16386, 16806, 29528, 8833, 29335, 34880, 51925, 65289, 45137, 43123],\n        [45022, 63415, 1313, 35157, 51995, 57989, 4228, 29912, 59151, 10033, 48362, 35074, 35816, 56820, 23003, 21071]\n    ],\n    [\n        [30016, 64315, 11768, 64831, 34192, 38446, 13596, 5568, 10200, 47102, 44199, 38111, 1137, 33169, 44427, 11981],\n        [53314, 33212, 22188, 15250, 46922, 53251, 3257, 26990, 57926, 1244, 26236, 33299, 29611, 45115, 36389, 6204],\n        [52134, 47811, 1089, 751, 20216, 57829, 4340, 8861, 5642, 58651, 7321, 62244, 5807, 53820, 34632, 14910],\n        [1192, 40744, 40494, 35373, 44784, 216, 26351, 23745, 39535, 64058, 64144, 18692, 4804, 19591, 33466, 30062]\n    ],\n    [\n        [55514, 37839, 50154, 2319, 61607, 60598, 23431, 31075, 50947, 19730, 5615, 4546, 53011, 4481, 36623, 43160],\n        [16272, 51332, 32677, 4789, 65140, 35854, 11024, 43068, 32114, 54279, 30718, 49454, 58452, 21116, 41460, 46074],\n        [29292, 40753, 51867, 58534, 37257, 8383, 27800, 58794, 38065, 14102, 62218, 11074, 58532, 62338, 26575, 23002],\n        [63994, 44141, 1118, 19501, 1885, 23672, 53067, 39654, 29384, 836, 24462, 55689, 53660, 12832, 41765, 40356]\n    ],\n    [\n        [34194, 18633, 23616, 10229, 22878, 10359, 39369, 32529, 44364, 20283, 34567, 35722, 25218, 8978, 31174, 65195],\n        [21212, 2976, 26253, 64819, 1954, 43871, 37282, 25567, 30996, 23807, 31819, 24026, 25545, 9048, 33531, 35691],\n        [40510, 7926, 6185, 9165, 50389, 20506, 55474, 55057, 54643, 11931, 14479, 20535, 45277, 64342, 25375, 25428],\n        [30980, 49195, 65095, 9595, 3435, 30419, 50841, 20685, 60752, 35286, 22163, 22187, 42283, 19459, 7782, 60668]\n    ],\n    [\n        [16454, 22829, 57524, 61150, 51012, 49995, 44751, 15703, 46951, 33304, 20440, 38434, 5272, 17981, 18835, 26279],\n        [26952, 32153, 61197, 52990, 19353, 34226, 62198, 31038, 39680, 36452, 54968, 62702, 31455, 24288, 20217, 65373],\n        [47304, 56472, 27093, 43097, 28445, 63957, 8814, 56985, 39684, 56409, 56153, 27951, 58691, 8208, 27489, 26321],\n        [21068, 36732, 54005, 53975, 12937, 53888, 9019, 62153, 23181, 29030, 47239, 28749, 3504, 40752, 54773, 60784]\n    ],\n    [\n        [54524, 1474, 60588, 4429, 28606, 25932, 17851, 32520, 9366, 49268, 49730, 36020, 23077, 18314, 23203, 56086],\n        [63484, 5225, 48435, 47450, 40180, 17679, 31582, 53725, 24365, 21785, 44206, 38500, 30643, 1156, 42751, 65494],\n        [61176, 58573, 38654, 28317, 17529, 39023, 5538, 12818, 26484, 8433, 3813, 60225, 34280, 4897, 28716, 45409],\n        [24046, 14591, 42480, 27934, 19146, 8068, 12907, 54715, 3558, 34672, 37335, 58503, 44626, 12894, 12312, 29203]\n    ],\n    [\n        [28404, 26534, 40016, 29073, 54024, 41752, 32268, 13591, 3601, 17818, 55034, 29750, 21931, 36224, 59836, 14062],\n        [752, 39642, 5076, 29864, 56896, 25325, 58203, 58379, 25699, 27450, 6759, 5250, 19268, 11837, 43092, 47266],\n        [43318, 30811, 1385, 36272, 48061, 57619, 53755, 58178, 16605, 51212, 15434, 4236, 57437, 59854, 17153, 14671],\n        [21658, 14892, 34534, 8488, 48513, 42402, 23406, 19776, 19711, 20106, 41434, 36046, 9254, 9244, 9047, 10924]\n    ],\n    [\n        [13172, 32561, 2918, 41977, 7833, 24765, 43357, 50171, 64096, 53471, 36165, 13414, 23904, 30376, 35533, 12194],\n        [5878, 14641, 1695, 15152, 23952, 24637, 22992, 28875, 21392, 51108, 42474, 24288, 5438, 5223, 27745, 23708],\n        [29686, 14717, 26523, 38852, 58522, 40848, 39532, 56161, 15612, 35815, 17511, 24073, 43475, 65259, 59877, 57364],\n        [47416, 19681, 53548, 23571, 47898, 32018, 42331, 54933, 50410, 27964, 18517, 32887, 3233, 1203, 11747, 62081]\n    ],\n    [\n        [24500, 28929, 31279, 59780, 33066, 30971, 31038, 32383, 14898, 47567, 9572, 58227, 20512, 23084, 52487, 36075],\n        [18612, 36152, 7122, 34332, 54876, 51248, 17169, 3212, 45955, 34951, 44170, 36032, 51198, 64467, 29888, 40081],\n        [31072, 48829, 22816, 12087, 39710, 18133, 4128, 41570, 37344, 4729, 9430, 38128, 52878, 44485, 21462, 54342],\n        [46372, 29942, 43195, 52268, 1818, 20765, 58839, 18415, 53203, 6768, 14512, 30758, 2729, 11918, 63825, 5891]\n    ],\n    [\n        [4544, 54969, 34353, 23892, 50560, 19821, 25449, 17386, 28755, 14716, 8982, 10122, 31003, 16472, 50870, 35114],\n        [21324, 57949, 23114, 31014, 48974, 6680, 8347, 45254, 42468, 57730, 46684, 29448, 52569, 7579, 11958, 15562],\n        [41410, 46840, 24516, 26156, 61021, 8213, 21189, 11363, 25632, 39519, 33161, 60025, 38611, 19081, 24376, 47071],\n        [33870, 8288, 63038, 50640, 52008, 15804, 30250, 34990, 50249, 62396, 49591, 47969, 7820, 31565, 148, 36119]\n    ],\n    [\n        [17360, 39224, 31662, 26808, 50261, 26321, 65102, 49784, 45511, 33277, 1722, 16265, 18407, 42369, 36630, 45955],\n        [50132, 31996, 21874, 51747, 44175, 59286, 26050, 5467, 27553, 9293, 38723, 40287, 40023, 51545, 1800, 49844],\n        [1100, 10302, 49411, 1866, 24816, 52587, 59282, 30503, 48158, 51292, 40257, 23347, 33072, 10886, 56228, 31999],\n        [45954, 54092, 50325, 54066, 24016, 12068, 36947, 37335, 3170, 49678, 9506, 49895, 26600, 6362, 59071, 16351]\n    ],\n    [\n        [50042, 26659, 62911, 17882, 39715, 26820, 36039, 5403, 4696, 51962, 26173, 5291, 4274, 10711, 17094, 65095],\n        [63324, 34971, 63384, 31668, 39514, 46571, 15384, 52452, 46509, 61540, 18142, 25306, 27938, 28487, 56604, 58188],\n        [31170, 52727, 44375, 36135, 35068, 13194, 31246, 21494, 1233, 2086, 27533, 55333, 43552, 8944, 61793, 24509],\n        [6016, 57258, 26352, 22969, 51527, 60442, 15782, 24588, 5635, 15651, 3143, 25932, 54008, 60087, 41601, 26286]\n    ],\n    [\n        [52572, 2125, 51620, 20421, 62926, 22258, 21800, 20094, 2249, 21146, 23965, 2930, 6330, 50255, 52333, 24439],\n        [28566, 65514, 53684, 33979, 47125, 63129, 13468, 63110, 326, 19985, 58301, 7716, 47482, 46353, 47157, 16567],\n        [2474, 60715, 8237, 24972, 55371, 370, 47523, 44447, 46114, 29344, 52070, 64353, 6657, 41316, 16954, 33470],\n        [9548, 39059, 5911, 46147, 48779, 43683, 39324, 30319, 23794, 54502, 64671, 9565, 2772, 63702, 17294, 53713]\n    ],\n    [\n        [49658, 42486, 47389, 49542, 6085, 32027, 29475, 37974, 15373, 41268, 3680, 53132, 8790, 54695, 62097, 52753],\n        [41564, 61421, 6645, 65173, 29555, 5800, 45271, 37406, 11686, 43823, 12038, 41335, 39472, 29400, 25259, 5670],\n        [36438, 31713, 60252, 17677, 27321, 34099, 63219, 49621, 55728, 56905, 51355, 21521, 27833, 37818, 331, 56270],\n        [42060, 42351, 25525, 14358, 54369, 58800, 50067, 31796, 9543, 11846, 20791, 62781, 58208, 43712, 45976, 62541]\n    ],\n    [\n        [50302, 16259, 27905, 1977, 60669, 44950, 9701, 55463, 56180, 48803, 24632, 40392, 23679, 34959, 28974, 33534],\n        [53608, 56060, 5142, 39438, 64195, 4055, 31842, 63213, 42570, 8921, 6369, 32509, 12775, 2174, 46036, 8348],\n        [32566, 27460, 24323, 55985, 36504, 51420, 32785, 14474, 18758, 54591, 20464, 21350, 15382, 10710, 2577, 42237],\n        [41040, 8329, 1489, 55745, 6557, 52545, 37698, 5620, 24397, 42749, 54796, 15875, 36647, 35397, 17542, 65320]\n    ],\n    [\n        [11858, 13419, 15878, 8480, 35962, 47886, 40084, 14438, 63379, 60984, 32551, 8950, 48507, 48639, 3042, 31681],\n        [32580, 46519, 33881, 13148, 47040, 37140, 34584, 15805, 3099, 6138, 56613, 20560, 50531, 5162, 55043, 21240],\n        [65110, 65025, 32950, 60926, 14023, 26147, 19721, 4845, 16265, 15496, 31937, 63519, 61232, 26469, 16634, 15261],\n        [3914, 59684, 65144, 26228, 18750, 46969, 31132, 25095, 40027, 14892, 12835, 18633, 22195, 6873, 57282, 51587]\n    ],\n    [\n        [39898, 2454, 33674, 19146, 52117, 64844, 39151, 9163, 33915, 56712, 25650, 57749, 65307, 39426, 25711, 31687],\n        [61098, 53624, 12919, 11911, 50454, 27958, 61376, 120, 46119, 17951, 30472, 33832, 65289, 2319, 19337, 58741],\n        [13166, 60833, 42736, 5601, 26090, 40219, 18503, 30019, 39389, 10765, 27442, 27199, 4859, 286, 15360, 40475],\n        [32108, 58186, 27903, 36224, 43927, 9190, 45274, 39384, 13479, 11053, 59100, 45511, 37186, 11525, 32080, 10564]\n    ],\n    [\n        [21006, 25687, 7405, 38299, 36761, 23602, 29403, 25260, 26670, 8304, 46690, 64996, 61839, 4068, 25135, 3212],\n        [48554, 28979, 35013, 22024, 2183, 3208, 43509, 18761, 49948, 31352, 47466, 22603, 6638, 38380, 4168, 42418],\n        [45908, 21097, 34825, 52779, 62699, 27869, 6150, 61815, 34370, 13132, 47143, 29258, 27521, 57055, 5513, 13667],\n        [19928, 12864, 4547, 23839, 14990, 45924, 29506, 46982, 15232, 18886, 40279, 35488, 46124, 45810, 34648, 1344]\n    ],\n    [\n        [54524, 11890, 7791, 51574, 1576, 23615, 46776, 39793, 37952, 25189, 59073, 38295, 2999, 44099, 43052, 13748],\n        [10142, 18809, 7702, 48503, 49900, 40500, 7867, 6935, 36282, 4175, 28910, 25251, 2385, 11241, 35171, 50010],\n        [49670, 37122, 3920, 20618, 36203, 16480, 51789, 44094, 18792, 41154, 18227, 31701, 23079, 59564, 13972, 4327],\n        [5858, 44830, 42391, 61526, 29009, 5097, 32045, 13884, 30752, 53151, 2286, 16747, 43656, 14939, 18275, 60827]\n    ],\n    [\n        [62318, 33814, 57357, 41673, 36549, 62380, 17089, 64321, 22675, 41605, 36226, 50774, 37347, 26967, 18000, 51737],\n        [55220, 3790, 50623, 54132, 39551, 62369, 34778, 35321, 27920, 44049, 38835, 53529, 38582, 52541, 23859, 46539],\n        [43256, 62689, 24407, 49924, 58566, 9887, 47162, 47488, 51730, 25867, 28864, 6649, 51503, 14700, 8151, 2438],\n        [6782, 62752, 23122, 23272, 5406, 58082, 24962, 45858, 25291, 56365, 48296, 52287, 36124, 44357, 5014, 910]\n    ],\n    [\n        [59230, 1013, 50584, 64204, 64365, 39164, 24686, 6867, 27093, 49119, 9187, 49545, 9343, 7763, 39388, 26957],\n        [790, 58703, 58011, 61558, 50679, 29674, 18153, 15984, 14560, 29952, 21172, 45153, 41874, 32114, 61839, 22948],\n        [46034, 2811, 27419, 22636, 28422, 48434, 63070, 8042, 25271, 21319, 48194, 56737, 6615, 25413, 1285, 43496],\n        [62180, 22538, 57576, 28743, 27441, 33351, 50457, 19408, 8249, 40741, 30774, 35528, 35528, 59882, 63530, 49179]\n    ],\n    [\n        [22016, 32592, 41234, 57768, 50345, 45663, 65279, 32674, 44077, 53185, 53465, 40126, 22211, 18246, 21056, 18769],\n        [58396, 921, 43214, 44877, 52869, 26101, 16789, 56722, 37276, 13539, 59729, 51551, 9167, 32917, 8171, 2803],\n        [62486, 51280, 2161, 47155, 63834, 43959, 36690, 44651, 51320, 65032, 27297, 59455, 60168, 31657, 50383, 8051],\n        [25378, 47624, 58854, 36725, 8645, 34456, 57105, 1118, 54653, 3227, 55561, 46105, 24090, 40391, 25043, 64969]\n    ],\n    [\n        [25610, 9200, 35593, 51730, 29259, 41236, 5269, 5568, 35583, 12514, 22096, 37053, 31807, 43865, 34892, 52837],\n        [56274, 6809, 8077, 19359, 43676, 61364, 58679, 12564, 38463, 63821, 46312, 48069, 44335, 45153, 3406, 34722],\n        [7096, 47982, 58547, 63190, 65496, 15994, 35087, 11078, 3311, 3090, 52351, 46407, 62544, 63877, 51771, 44436],\n        [41032, 5422, 55000, 60658, 6733, 4862, 64200, 35157, 24840, 39762, 12374, 12094, 59095, 62836, 20204, 45719]\n    ],\n    [\n        [51394, 43725, 48812, 31982, 61657, 10054, 36377, 46968, 55346, 30920, 3544, 60376, 44654, 13725, 16083, 16640],\n        [43526, 18748, 19425, 43744, 4242, 43450, 2639, 18206, 50401, 5819, 48631, 22997, 51452, 56322, 27766, 44222],\n        [51300, 10815, 31644, 45393, 33159, 5929, 4412, 18179, 56396, 59815, 2751, 11053, 29739, 35041, 8190, 61119],\n        [50520, 50996, 1532, 5218, 25915, 47139, 34032, 8557, 36325, 15930, 20717, 36815, 34617, 40109, 21229, 10817]\n    ],\n    [\n        [9110, 27420, 60833, 33653, 2186, 8888, 13510, 42883, 37994, 64204, 15767, 31069, 12505, 63406, 59466, 54923],\n        [11390, 51951, 9459, 45855, 24839, 60770, 52827, 37792, 48968, 18250, 30297, 25126, 61533, 48407, 58274, 52368],\n        [12250, 10699, 49738, 56979, 50757, 11003, 1465, 16848, 27118, 58607, 41002, 46695, 4170, 13036, 59441, 44890],\n        [776, 53791, 38594, 12149, 10063, 11312, 55685, 16384, 33522, 26771, 31058, 43709, 59243, 28787, 36251, 32857]\n    ],\n    [\n        [33044, 57377, 56870, 59085, 47485, 31115, 55758, 32649, 42639, 47754, 49143, 24250, 53020, 35942, 32294, 56663],\n        [38062, 31772, 32898, 59688, 18439, 5441, 57395, 49609, 35204, 18708, 54673, 48056, 49213, 1428, 14076, 26297],\n        [5162, 15724, 63355, 54667, 53562, 5955, 55921, 1027, 32598, 34002, 8620, 32925, 59436, 56123, 63463, 56084],\n        [106, 38431, 976, 1802, 12390, 26948, 34634, 58156, 64949, 60489, 37995, 32136, 41953, 11605, 38657, 7068]\n    ],\n    [\n        [36548, 51764, 243, 63096, 10996, 33375, 50010, 46944, 58551, 61063, 32375, 29765, 17162, 42887, 11269, 21478],\n        [33398, 50285, 47131, 33379, 27786, 3546, 59933, 5436, 4636, 16450, 29986, 42978, 10748, 55531, 3133, 61830],\n        [5646, 9420, 46975, 1855, 12552, 7622, 20943, 58492, 17542, 64308, 48198, 14694, 14095, 40270, 9883, 59657],\n        [24470, 39964, 22169, 9495, 12515, 4749, 35195, 58513, 54000, 16384, 29246, 65427, 1533, 7228, 55612, 559]\n    ],\n    [\n        [14522, 59643, 45786, 64898, 14887, 75, 44597, 993, 32942, 14505, 4330, 39187, 42962, 31296, 65277, 20469],\n        [46598, 18265, 43435, 62844, 20074, 8102, 28290, 27031, 59768, 23467, 14292, 31098, 17102, 60869, 39468, 10161],\n        [8620, 6339, 49741, 14289, 54624, 55008, 54799, 23526, 32774, 44988, 9291, 60548, 23263, 37336, 32088, 49489],\n        [27466, 41700, 36729, 18558, 63544, 23743, 184, 28065, 61862, 34783, 25405, 308, 55957, 34592, 35056, 38131]\n    ],\n    [\n        [1410, 51483, 55830, 64960, 59891, 51444, 63664, 1012, 17663, 33359, 55362, 8279, 47824, 29482, 11355, 40386],\n        [33000, 16756, 42832, 46770, 7687, 11250, 28619, 6463, 18959, 59959, 1019, 14744, 36624, 15099, 30108, 58026],\n        [37172, 44673, 4509, 38975, 2174, 51356, 52461, 38102, 37509, 3208, 30641, 15779, 42551, 43435, 48902, 25445],\n        [24278, 44653, 596, 46080, 36951, 4765, 4847, 49911, 25995, 39166, 4502, 60938, 37260, 43503, 20141, 35759]\n    ],\n    [\n        [5262, 63951, 18641, 35278, 16875, 14838, 24490, 43493, 22217, 31292, 33343, 22707, 3389, 34733, 48547, 42866],\n        [30720, 27502, 30869, 39222, 22873, 46803, 12668, 45570, 14783, 45438, 4812, 35712, 65426, 47541, 4273, 52852],\n        [6340, 52772, 39561, 8770, 43784, 13709, 28326, 4260, 42757, 49243, 38651, 18966, 6, 16077, 45573, 3896],\n        [586, 8760, 62370, 14338, 37345, 6629, 63917, 38420, 23278, 18311, 1433, 30594, 16219, 34834, 30505, 7157]\n    ],\n    [\n        [57364, 56340, 9679, 36798, 52667, 43589, 10258, 15139, 32579, 63686, 15143, 57110, 27948, 22049, 38280, 30708],\n        [11906, 1869, 25023, 17917, 46045, 18019, 25471, 8574, 58420, 54521, 31163, 59132, 30961, 60873, 5630, 20171],\n        [55940, 6174, 8908, 25153, 44267, 37782, 63792, 9344, 44111, 8410, 52233, 55714, 23415, 21015, 1005, 2818],\n        [356, 46490, 8006, 42570, 17595, 11743, 2700, 41523, 28695, 8658, 178, 38909, 36352, 22977, 41621, 15212]\n    ],\n    [\n        [18646, 40694, 41172, 22161, 38115, 36104, 45620, 47728, 38855, 46486, 27821, 51791, 23552, 8571, 13248, 34158],\n        [38536, 10963, 53793, 26113, 60271, 38478, 40981, 49866, 31673, 12932, 11570, 14525, 55770, 33965, 62019, 2954],\n        [32026, 33087, 31173, 60487, 20956, 13107, 37662, 57161, 6641, 7869, 36192, 61086, 8124, 28418, 12436, 6163],\n        [29828, 60048, 42103, 55005, 50916, 6045, 14983, 32449, 45529, 2619, 23642, 23520, 62740, 44971, 30786, 43064]\n    ],\n    [\n        [9102, 7782, 20123, 29344, 37260, 40303, 49697, 52359, 29916, 12036, 37807, 6467, 34757, 61370, 2381, 20926],\n        [28184, 37975, 4075, 7763, 10429, 15600, 25511, 6958, 33993, 52198, 44017, 2198, 58780, 37479, 41216, 42044],\n        [8582, 30971, 39043, 3370, 18999, 50038, 1847, 55008, 34589, 45156, 13974, 24755, 25458, 31553, 12677, 5538],\n        [16642, 3131, 53277, 61224, 39066, 64390, 992, 44757, 27136, 26619, 42987, 8704, 13123, 51676, 12842, 56030]\n    ],\n    [\n        [10948, 21706, 574, 52138, 36818, 33808, 36026, 62620, 51769, 55305, 64504, 30138, 36874, 1064, 61881, 33036],\n        [55580, 34979, 1525, 1282, 38788, 20068, 51239, 1056, 64982, 9768, 54072, 17960, 5036, 2302, 6870, 29352],\n        [57906, 7397, 42898, 58092, 47035, 503, 37556, 58885, 8790, 55495, 15536, 29053, 18449, 12077, 29195, 38020],\n        [35046, 18568, 28836, 60014, 12406, 7194, 5544, 32124, 7673, 28497, 55840, 9185, 59170, 57978, 12409, 27471]\n    ],\n    [\n        [56386, 51037, 28441, 16377, 56429, 61962, 42147, 7931, 11714, 37054, 43551, 46619, 61846, 35204, 31253, 63221],\n        [12618, 14109, 58253, 14831, 14155, 50125, 50080, 23384, 41180, 14912, 49381, 38940, 4649, 61612, 6462, 21262],\n        [27042, 11301, 22032, 23408, 45747, 54253, 29332, 60540, 34420, 49738, 23895, 20936, 5152, 29608, 39878, 13848],\n        [7164, 27114, 5482, 32100, 25629, 55714, 59848, 1489, 62203, 26375, 20773, 2976, 52009, 1789, 15869, 19681]\n    ],\n    [\n        [17672, 9956, 30350, 23483, 34852, 52574, 37502, 7468, 55182, 500, 62826, 52232, 51952, 61414, 46843, 16495],\n        [56926, 40570, 63953, 60240, 63418, 39954, 51987, 20635, 17795, 64999, 14848, 41918, 26619, 23285, 9176, 13673],\n        [29398, 2372, 32147, 48091, 12331, 6346, 9189, 22474, 27306, 36868, 22966, 25605, 52685, 42501, 56705, 45923],\n        [36658, 24956, 35439, 53422, 57892, 52993, 34766, 23387, 41573, 17799, 28515, 58190, 4539, 16055, 32404, 13562]\n    ],\n    [\n        [32286, 64371, 6458, 6257, 16575, 43457, 58636, 27544, 35701, 23764, 23730, 8337, 35319, 31994, 52928, 46997],\n        [33312, 41619, 20505, 60234, 5693, 40272, 16544, 12153, 1495, 51760, 58626, 58044, 23844, 36069, 48066, 43910],\n        [9842, 7854, 13609, 37368, 9746, 26791, 22102, 34927, 53851, 59329, 1924, 13282, 12920, 40956, 797, 14917],\n        [4402, 38606, 44565, 6082, 60675, 23468, 42348, 16981, 47124, 62165, 26648, 50136, 53771, 49221, 38877, 22761]\n    ],\n    [\n        [47072, 45034, 58399, 44124, 26911, 2858, 54043, 43921, 21031, 54442, 43992, 3550, 35967, 3925, 46536, 27098],\n        [46226, 39386, 43960, 62435, 51846, 38640, 2727, 24632, 57009, 27876, 41435, 17223, 40692, 30573, 12474, 30504],\n        [63796, 32599, 28172, 63262, 61908, 50076, 16573, 9102, 26469, 20440, 22225, 14293, 14560, 20715, 18091, 36684],\n        [7066, 39969, 61309, 33904, 12008, 53363, 813, 48402, 18582, 34550, 22077, 11828, 16303, 44027, 38085, 16840]\n    ],\n    [\n        [52288, 39531, 3209, 8738, 61205, 14810, 46583, 16787, 57785, 7933, 19347, 23310, 50455, 12475, 64587, 48743],\n        [14746, 50, 9877, 13533, 21129, 19163, 2813, 32064, 58001, 65175, 29595, 14447, 22842, 38118, 37045, 58237],\n        [24848, 4000, 12469, 43500, 54210, 24075, 42364, 39116, 37239, 7694, 64399, 18825, 10098, 58672, 1542, 58742],\n        [60140, 14584, 29516, 20621, 43049, 31172, 38282, 27974, 17397, 2601, 60469, 15428, 18864, 54014, 8175, 6346]\n    ],\n    [\n        [12336, 32285, 52122, 53132, 59076, 52200, 15678, 23322, 12873, 5571, 24224, 7290, 21202, 44945, 12340, 10036],\n        [28614, 4197, 33389, 55458, 29605, 24289, 13829, 16727, 27338, 27324, 63273, 29358, 57497, 40642, 58504, 26461],\n        [10510, 53967, 4162, 21981, 55070, 8232, 41432, 6071, 12265, 6545, 15666, 31748, 30433, 28201, 40536, 12573],\n        [40740, 11956, 12416, 41521, 27802, 55657, 43904, 4883, 50061, 24248, 19283, 18389, 24955, 60735, 12079, 60794]\n    ],\n    [\n        [40230, 52697, 52019, 17869, 9133, 3539, 49181, 22403, 23580, 45494, 20618, 14470, 44762, 32978, 28319, 14519],\n        [39140, 8454, 32929, 20407, 42962, 30618, 47289, 26948, 37762, 4331, 39690, 34738, 723, 9764, 30355, 12327],\n        [22166, 59151, 37639, 29856, 31170, 47801, 7513, 24059, 43266, 45166, 44684, 60794, 43729, 55000, 41451, 13797],\n        [5260, 48734, 28958, 58206, 54280, 26696, 50173, 24829, 11474, 55854, 37023, 41608, 13556, 22249, 23922, 38224]\n    ],\n    [\n        [62524, 25344, 18174, 11560, 18971, 54054, 54602, 51962, 55371, 22536, 42006, 13874, 6938, 62169, 54007, 25391],\n        [61106, 3689, 14511, 50101, 40013, 9278, 49865, 6556, 54423, 8036, 47751, 27018, 35669, 52744, 3268, 31069],\n        [64228, 48955, 32270, 34590, 64712, 55953, 40759, 14558, 50108, 51524, 62943, 38104, 54762, 15909, 56396, 1630],\n        [49528, 65028, 17936, 496, 24436, 59393, 53298, 56060, 11292, 27137, 30705, 58002, 56291, 22777, 14459, 55394]\n    ],\n    [\n        [9300, 24358, 10365, 4113, 16027, 28594, 14212, 25547, 29756, 52816, 51479, 17992, 47942, 336, 51899, 62226],\n        [2168, 34702, 17268, 58245, 12322, 52956, 38198, 6156, 23523, 48809, 58167, 29461, 62204, 53019, 38247, 23159],\n        [64928, 37253, 15849, 32082, 7229, 5992, 48853, 8661, 45940, 37713, 27949, 1936, 53138, 45426, 4360, 14182],\n        [64946, 34560, 40884, 31889, 5214, 33471, 65018, 8537, 34060, 19273, 34219, 8317, 24826, 36694, 58053, 8659]\n    ],\n    [\n        [44274, 2986, 47579, 4606, 45493, 45334, 6083, 24954, 4163, 53049, 34031, 29611, 30731, 25581, 57354, 30856],\n        [11670, 40926, 40434, 43227, 10238, 15645, 37931, 27459, 48773, 44057, 19256, 33202, 62971, 53717, 22012, 24061],\n        [36496, 12740, 23104, 18804, 22304, 50979, 8991, 59174, 54955, 46798, 1616, 1014, 20336, 16364, 48393, 21517],\n        [16640, 38093, 46189, 63597, 741, 35315, 33811, 28568, 53609, 11867, 30693, 54042, 4200, 30248, 48310, 56763]\n    ],\n    [\n        [32116, 58196, 52278, 24473, 13904, 29001, 31806, 23920, 36793, 31846, 15237, 6642, 14485, 54529, 61551, 60337],\n        [31668, 30269, 50334, 63808, 27988, 17202, 16975, 62602, 12986, 54283, 48495, 16604, 63996, 45756, 43924, 49946],\n        [46492, 9834, 2780, 40077, 24468, 6675, 32885, 55781, 27207, 13780, 12675, 2888, 4283, 57982, 45822, 27910],\n        [42154, 16017, 59834, 9193, 313, 61743, 11559, 59682, 41802, 7974, 25241, 48746, 16049, 15168, 6092, 61891]\n    ],\n    [\n        [57006, 61692, 36832, 20438, 14626, 62652, 33291, 29065, 24116, 31663, 48738, 7194, 61939, 46905, 7476, 57623],\n        [60418, 1217, 14574, 5580, 55470, 54707, 56865, 17794, 62093, 7601, 5345, 14504, 3655, 7581, 19833, 12060],\n        [30822, 46435, 34683, 13209, 27051, 17277, 30940, 40592, 5822, 4855, 30139, 1839, 29317, 634, 11420, 12824],\n        [12248, 37666, 30083, 47534, 26927, 20790, 55568, 59215, 44969, 48593, 27713, 55129, 30696, 38509, 62435, 32276]\n    ],\n    [\n        [14372, 20212, 55084, 32885, 30997, 18068, 46228, 14473, 23946, 40241, 15909, 9473, 50546, 19193, 6497, 52187],\n        [57788, 58125, 40693, 62159, 55296, 26356, 48349, 18364, 55546, 63532, 58304, 44911, 1309, 53027, 36601, 54345],\n        [53632, 36227, 11450, 33519, 1491, 37481, 26545, 26386, 60429, 45602, 46332, 2845, 58207, 49068, 56653, 17123],\n        [59398, 27993, 56727, 47009, 4530, 56077, 24923, 50897, 60710, 23960, 30942, 58522, 42985, 26754, 56896, 65019]\n    ],\n    [\n        [3022, 10268, 56468, 24038, 21617, 25412, 20276, 32978, 16835, 42941, 17469, 21342, 16296, 34201, 56693, 11594],\n        [64062, 29467, 35769, 14378, 45773, 9333, 19347, 36627, 42504, 24898, 65432, 1693, 61415, 43842, 36331, 30862],\n        [3458, 39866, 33737, 51457, 19389, 35851, 16319, 43314, 47686, 5991, 35218, 45692, 43279, 25135, 10483, 6441],\n        [44192, 14663, 46056, 61261, 60054, 44285, 36034, 19894, 47639, 48638, 49188, 60647, 13774, 25372, 30586, 16520]\n    ],\n    [\n        [65412, 64151, 8978, 4169, 32559, 38767, 6044, 22855, 20895, 7220, 62756, 44945, 40463, 49990, 47431, 4036],\n        [22604, 59713, 29874, 5987, 25123, 28086, 58856, 36993, 8225, 14713, 49553, 22804, 54165, 12702, 38631, 25275],\n        [59992, 65146, 2036, 41485, 4229, 25201, 31334, 12151, 60951, 41603, 28873, 24416, 31926, 33411, 60422, 14859],\n        [10348, 1359, 45717, 5473, 19741, 28539, 29099, 13069, 49431, 58176, 30641, 43565, 56242, 27624, 10270, 39660]\n    ],\n    [\n        [37782, 18104, 19945, 25298, 11857, 55928, 64165, 49966, 39062, 54746, 45649, 23073, 5861, 63954, 11996, 12574],\n        [15872, 48009, 43958, 25143, 62156, 29846, 23799, 32684, 60789, 25403, 45314, 36765, 55967, 27567, 23509, 60288],\n        [17130, 24905, 46962, 26064, 58665, 20669, 57240, 43316, 6607, 20479, 23000, 46531, 12669, 44451, 63493, 59632],\n        [51354, 10156, 63968, 52387, 46581, 7485, 30441, 39819, 18747, 12844, 9709, 63232, 58539, 19449, 30600, 9590]\n    ],\n    [\n        [24788, 64682, 60238, 64745, 23363, 21819, 19750, 65399, 9132, 7998, 26850, 8803, 42924, 42088, 59958, 50964],\n        [35160, 53549, 9341, 56220, 20233, 59483, 27715, 33347, 62385, 23457, 49237, 14473, 62919, 54126, 6465, 58832],\n        [41124, 39979, 32930, 7667, 2903, 13763, 11695, 48036, 62692, 49846, 41947, 22825, 17153, 37227, 13313, 34422],\n        [33346, 64901, 51408, 55219, 30622, 10980, 31827, 56369, 25252, 15085, 17155, 11644, 34632, 49910, 40596, 25986]\n    ],\n    [\n        [5152, 54097, 44288, 8051, 61535, 37725, 42168, 51707, 6882, 55863, 10475, 43603, 14352, 29077, 22564, 58544],\n        [62062, 6971, 20948, 22950, 18590, 7304, 42234, 40132, 46705, 13903, 55997, 59060, 18251, 37853, 40780, 2687],\n        [24114, 38133, 39695, 2743, 29980, 65263, 35507, 29887, 14400, 18613, 10432, 21534, 36897, 24284, 64741, 14383],\n        [55560, 7624, 383, 32768, 53508, 17941, 43711, 36463, 12475, 61064, 32226, 49301, 35352, 39268, 51633, 49024]\n    ],\n    [\n        [45406, 55087, 40995, 47625, 6717, 46281, 58960, 43646, 2917, 63786, 264, 30666, 61838, 20247, 58280, 5887],\n        [64692, 12222, 57068, 60115, 38477, 21778, 39084, 62263, 62389, 990, 11278, 33324, 46003, 55064, 45328, 56931],\n        [59472, 31293, 61473, 14704, 22037, 29337, 43459, 14309, 32795, 34715, 35765, 25193, 55273, 41811, 7759, 6873],\n        [10172, 59904, 47875, 44294, 60608, 19232, 11738, 29943, 60383, 51747, 2232, 40322, 51203, 17951, 9002, 37758]\n    ],\n    [\n        [51930, 40294, 2496, 34882, 9218, 39327, 24503, 33772, 8668, 3746, 34545, 10421, 23417, 23026, 46088, 46888],\n        [8508, 55584, 54942, 34393, 57332, 16839, 25180, 53870, 23554, 64293, 58814, 12341, 43077, 25557, 56487, 59570],\n        [32084, 47351, 5430, 24784, 59254, 21471, 5034, 17144, 18611, 41927, 13587, 19283, 47704, 40260, 62498, 8714],\n        [8128, 59391, 52253, 12268, 39629, 19679, 63166, 28222, 35727, 35940, 14681, 11602, 54545, 20345, 64040, 9356]\n    ],\n    [\n        [36846, 3666, 45264, 10736, 64451, 55764, 55230, 40849, 59901, 22142, 54764, 49401, 44634, 15, 35782, 42351],\n        [43044, 37532, 10234, 23552, 15543, 49592, 23627, 44946, 13771, 24231, 63611, 17221, 63400, 60105, 64686, 19115],\n        [2772, 4884, 826, 55928, 58319, 62525, 32347, 2335, 11955, 39963, 20149, 25840, 55633, 11670, 2104, 16001],\n        [36846, 39497, 46154, 53644, 24436, 44936, 59209, 20226, 16613, 36184, 16642, 36710, 33385, 58805, 38559, 18280]\n    ],\n    [\n        [16424, 55464, 9669, 17099, 31843, 29782, 54808, 43226, 51803, 1616, 11582, 43546, 30359, 17425, 49431, 37990],\n        [38588, 20930, 37245, 51752, 12420, 36206, 45644, 47598, 1895, 41383, 61477, 50181, 43579, 7641, 6359, 33384],\n        [9218, 23669, 51037, 40468, 20920, 43770, 34711, 60614, 60566, 21332, 24898, 23467, 23327, 46149, 57949, 30563],\n        [55686, 58060, 33155, 26402, 57338, 47146, 25070, 51571, 41473, 64050, 9201, 9943, 47403, 28810, 45009, 18033]\n    ],\n    [\n        [10560, 44591, 19847, 57850, 35912, 55815, 49676, 28250, 60132, 7823, 23262, 14467, 35788, 45642, 14786, 1888],\n        [46296, 51594, 3875, 55988, 26629, 55540, 27793, 36241, 49816, 63782, 2003, 47943, 64993, 33032, 46910, 32017],\n        [58748, 48223, 40914, 8233, 38447, 56442, 25017, 32848, 1042, 34678, 63650, 5570, 39612, 4428, 46858, 54013],\n        [57292, 43491, 33039, 2565, 57147, 25490, 51290, 7781, 47257, 50111, 7305, 14318, 47180, 19128, 16438, 46850]\n    ],\n    [\n        [37006, 62567, 17513, 30038, 10062, 28639, 11901, 33041, 63972, 13083, 64514, 26007, 13739, 54354, 21991, 34523],\n        [10540, 13962, 31801, 14168, 51142, 1840, 57267, 50983, 13735, 40, 42935, 27879, 8518, 40373, 26812, 33041],\n        [40692, 59886, 65387, 18106, 53915, 62056, 12943, 10703, 1142, 59376, 41959, 29588, 26032, 46380, 6754, 14139],\n        [62076, 1333, 27770, 26172, 51521, 64399, 39728, 44636, 21937, 29693, 51740, 58951, 49014, 40744, 54907, 57106]\n    ],\n    [\n        [61104, 52929, 9947, 36379, 35640, 4142, 14869, 16671, 64536, 65325, 53826, 63057, 62789, 46534, 47786, 36940],\n        [37890, 42384, 58967, 63110, 16716, 12569, 58968, 60784, 35103, 13006, 59199, 22183, 46488, 52953, 21135, 33785],\n        [60712, 19955, 36459, 11974, 28122, 63577, 56473, 12223, 56444, 63361, 58208, 12286, 42055, 23160, 29023, 34728],\n        [56596, 49805, 5085, 15334, 56512, 41766, 2264, 51592, 41538, 25988, 3763, 32248, 8220, 20988, 116, 54334]\n    ],\n    [\n        [16722, 7217, 51887, 64689, 5447, 9461, 62262, 48873, 60104, 12120, 12299, 18694, 53926, 12146, 42094, 45178],\n        [32224, 56698, 49254, 47735, 18651, 64641, 33108, 9489, 44309, 23448, 10371, 53996, 32926, 47772, 42871, 27971],\n        [6110, 58464, 41664, 18452, 42454, 42060, 3167, 43039, 60867, 57606, 54654, 14078, 47443, 41171, 19424, 20940],\n        [10286, 24437, 14877, 21321, 65416, 47845, 30541, 63110, 27822, 43077, 65330, 38084, 52871, 34697, 30008, 39082]\n    ],\n    [\n        [33112, 5676, 5399, 49360, 62855, 53407, 6558, 13018, 47945, 4365, 2857, 1319, 18517, 49613, 8561, 20536],\n        [40948, 1123, 36339, 17166, 34996, 26021, 41558, 7730, 40587, 21524, 10150, 11380, 30713, 52601, 19673, 988],\n        [32196, 63165, 28548, 7517, 54892, 54200, 20228, 19907, 46760, 63301, 57249, 10821, 82, 6040, 43000, 59623],\n        [36158, 16565, 46403, 58247, 6215, 33608, 17752, 65161, 56545, 63804, 26502, 57753, 39521, 1915, 11183, 16290]\n    ],\n    [\n        [20552, 12375, 5432, 10096, 27940, 64327, 32277, 39828, 55031, 51967, 13320, 53952, 31190, 50031, 39124, 62632],\n        [3802, 2022, 65526, 58112, 40223, 21686, 55049, 2544, 36710, 2008, 53635, 5134, 36297, 30755, 34170, 14528],\n        [49500, 13705, 43380, 48537, 52141, 63453, 37933, 51042, 41126, 19698, 7624, 17245, 33586, 22825, 2663, 10119],\n        [49492, 7203, 62542, 770, 19229, 59539, 48234, 41149, 16174, 32490, 1077, 32773, 58256, 60917, 51458, 9574]\n    ],\n    [\n        [40490, 40075, 51698, 17687, 57802, 18618, 61737, 46868, 57400, 32525, 33978, 48983, 65388, 18694, 14816, 61543],\n        [18340, 59476, 22719, 8527, 32915, 28941, 19906, 60476, 55675, 48939, 15674, 7505, 7611, 41217, 7537, 36786],\n        [3382, 21904, 3344, 952, 13906, 7016, 36345, 13616, 28780, 32227, 16223, 45484, 64169, 34369, 61021, 16426],\n        [13636, 36744, 37509, 5590, 10322, 52574, 25327, 17198, 45652, 1459, 4838, 49266, 64404, 4126, 31791, 45409]\n    ],\n    [\n        [57982, 18619, 14750, 15363, 27464, 53601, 660, 30993, 3787, 34960, 48186, 45792, 26227, 29457, 46315, 59099],\n        [3172, 8971, 58610, 12008, 64159, 40967, 33171, 42182, 34261, 46737, 63094, 8187, 10436, 44348, 25434, 19928],\n        [15884, 62104, 60652, 51011, 58612, 23019, 64014, 1433, 8218, 40086, 47057, 23156, 41320, 51348, 14271, 57048],\n        [34704, 12733, 41013, 63840, 8196, 7993, 39428, 42107, 19126, 50728, 31698, 64700, 10872, 5596, 33866, 46040]\n    ],\n    [\n        [7894, 26445, 46176, 28805, 8823, 38888, 3786, 29557, 20798, 60097, 25937, 33367, 4962, 12282, 52839, 37657],\n        [53066, 58697, 46241, 14831, 15425, 43298, 64967, 34804, 60750, 15979, 38418, 37913, 18997, 4616, 8279, 52308],\n        [56626, 30125, 9362, 19426, 50122, 11920, 30866, 27328, 64076, 16562, 52034, 31647, 21034, 17335, 9837, 59760],\n        [57424, 420, 53197, 17056, 41861, 31301, 33249, 20824, 33689, 17056, 61595, 23396, 48374, 27119, 7590, 27178]\n    ],\n    [\n        [7136, 23949, 42608, 62306, 27570, 33232, 62283, 23998, 3973, 56173, 20071, 39718, 34038, 1916, 40217, 50584],\n        [50658, 47351, 30129, 37338, 25, 62571, 19424, 47666, 11875, 45947, 24373, 14309, 35, 39592, 33661, 32080],\n        [34656, 33442, 38097, 47507, 8086, 59218, 52514, 17779, 9397, 11169, 25216, 43857, 8091, 40674, 12467, 46805],\n        [48066, 33236, 20429, 5859, 5127, 46348, 6399, 6133, 63901, 19760, 15452, 38414, 51027, 38711, 31857, 49026]\n    ],\n    [\n        [20652, 48529, 7012, 25345, 32419, 3039, 36072, 28442, 52657, 29824, 8421, 42843, 47280, 55015, 62460, 63825],\n        [25424, 47126, 7114, 51682, 42455, 26840, 47733, 14454, 19512, 56847, 11686, 51586, 31060, 59930, 32869, 54080],\n        [12628, 11788, 43537, 61969, 28008, 26983, 32468, 45781, 33187, 3778, 39787, 33065, 12670, 1251, 12756, 2137],\n        [5954, 39675, 48674, 49832, 14078, 4607, 15081, 34549, 28352, 21977, 25495, 39464, 33007, 44255, 6360, 42296]\n    ],\n    [\n        [52566, 25696, 52775, 17869, 28746, 37492, 60233, 36275, 7124, 15028, 20271, 42020, 46267, 14864, 32208, 36312],\n        [11612, 65133, 49192, 46546, 4281, 58640, 50358, 34256, 30087, 49521, 13654, 56845, 8105, 41032, 11821, 38579],\n        [57856, 23168, 4345, 5780, 46595, 59314, 46732, 17021, 34477, 41884, 5957, 23831, 26957, 16240, 46216, 21108],\n        [46310, 3694, 30974, 38143, 4418, 49397, 24977, 26310, 58473, 28291, 51820, 36429, 10251, 40710, 28436, 23369]\n    ],\n    [\n        [49874, 30774, 51258, 45555, 40270, 5499, 30081, 3728, 9732, 15975, 55404, 45977, 64146, 48693, 13537, 32218],\n        [32394, 61646, 43349, 64085, 43347, 1789, 33465, 60855, 876, 31361, 37997, 40703, 43057, 33207, 10152, 12395],\n        [49662, 37541, 34595, 41935, 50943, 35627, 4549, 40986, 50566, 5090, 25678, 63941, 16762, 36142, 43745, 14318],\n        [49290, 45529, 12081, 23245, 18768, 19677, 10594, 1252, 25754, 11884, 45972, 24821, 16694, 10193, 42327, 29678]\n    ],\n    [\n        [2210, 64497, 10888, 13773, 53641, 2876, 36102, 23723, 56301, 38689, 23702, 42994, 19075, 27258, 19904, 41297],\n        [25292, 32500, 2579, 40091, 18404, 10162, 3843, 20003, 19224, 35766, 21260, 11352, 21345, 55014, 3143, 15857],\n        [12986, 62493, 12421, 932, 65103, 36389, 6970, 50850, 55723, 35198, 35190, 14838, 58174, 24127, 28058, 42379],\n        [16560, 22441, 55042, 8674, 24609, 13850, 4727, 10050, 31807, 30084, 55202, 53689, 31146, 15535, 51936, 48333]\n    ],\n    [\n        [10388, 31636, 20301, 51730, 7997, 46009, 28138, 56691, 60119, 58404, 39428, 58000, 37525, 5392, 29119, 60387],\n        [17920, 49668, 4659, 45568, 46469, 21397, 25051, 53618, 46094, 44545, 197, 59531, 61606, 55674, 34410, 52568],\n        [12824, 52806, 54764, 32307, 39366, 27673, 56161, 4429, 38373, 7767, 6551, 34894, 6967, 53390, 938, 11906],\n        [54494, 64966, 29082, 13587, 1924, 40248, 45480, 61016, 28641, 28759, 41314, 37275, 34569, 47326, 8463, 49019]\n    ],\n    [\n        [28700, 15203, 5474, 15504, 61439, 34414, 36348, 6007, 57596, 28886, 52018, 48801, 18945, 43663, 34072, 19814],\n        [49060, 3543, 50283, 36099, 20158, 37893, 18575, 18705, 48950, 24700, 4804, 29360, 55654, 16143, 64444, 33305],\n        [530, 39478, 52399, 29370, 55438, 51074, 48012, 24022, 13134, 22519, 26440, 3392, 5769, 64628, 22217, 20317],\n        [48104, 8450, 25767, 54766, 33567, 29175, 2192, 44057, 20574, 30460, 42523, 63467, 31218, 24772, 42785, 10582]\n    ],\n    [\n        [36136, 48608, 14773, 15502, 24591, 262, 41753, 42234, 44794, 1971, 59063, 61143, 36407, 17100, 26972, 51820],\n        [36972, 5963, 61489, 54866, 41843, 62109, 25653, 59334, 30746, 19213, 8501, 25085, 31593, 1077, 18082, 35154],\n        [30352, 54683, 34111, 58039, 27311, 40197, 37993, 58030, 12986, 64798, 39931, 49750, 26375, 7344, 21197, 34526],\n        [228, 31733, 31723, 13223, 14003, 28364, 41379, 57617, 39836, 35190, 3849, 47427, 40446, 12345, 41905, 14412]\n    ],\n    [\n        [62748, 64214, 38464, 64629, 4265, 34763, 5512, 63178, 20799, 506, 59382, 2363, 23756, 26565, 51497, 13761],\n        [7634, 34574, 56072, 55319, 48223, 20094, 21906, 9457, 63674, 13632, 40951, 18497, 38375, 12911, 29560, 41652],\n        [31148, 6186, 27358, 39644, 8599, 39503, 51893, 63590, 63711, 59391, 60202, 33952, 52784, 58568, 31256, 39417],\n        [31758, 2573, 54267, 4210, 44835, 22937, 41251, 34289, 18907, 21737, 4301, 21637, 56931, 53720, 18558, 64321]\n    ],\n    [\n        [35412, 26623, 24958, 54470, 39423, 24218, 5320, 15700, 46641, 18133, 50274, 56528, 9307, 55664, 45303, 13285],\n        [27242, 13998, 42765, 25451, 19155, 51816, 841, 3374, 35377, 48170, 22795, 4630, 52074, 22676, 7282, 64758],\n        [51320, 58596, 22431, 28564, 15011, 61874, 8738, 41557, 23492, 7100, 41114, 53241, 53871, 19765, 24785, 30109],\n        [36700, 7396, 40906, 35529, 33243, 18763, 33846, 60863, 35686, 30220, 3263, 55417, 2245, 58896, 39965, 43402]\n    ],\n    [\n        [39598, 28002, 19276, 5456, 57605, 49434, 13298, 11674, 38915, 8142, 32098, 10166, 29076, 58654, 62415, 51566],\n        [53000, 43746, 30091, 27338, 47274, 4411, 13583, 77, 42553, 53860, 24201, 35533, 59464, 24001, 45215, 53636],\n        [34158, 25328, 54838, 26507, 45257, 45394, 11685, 50263, 30321, 48269, 61030, 53995, 39315, 55367, 4852, 35512],\n        [15838, 8024, 16935, 14627, 50567, 27501, 56374, 43747, 41195, 25383, 28362, 40405, 63203, 13228, 47451, 64899]\n    ],\n    [\n        [61484, 21493, 13178, 27120, 27682, 25469, 17676, 14069, 13895, 57367, 18059, 702, 59426, 17178, 42870, 15856],\n        [42296, 42979, 41053, 19672, 22665, 28084, 26045, 23624, 43050, 13835, 21566, 34153, 41679, 18871, 42190, 31232],\n        [19738, 28663, 63518, 62615, 267, 56472, 36918, 45116, 27663, 38295, 45358, 49502, 25300, 45111, 62214, 27569],\n        [7520, 52914, 8870, 41188, 17471, 19382, 34961, 58588, 43952, 20109, 60810, 23533, 11397, 44923, 20684, 32823]\n    ],\n    [\n        [11134, 32050, 27744, 8801, 59059, 18593, 23308, 12817, 14965, 63397, 28738, 5461, 46843, 32076, 42043, 23361],\n        [20908, 28037, 4303, 19218, 50215, 21802, 40705, 26002, 53223, 550, 12697, 60029, 40191, 14147, 29221, 23656],\n        [57918, 58822, 31253, 7301, 59531, 5841, 53639, 13000, 41653, 4480, 18830, 18452, 10920, 58786, 15267, 33312],\n        [45312, 18706, 9758, 957, 21784, 48517, 15119, 49092, 36683, 43119, 41200, 37238, 62598, 20808, 58209, 30646]\n    ],\n    [\n        [33790, 62747, 22333, 31711, 36157, 49918, 49809, 52389, 7033, 60309, 39337, 23028, 35817, 3140, 41230, 12922],\n        [60296, 39853, 23013, 58163, 37369, 13304, 14818, 33674, 28133, 911, 5793, 49996, 38080, 12712, 64609, 55323],\n        [27424, 20119, 24492, 45630, 17941, 32766, 29661, 21424, 26581, 50359, 10098, 65237, 12957, 13306, 14391, 31949],\n        [60122, 43595, 9871, 31633, 6906, 7309, 34165, 8293, 44788, 41164, 40973, 1035, 6632, 63425, 1882, 37780]\n    ],\n    [\n        [10070, 60801, 53381, 48546, 17298, 57040, 47592, 25965, 29579, 25301, 62591, 50154, 37037, 7469, 29736, 967],\n        [36170, 62397, 56258, 40578, 45557, 63151, 10526, 57005, 55581, 703, 45528, 10608, 57876, 14596, 24926, 53279],\n        [18442, 44450, 52637, 26751, 37589, 63880, 16875, 31793, 947, 41531, 1251, 46258, 51438, 58645, 37830, 43488],\n        [12042, 21508, 26616, 52038, 45360, 59050, 61206, 32025, 33536, 32831, 36909, 36369, 59418, 15071, 20960, 18258]\n    ],\n    [\n        [16802, 54391, 9886, 24998, 20555, 28863, 56468, 50340, 51820, 54277, 35040, 25473, 19402, 60236, 20164, 42028],\n        [51802, 46641, 3304, 59941, 64073, 6298, 13447, 62875, 31411, 26014, 49541, 30124, 35949, 22810, 1693, 51292],\n        [59178, 56945, 34034, 6753, 54308, 12288, 7874, 52152, 37450, 60567, 64620, 22123, 26943, 14912, 97, 2442],\n        [48778, 61695, 15304, 34211, 29077, 31063, 16054, 62407, 28612, 56321, 20591, 19299, 5406, 27843, 17945, 13177]\n    ],\n    [\n        [53364, 64260, 15107, 59382, 20639, 7365, 23867, 5094, 37324, 44415, 57507, 567, 61971, 11098, 47906, 32393],\n        [8290, 35529, 60773, 5781, 1523, 39759, 35105, 4062, 16197, 24214, 21939, 6980, 53858, 15846, 34523, 40425],\n        [47036, 62524, 6637, 6577, 47210, 46711, 52589, 49447, 8843, 53995, 4942, 35843, 6800, 46862, 25895, 24583],\n        [8012, 50732, 38377, 54605, 4469, 59477, 56229, 44929, 24148, 36888, 14024, 10213, 48920, 52476, 1171, 9002]\n    ],\n    [\n        [8474, 32327, 54392, 52673, 7647, 19404, 58011, 3019, 55573, 6762, 30522, 58643, 28450, 33766, 1735, 16764],\n        [31824, 26658, 4835, 26214, 34721, 2580, 63804, 17036, 30490, 64637, 5359, 62508, 43290, 42631, 17857, 4986],\n        [10428, 9346, 64400, 52285, 45243, 62493, 25438, 34883, 57716, 13449, 10104, 44304, 30014, 48071, 25251, 18094],\n        [4770, 53167, 13940, 57355, 56416, 9991, 37120, 11794, 56679, 56761, 22648, 50144, 552, 22018, 32372, 30419]\n    ],\n    [\n        [19298, 32667, 54464, 32040, 28328, 25674, 1617, 63241, 18323, 3219, 43040, 60525, 10129, 44262, 48399, 28172],\n        [47666, 40996, 59641, 20174, 6446, 20834, 51359, 60988, 25992, 44498, 51810, 51980, 63944, 42626, 2162, 21119],\n        [28810, 12503, 59293, 3345, 31820, 241, 34003, 41578, 28505, 21128, 9668, 41651, 15170, 23359, 64094, 30240],\n        [44702, 19479, 16687, 37580, 41512, 23880, 13081, 2655, 25979, 48139, 51500, 39023, 44175, 18673, 30749, 15022]\n    ],\n    [\n        [26380, 62191, 40722, 35958, 37738, 22655, 53854, 47041, 62946, 63202, 54650, 23842, 22849, 35840, 56490, 56319],\n        [61676, 34112, 39531, 538, 21477, 40411, 33918, 19556, 50281, 30336, 52852, 12827, 29087, 16594, 40497, 61879],\n        [754, 51660, 50105, 17027, 29547, 22291, 30858, 63663, 18595, 7835, 37901, 51544, 20075, 48944, 4398, 24996],\n        [15112, 28246, 9444, 37591, 334, 25525, 53524, 47115, 51612, 46039, 57111, 48385, 48118, 65405, 39578, 44977]\n    ],\n    [\n        [49848, 54822, 43830, 50086, 22465, 4222, 9274, 47340, 61894, 63876, 49677, 52734, 11862, 51015, 3507, 44751],\n        [10244, 34021, 10288, 51964, 31881, 9983, 45418, 56495, 43340, 30311, 31605, 52391, 36927, 33362, 23023, 52630],\n        [54858, 62288, 33724, 21608, 60979, 22698, 23956, 40021, 33881, 45991, 30871, 65161, 17370, 14106, 11454, 19953],\n        [36080, 31989, 14841, 51651, 57447, 17752, 24105, 54480, 36181, 52946, 5897, 33654, 34541, 46065, 53150, 50695]\n    ],\n    [\n        [58166, 62107, 28818, 42089, 29574, 8365, 30033, 21615, 37651, 51074, 6050, 61441, 30531, 7567, 42797, 60766],\n        [4662, 40425, 36852, 55036, 30725, 25266, 10804, 8719, 23063, 61281, 25083, 50196, 9922, 54609, 57976, 17596],\n        [35566, 15932, 54663, 13358, 12261, 32015, 47685, 32721, 45083, 18564, 6845, 10979, 34488, 25279, 10554, 35836],\n        [26136, 62479, 259, 32535, 32365, 3571, 19725, 62380, 27067, 63153, 13010, 13108, 18380, 65096, 63331, 10412]\n    ],\n    [\n        [34382, 59626, 10572, 50188, 50624, 24270, 15743, 33600, 13583, 9924, 29156, 30413, 17666, 9422, 38472, 14336],\n        [59140, 58755, 10932, 8942, 9532, 10344, 503, 30637, 20106, 10783, 53971, 24967, 40481, 45954, 7228, 40084],\n        [28022, 51079, 4315, 37581, 7244, 26881, 39662, 49091, 37231, 4229, 42612, 39609, 50508, 34664, 47989, 13113],\n        [43654, 22860, 35869, 53508, 64103, 27508, 38194, 12815, 43030, 47303, 5073, 5498, 57103, 38774, 3265, 18448]\n    ],\n    [\n        [6176, 29610, 20212, 56130, 27529, 51064, 57214, 54798, 28444, 27211, 19825, 18811, 57557, 18744, 36264, 26360],\n        [53768, 25172, 29418, 37820, 3777, 12788, 22330, 33873, 1812, 7684, 64841, 58361, 8906, 6576, 46883, 45515],\n        [26104, 12930, 60011, 44334, 37173, 32287, 34037, 32233, 18866, 19624, 43215, 64195, 53198, 56492, 10186, 46626],\n        [11884, 59752, 10639, 10193, 29158, 43303, 41185, 3700, 16159, 62151, 42223, 32445, 28145, 46464, 11838, 2943]\n    ],\n    [\n        [34494, 55934, 52339, 4214, 40222, 14973, 20400, 26145, 21092, 20819, 6679, 60397, 33475, 59589, 60648, 27497],\n        [3060, 61763, 2201, 44465, 2289, 64263, 28421, 61480, 21468, 7436, 11962, 4076, 53814, 57835, 28881, 33870],\n        [57730, 40621, 18261, 53977, 42258, 64870, 3502, 34817, 12071, 59210, 46015, 19422, 50023, 44614, 23958, 48888],\n        [14260, 57073, 1999, 16650, 39625, 53801, 10947, 37172, 49584, 27331, 29799, 12210, 26292, 57932, 42642, 13435]\n    ],\n    [\n        [40394, 41796, 60907, 24734, 37380, 38616, 24491, 60907, 33930, 3250, 46932, 10794, 40045, 27959, 40681, 45876],\n        [62918, 30712, 5523, 47614, 26547, 23290, 24841, 62058, 45665, 36401, 63914, 33256, 15172, 791, 31937, 62571],\n        [22072, 7233, 49858, 61248, 34137, 58226, 22294, 11763, 24717, 62248, 62746, 4418, 32058, 26654, 398, 25591],\n        [11170, 59736, 19554, 16638, 60636, 26232, 38325, 32652, 49844, 58740, 45261, 21667, 47026, 46379, 24333, 24706]\n    ],\n    [\n        [8688, 3399, 17308, 62614, 60692, 21602, 27027, 16729, 30887, 59965, 25214, 21318, 37676, 28471, 35388, 52955],\n        [10842, 23553, 64274, 9890, 28894, 49441, 16291, 40497, 25712, 11079, 7525, 42554, 1206, 48203, 28006, 12887],\n        [586, 23536, 53604, 2778, 13282, 18405, 42214, 46025, 39329, 4661, 22386, 49040, 52230, 31812, 28467, 11470],\n        [22458, 22709, 61374, 26689, 8139, 29047, 52093, 9207, 2145, 12427, 30472, 63091, 63539, 2163, 38858, 61258]\n    ],\n    [\n        [37102, 60991, 24306, 50942, 5917, 9832, 60935, 16310, 42053, 56483, 26873, 25154, 30770, 56233, 35700, 13009],\n        [61632, 45958, 16894, 50596, 46654, 1277, 55449, 60714, 34540, 23274, 4430, 430, 51259, 27312, 43781, 55542],\n        [6604, 36492, 30706, 47924, 31309, 59191, 37620, 23305, 36961, 44494, 39753, 14191, 21221, 23241, 4995, 2256],\n        [10392, 63142, 51687, 10576, 6218, 43700, 58957, 29785, 45759, 55234, 21526, 45992, 62941, 1617, 30895, 15139]\n    ],\n    [\n        [49974, 17752, 9521, 25122, 59020, 9638, 29885, 37343, 28204, 15385, 326, 56522, 20057, 17051, 41609, 30358],\n        [27898, 44903, 55355, 60283, 39236, 6548, 61267, 38990, 54516, 26668, 14717, 20796, 36359, 16764, 38474, 43416],\n        [21542, 52560, 5175, 59219, 712, 32635, 55771, 45822, 50402, 56272, 41477, 41321, 43290, 65319, 42773, 6836],\n        [14824, 29445, 27189, 48880, 29531, 56008, 29753, 1538, 50650, 33929, 2677, 56060, 3126, 7970, 10402, 11449]\n    ],\n    [\n        [18144, 3342, 27672, 34892, 52791, 21799, 55320, 38138, 33482, 54572, 65309, 9234, 55229, 40750, 64635, 54265],\n        [1834, 46541, 38225, 50629, 8337, 4916, 18257, 41159, 5120, 30417, 52784, 12361, 37713, 37959, 4069, 30690],\n        [43080, 13748, 8741, 3597, 27181, 21702, 38400, 24857, 17884, 52390, 4051, 37523, 27482, 8302, 57288, 57667],\n        [3390, 15862, 10717, 39353, 63701, 8707, 52649, 12221, 53975, 18942, 45588, 30468, 49859, 30418, 57734, 44797]\n    ],\n    [\n        [36662, 63548, 20387, 13955, 55910, 35490, 38925, 32261, 33814, 32832, 28310, 429, 21462, 47080, 62634, 60425],\n        [62004, 1771, 40990, 8438, 29110, 39806, 253, 38356, 35948, 27023, 51407, 19193, 39474, 8285, 40272, 2228],\n        [18176, 29489, 46411, 11666, 18092, 53357, 14976, 7428, 24900, 37428, 35803, 23846, 19707, 56945, 26139, 40277],\n        [62450, 53266, 3124, 963, 33374, 48613, 13721, 48618, 47464, 55673, 30104, 37834, 33653, 3117, 13895, 24473]\n    ],\n    [\n        [21264, 47382, 32491, 9647, 2678, 58937, 35602, 38652, 15247, 8752, 23879, 3356, 49503, 3354, 18423, 41143],\n        [32620, 14239, 407, 46036, 5784, 11553, 12499, 32488, 34318, 40336, 27157, 1055, 58144, 59501, 52723, 49958],\n        [65386, 22107, 50912, 15092, 50509, 28164, 36751, 9137, 16592, 64338, 32718, 4713, 54176, 19006, 48207, 323],\n        [30810, 39691, 7035, 54226, 62919, 17772, 58015, 49737, 10660, 56202, 18207, 30773, 30716, 3451, 28351, 31124]\n    ],\n    [\n        [28692, 33364, 62749, 22973, 7523, 35103, 47879, 22609, 37418, 1003, 4015, 64694, 41539, 7943, 38198, 27925],\n        [22850, 7141, 58251, 37433, 44242, 52617, 46062, 1964, 41158, 47290, 16384, 50576, 46788, 57289, 64316, 55981],\n        [62286, 27774, 45678, 408, 53251, 44061, 20406, 17077, 13001, 4055, 7712, 31366, 51315, 35535, 59334, 13141],\n        [65470, 12484, 2456, 43100, 13360, 37435, 4024, 29994, 59559, 52068, 9463, 44368, 48185, 18962, 40491, 18631]\n    ],\n    [\n        [35642, 37576, 17395, 27990, 12613, 26143, 25236, 42898, 18624, 52500, 23293, 37650, 17869, 9069, 41701, 59407],\n        [25368, 45689, 46281, 10931, 17516, 3395, 26463, 1315, 54560, 32143, 20679, 31820, 10199, 1902, 911, 13963],\n        [40624, 24118, 10889, 60672, 54229, 7862, 31104, 27160, 8283, 21605, 53511, 34167, 16261, 39857, 20690, 12728],\n        [37848, 26131, 22412, 33861, 19701, 25834, 45190, 64898, 50855, 15588, 29868, 64429, 65423, 63324, 40454, 16786]\n    ],\n    [\n        [50168, 29998, 17049, 23181, 44063, 51204, 39650, 7224, 14269, 58898, 64576, 59236, 8283, 18556, 61928, 10768],\n        [10770, 3559, 17303, 43209, 1486, 53757, 12391, 45655, 31016, 17323, 6915, 27298, 22761, 55498, 2943, 5799],\n        [49510, 61023, 45744, 16147, 5108, 12279, 8784, 38773, 11599, 58744, 12856, 38904, 58495, 4053, 54176, 15814],\n        [46114, 36497, 32888, 61319, 618, 42904, 27738, 24598, 46522, 16624, 63487, 16219, 17071, 60795, 60540, 31749]\n    ],\n    [\n        [9408, 39319, 4156, 25123, 43802, 35298, 27922, 7953, 57580, 65395, 25712, 22959, 33673, 36378, 14694, 26217],\n        [44544, 31665, 58777, 33037, 8612, 50783, 50880, 56942, 21048, 34673, 44414, 29230, 14197, 57762, 58640, 9336],\n        [9008, 48909, 5036, 8616, 51606, 26503, 10161, 8962, 21498, 64296, 2673, 19035, 22136, 21034, 22335, 10396],\n        [62604, 24710, 43155, 54874, 25201, 60002, 722, 56066, 5664, 55015, 50239, 28685, 55270, 51438, 62122, 14148]\n    ],\n    [\n        [61860, 35276, 61282, 39730, 53544, 25434, 41173, 64373, 9408, 38666, 13682, 29258, 21184, 25753, 60437, 53348],\n        [53210, 44261, 57746, 30922, 33272, 4890, 48606, 38229, 44300, 27626, 49284, 45589, 63329, 62756, 47926, 55103],\n        [45680, 21106, 4516, 19602, 37454, 54021, 4945, 39759, 14054, 11555, 36983, 6908, 9976, 64444, 25833, 30272],\n        [17356, 31125, 49074, 10427, 49304, 49060, 62154, 30836, 1679, 45276, 38264, 51396, 51011, 3550, 48442, 43176]\n    ],\n    [\n        [48058, 3652, 49501, 18721, 8262, 20093, 17242, 38850, 1921, 27292, 5363, 23638, 27335, 10800, 20733, 62166],\n        [60190, 26150, 19214, 64452, 46353, 48767, 54568, 43636, 54774, 32296, 39438, 3570, 14486, 45614, 20661, 44867],\n        [52130, 10690, 44929, 30056, 27031, 27967, 61490, 10025, 33175, 25558, 26549, 57532, 44905, 48114, 59535, 57703],\n        [60450, 10539, 39511, 11702, 33218, 22016, 24226, 26436, 16199, 62118, 20751, 54822, 28326, 123, 20499, 34443]\n    ],\n    [\n        [33582, 58278, 44485, 26602, 12187, 50762, 52736, 53141, 58784, 24885, 34011, 26748, 55171, 7714, 15577, 1456],\n        [32722, 7745, 58718, 13395, 22415, 20925, 59339, 55638, 21508, 2671, 16577, 9188, 57861, 34434, 21828, 48370],\n        [27734, 57497, 3484, 36817, 18129, 12235, 28733, 51957, 62795, 50347, 46984, 55833, 53450, 53728, 49286, 44558],\n        [27832, 46048, 45946, 1673, 4359, 27177, 30532, 34692, 37664, 575, 64048, 8693, 22285, 47720, 30280, 18238]\n    ],\n    [\n        [62946, 10532, 59014, 64805, 29093, 18714, 52030, 31477, 35583, 1654, 25065, 30274, 28129, 29444, 19832, 30893],\n        [47918, 2798, 26609, 65485, 14779, 31169, 33644, 54878, 23712, 22704, 46993, 30061, 22329, 53943, 58866, 25365],\n        [14952, 50926, 25368, 17360, 19694, 48514, 51094, 24335, 58104, 49187, 52004, 26987, 3434, 9804, 8610, 35674],\n        [25202, 64969, 59254, 44046, 50290, 30640, 29458, 4330, 33473, 9772, 41201, 31611, 4957, 4081, 363, 28521]\n    ],\n    [\n        [26166, 25898, 10813, 958, 682, 40147, 10180, 63492, 41340, 17255, 10051, 13287, 39425, 33675, 51963, 62028],\n        [37020, 8329, 23602, 36288, 64318, 8000, 42032, 34467, 64106, 64615, 51662, 24385, 59082, 65482, 5341, 2084],\n        [21758, 46437, 56793, 53921, 57818, 4238, 55954, 11224, 39741, 39811, 36622, 32938, 34423, 21170, 38870, 22471],\n        [13962, 19691, 28937, 32814, 26637, 41485, 8856, 51889, 53429, 4703, 24863, 19177, 26836, 18962, 22607, 57699]\n    ],\n    [\n        [58004, 40517, 16789, 1846, 12277, 46202, 44037, 26161, 54645, 26990, 27018, 40402, 44862, 18386, 40320, 13821],\n        [26410, 17856, 8502, 5918, 51253, 25471, 13296, 49815, 22338, 21421, 45596, 65106, 17398, 53681, 58080, 12165],\n        [19242, 57467, 51896, 34478, 47321, 3462, 17710, 7326, 48870, 43629, 13453, 56395, 62947, 39716, 63622, 26291],\n        [4132, 62504, 59278, 41089, 45562, 41911, 60969, 9674, 11895, 2243, 11371, 11873, 34168, 65494, 31045, 34252]\n    ],\n    [\n        [14124, 8233, 62943, 56334, 14952, 64378, 57028, 39801, 14781, 4148, 38043, 20259, 12494, 8224, 57333, 30979],\n        [16828, 31262, 64424, 23579, 28997, 28352, 48432, 27714, 39663, 15643, 31819, 12589, 61954, 47703, 5513, 9986],\n        [8560, 54346, 58290, 5309, 6589, 5744, 13794, 52452, 45292, 54240, 34104, 34994, 14219, 17692, 56590, 19174],\n        [50672, 14872, 41892, 25495, 9845, 55542, 42034, 25556, 58140, 11505, 63130, 34205, 63733, 21619, 62492, 9903]\n    ],\n    [\n        [31570, 258, 53512, 15910, 4008, 50304, 37096, 26898, 28221, 48966, 17440, 21095, 49899, 54075, 5840, 24068],\n        [57122, 8453, 60103, 45891, 21513, 7764, 59649, 62195, 25758, 40922, 48403, 36568, 25259, 26242, 27913, 2640],\n        [62700, 33490, 56552, 56273, 4289, 17864, 59499, 49696, 39505, 8106, 45373, 54771, 49510, 14031, 9188, 9963],\n        [33052, 4689, 47308, 59388, 33311, 20287, 30978, 28982, 35843, 34350, 30759, 21873, 37542, 11767, 26524, 37953]\n    ],\n    [\n        [12224, 55882, 32574, 59750, 3919, 10670, 43536, 45870, 24610, 31708, 33433, 22769, 39710, 6536, 35581, 43355],\n        [45562, 14524, 695, 17617, 46857, 10943, 59720, 34441, 196, 53254, 10062, 47414, 49014, 34831, 24117, 19875],\n        [49312, 47819, 31105, 17373, 2581, 33414, 53271, 55672, 16598, 5199, 36276, 32677, 10863, 58046, 41391, 36733],\n        [36136, 36555, 23101, 50789, 8991, 57289, 33961, 21609, 61214, 59849, 28735, 26314, 56273, 60989, 44232, 32828]\n    ],\n    [\n        [28296, 49649, 35502, 34552, 2738, 34066, 22139, 285, 1379, 23077, 33214, 11561, 44046, 62822, 43360, 27951],\n        [28462, 56184, 19681, 40644, 45657, 52845, 29431, 45540, 39879, 6989, 62215, 47576, 1305, 53032, 2004, 16831],\n        [53402, 43541, 45858, 46297, 28700, 57574, 17828, 17627, 21591, 52292, 61196, 34943, 46730, 32575, 57411, 53968],\n        [19826, 42857, 19771, 51042, 51514, 22325, 22829, 26154, 11971, 18441, 37740, 10845, 44637, 42924, 22020, 40165]\n    ],\n    [\n        [52826, 55889, 57721, 35870, 39097, 9729, 54922, 63693, 62117, 37180, 51838, 41441, 11609, 1266, 34720, 7512],\n        [20212, 25160, 24945, 23133, 1836, 15100, 14400, 19492, 39767, 57703, 40767, 7969, 24456, 16758, 59132, 11028],\n        [26830, 43971, 36733, 38743, 12097, 50754, 54360, 58122, 9548, 16144, 27961, 32761, 51778, 25185, 41349, 59381],\n        [65240, 62700, 11597, 41343, 16524, 52385, 59551, 51852, 60776, 57379, 2563, 44242, 21333, 53770, 44932, 14051]\n    ],\n    [\n        [30606, 50661, 57501, 45730, 60627, 14859, 33194, 25575, 1715, 13817, 46935, 26794, 8658, 42221, 58394, 15786],\n        [28430, 39613, 58414, 13019, 849, 42987, 23601, 65012, 59623, 32605, 23371, 22364, 23170, 31613, 50307, 43845],\n        [7390, 12173, 34773, 7137, 6779, 9563, 38347, 31226, 13808, 3092, 11884, 3394, 57973, 51748, 10168, 27938],\n        [30284, 42617, 34281, 58732, 31183, 41169, 64447, 60772, 16558, 3093, 30501, 38438, 47191, 25914, 48643, 10344]\n    ],\n    [\n        [3694, 21105, 54862, 15535, 21231, 37664, 37390, 6599, 14065, 6211, 42403, 60895, 34945, 36794, 55757, 30844],\n        [19450, 42927, 52973, 20886, 20982, 50357, 43034, 56842, 44893, 37912, 49190, 36225, 65018, 62579, 59473, 13273],\n        [14404, 27801, 3653, 37214, 54353, 4681, 44054, 8272, 52561, 31960, 59529, 4944, 25283, 21578, 46442, 50045],\n        [23606, 48587, 30341, 19352, 23275, 59325, 33687, 12312, 42733, 43134, 30726, 39124, 4956, 13789, 34131, 34997]\n    ],\n    [\n        [51818, 22790, 56899, 32398, 11641, 19477, 19713, 20500, 16752, 56663, 23272, 30831, 33033, 15483, 57970, 8244],\n        [30602, 38187, 9265, 48029, 19874, 46403, 9659, 54067, 39241, 54625, 25366, 40124, 34897, 17564, 40838, 31373],\n        [1692, 64368, 56470, 44796, 39767, 48971, 40605, 65090, 61004, 24425, 5085, 7284, 9164, 36612, 56519, 4297],\n        [57552, 46523, 33382, 29970, 4133, 1331, 63821, 41238, 2179, 39784, 52146, 20740, 19814, 21589, 17359, 52754]\n    ],\n    [\n        [63688, 52833, 5089, 63336, 29520, 19445, 31246, 28042, 34474, 26836, 27549, 14975, 44166, 52458, 18348, 40682],\n        [47646, 52145, 26151, 64273, 47245, 55801, 28232, 6410, 40451, 42510, 50481, 43155, 32788, 64766, 18277, 41246],\n        [25936, 32140, 11852, 48820, 52979, 34650, 47009, 26713, 22342, 9974, 44788, 53885, 59450, 16339, 34489, 46738],\n        [18526, 33800, 41482, 4059, 31452, 11108, 47102, 47432, 32807, 63219, 22291, 19793, 15677, 57511, 56828, 28384]\n    ],\n    [\n        [34138, 59436, 22761, 18110, 49055, 29402, 49467, 5365, 56527, 46261, 45729, 34764, 64786, 28115, 40311, 65448],\n        [16676, 29598, 23872, 1074, 41518, 2522, 22897, 12251, 1398, 52721, 9524, 48711, 57144, 16270, 41696, 53167],\n        [34672, 63353, 2903, 10043, 3922, 54815, 61800, 21401, 58488, 26660, 2396, 40386, 5264, 62169, 56099, 61783],\n        [5354, 6516, 41504, 18578, 6998, 24414, 16162, 43565, 18908, 12889, 48449, 46755, 8751, 53777, 22450, 58039]\n    ],\n    [\n        [47916, 24051, 16248, 12993, 43789, 20783, 3826, 15356, 31112, 22390, 64963, 53702, 52363, 6679, 41916, 51993],\n        [24222, 3347, 14741, 7543, 13786, 13766, 57436, 30508, 18198, 39719, 12679, 14071, 25229, 30708, 43619, 12516],\n        [8960, 50659, 27024, 8539, 39550, 52399, 56822, 16118, 20465, 21725, 7720, 4823, 14453, 33365, 31636, 40932],\n        [59664, 58322, 55311, 35687, 28183, 14557, 65411, 43884, 21315, 18123, 39703, 54483, 36196, 54990, 62497, 24266]\n    ],\n    [\n        [9142, 30626, 55672, 50700, 64141, 2224, 51274, 16001, 32497, 10775, 29448, 27601, 53143, 52484, 47571, 8464],\n        [65430, 7457, 9761, 38010, 37592, 16590, 65228, 27345, 30552, 16557, 35371, 3949, 12494, 38453, 34855, 5774],\n        [31492, 5594, 45669, 24440, 51005, 58976, 21604, 52744, 8011, 3752, 30510, 4417, 31398, 64794, 21626, 53409],\n        [26028, 55594, 40469, 3764, 26821, 39231, 40346, 9291, 35079, 23319, 39052, 15602, 54821, 19507, 4490, 53266]\n    ],\n    [\n        [46684, 41541, 36504, 45109, 48767, 19896, 13382, 61283, 26579, 48010, 52787, 27684, 47341, 21456, 54315, 18754],\n        [29126, 24245, 35, 30355, 16762, 56702, 46104, 3804, 34331, 32438, 40632, 38646, 2098, 48426, 62302, 24420],\n        [47036, 35427, 21019, 2633, 28534, 47541, 26180, 8630, 15560, 3513, 32595, 55744, 60808, 4603, 18372, 62881],\n        [12250, 30187, 33900, 59597, 40324, 55039, 10553, 59334, 14686, 8801, 54194, 44543, 41554, 62044, 51260, 56674]\n    ],\n    [\n        [7980, 21450, 31590, 43652, 49332, 7267, 62128, 5471, 48493, 21404, 48631, 3172, 62698, 21329, 49501, 48162],\n        [64626, 49900, 25528, 16202, 55793, 20912, 41658, 55044, 16953, 25619, 9245, 22737, 29771, 59316, 12595, 61468],\n        [37100, 7942, 62532, 47683, 60116, 46404, 14563, 55576, 11393, 29264, 54112, 27720, 45231, 32335, 26426, 30853],\n        [49278, 39972, 63694, 9017, 336, 54771, 12225, 5160, 44259, 26906, 2994, 14380, 54664, 42305, 56112, 57323]\n    ],\n    [\n        [19732, 43968, 11773, 16614, 26942, 39467, 4037, 56452, 1706, 15998, 18858, 3602, 17488, 46987, 23568, 59289],\n        [9688, 40207, 38489, 54664, 11641, 52622, 8851, 37609, 60441, 42406, 26775, 62321, 59361, 31872, 25276, 49286],\n        [4904, 35016, 60618, 4880, 8607, 36130, 26594, 55522, 47881, 6574, 47235, 28776, 53234, 26692, 19309, 38557],\n        [23134, 30227, 47707, 27581, 41164, 63092, 38317, 24649, 20411, 3610, 53609, 44299, 51328, 53424, 38680, 29934]\n    ],\n    [\n        [6734, 62048, 18642, 62779, 30875, 47899, 27267, 55868, 21094, 37009, 44643, 29925, 59132, 20990, 53150, 6653],\n        [25414, 42414, 62966, 63413, 49977, 21648, 39962, 41148, 1673, 5742, 48140, 53913, 55669, 29374, 25308, 53926],\n        [18852, 20175, 1393, 57028, 4446, 56884, 52132, 25965, 31527, 1535, 12470, 52596, 57253, 28751, 2044, 60487],\n        [62858, 53559, 51823, 21289, 31934, 6946, 31845, 31243, 45656, 35178, 39754, 65179, 32711, 323, 63921, 37024]\n    ],\n    [\n        [60398, 50846, 23071, 51378, 42182, 23297, 24521, 62087, 12258, 12398, 63052, 29530, 64392, 58877, 5833, 60377],\n        [7284, 22844, 34477, 16328, 51426, 26792, 25433, 42409, 6821, 56190, 22432, 10016, 3270, 8046, 61728, 53534],\n        [43250, 48005, 35412, 46230, 12541, 59140, 4508, 52222, 38936, 63008, 24055, 50052, 26622, 19013, 10088, 35295],\n        [33110, 58551, 44315, 45044, 14712, 43521, 19425, 49680, 4769, 62214, 14694, 3832, 13588, 36108, 41590, 17113]\n    ],\n    [\n        [18712, 22749, 24148, 31364, 21389, 29166, 48663, 10506, 23428, 30606, 53238, 57792, 5397, 38135, 64364, 55305],\n        [6808, 8231, 42969, 57325, 22653, 43376, 35938, 41394, 64025, 45177, 60224, 7260, 45800, 29325, 62117, 40385],\n        [21602, 39889, 493, 44017, 44912, 44790, 37852, 27921, 9633, 28357, 26457, 27386, 1760, 46507, 58880, 58088],\n        [15528, 10608, 42816, 36415, 63590, 45464, 19172, 50164, 50468, 3611, 51216, 9189, 18135, 64881, 37022, 20131]\n    ],\n    [\n        [2448, 48035, 43284, 38948, 8844, 26435, 18674, 64103, 36714, 31898, 49891, 25721, 38570, 14163, 36169, 43330],\n        [21432, 56184, 47599, 23225, 8244, 17102, 5487, 15099, 10424, 11639, 4164, 44390, 24867, 5607, 57862, 46000],\n        [1774, 14079, 62836, 19602, 47279, 64661, 28524, 32085, 34049, 55818, 29392, 36431, 28158, 59223, 65239, 36108],\n        [27122, 22942, 22764, 42061, 26987, 36608, 38769, 41569, 24512, 10976, 27077, 31855, 19517, 54143, 8157, 34327]\n    ],\n    [\n        [27086, 253, 63779, 61385, 30345, 22463, 3891, 57220, 21131, 4477, 3258, 2950, 40123, 44460, 36593, 25870],\n        [14828, 16885, 7017, 235, 31450, 39814, 44285, 61440, 29980, 2472, 36564, 31524, 26928, 45298, 23462, 13496],\n        [16550, 32448, 42508, 56737, 60876, 53240, 3017, 23003, 45454, 31362, 23352, 44868, 53513, 49748, 44671, 46694],\n        [5962, 37399, 6262, 55327, 2410, 36055, 49752, 17824, 58237, 10796, 25528, 2287, 49814, 53677, 4736, 39528]\n    ],\n    [\n        [36066, 60708, 62849, 19348, 46799, 43541, 39238, 33770, 30273, 8800, 43116, 19137, 25016, 14348, 54373, 349],\n        [48938, 46713, 44462, 63383, 53888, 5990, 14102, 45882, 57833, 60424, 12949, 35338, 50513, 64552, 52879, 49082],\n        [36574, 60016, 35385, 34298, 57885, 21424, 38374, 44996, 38060, 18472, 15006, 49363, 27312, 18940, 2957, 34150],\n        [26732, 30776, 25960, 54902, 2279, 46794, 35819, 2888, 55186, 55951, 4073, 56093, 33607, 24871, 52487, 21943]\n    ],\n    [\n        [63608, 46494, 8229, 6129, 51415, 56177, 47893, 64289, 6403, 26153, 18953, 30750, 42705, 44032, 9823, 19841],\n        [49326, 54968, 56632, 42658, 54340, 27730, 40611, 50444, 51869, 42092, 50847, 33925, 19598, 49991, 30286, 36712],\n        [6776, 8521, 32636, 11475, 28972, 51150, 51446, 29110, 16252, 32043, 20384, 45195, 7178, 41271, 62075, 39847],\n        [37164, 60155, 50110, 2095, 26565, 57147, 7586, 34641, 47503, 20233, 59423, 23998, 39769, 23258, 12539, 10725]\n    ],\n    [\n        [43374, 55203, 54943, 1259, 37107, 25069, 16050, 42060, 8735, 47332, 47549, 17854, 32384, 30554, 33842, 49213],\n        [56010, 13383, 17972, 29025, 31643, 25144, 65363, 5960, 32340, 21341, 51936, 31375, 52493, 34836, 36495, 56105],\n        [34152, 23982, 43269, 28909, 37165, 42590, 9301, 27012, 37876, 64218, 38738, 55616, 18413, 10211, 38862, 21390],\n        [20960, 22426, 30575, 59070, 49602, 40384, 40026, 8111, 39146, 6692, 28728, 17965, 42508, 2792, 25753, 50433]\n    ],\n    [\n        [5904, 31533, 33111, 59215, 11059, 54797, 40399, 18006, 37002, 25132, 50409, 42213, 7807, 24458, 10469, 39779],\n        [26694, 35345, 46578, 4642, 62430, 7153, 29307, 432, 36888, 21859, 53933, 48548, 41324, 19856, 49409, 17917],\n        [44178, 42311, 2229, 43962, 48, 29944, 10019, 23754, 37867, 41697, 10369, 10981, 55811, 35968, 49845, 22747],\n        [38250, 37572, 58178, 48958, 42584, 48597, 14313, 44643, 47756, 11908, 65196, 45819, 54556, 63781, 25954, 2180]\n    ],\n    [\n        [3100, 29290, 39149, 14629, 8516, 27502, 38967, 25791, 56055, 33218, 59531, 48306, 3395, 7898, 253, 55855],\n        [58420, 25836, 21042, 60796, 18681, 35120, 27299, 31386, 53591, 18496, 13628, 62217, 9269, 52592, 42953, 48087],\n        [23728, 55409, 53413, 49094, 37006, 28327, 57199, 48415, 6043, 22950, 58599, 34316, 55488, 55417, 12332, 42969],\n        [51962, 48768, 25849, 49878, 8075, 28534, 2321, 23278, 63453, 59539, 4481, 47893, 6158, 18361, 46226, 21341]\n    ],\n    [\n        [45354, 35248, 25748, 12567, 11291, 46238, 59498, 47236, 61033, 21354, 22405, 11186, 25223, 827, 46356, 5965],\n        [38728, 54732, 55387, 34570, 5524, 64802, 8703, 486, 41737, 27641, 62800, 47167, 59517, 6134, 34241, 63962],\n        [27284, 16599, 62568, 29991, 27506, 56034, 58713, 44106, 6610, 77, 1775, 8375, 36087, 22342, 16194, 42181],\n        [35118, 34833, 14035, 14503, 23851, 24580, 17949, 44617, 39515, 13863, 59670, 14579, 33770, 32632, 16532, 54525]\n    ],\n    [\n        [64090, 30917, 8796, 57776, 23888, 39845, 39367, 6820, 8116, 14523, 59380, 48853, 58013, 44818, 36182, 21965],\n        [49602, 37372, 19632, 38655, 49843, 37850, 30528, 17806, 24961, 30704, 6831, 26813, 31413, 51206, 35126, 27073],\n        [4106, 53382, 45001, 32960, 58283, 39728, 38954, 45429, 43096, 21093, 4509, 64886, 19595, 37946, 2866, 64030],\n        [58454, 40496, 20433, 40791, 7660, 2092, 29968, 29441, 2824, 43480, 26563, 39724, 49899, 57324, 28862, 37535]\n    ],\n    [\n        [37512, 25308, 7778, 4890, 21795, 23390, 5432, 5420, 14471, 57635, 40539, 38778, 50516, 26760, 39559, 42870],\n        [27384, 56941, 37400, 64546, 50534, 35021, 26188, 63590, 23837, 60192, 52163, 29077, 25581, 57650, 13576, 39037],\n        [36730, 63104, 49218, 29366, 55470, 29934, 2884, 55651, 38636, 31683, 48645, 62221, 37328, 29537, 22233, 24680],\n        [55812, 62936, 10653, 24774, 18892, 5121, 46352, 35686, 42308, 41059, 22463, 12413, 53461, 28506, 26072, 16869]\n    ],\n    [\n        [55328, 53972, 42001, 25233, 35021, 13615, 48520, 57851, 18829, 1784, 13663, 32126, 18647, 1849, 60116, 13381],\n        [46716, 50000, 16339, 51509, 50313, 44298, 57852, 4137, 46982, 48790, 28656, 30792, 34838, 24173, 46727, 11575],\n        [6686, 26544, 55042, 24821, 22193, 19930, 14566, 22009, 57959, 24160, 34552, 14073, 38794, 13557, 39627, 30074],\n        [22256, 38946, 11056, 59129, 44776, 46213, 37460, 8130, 6741, 56345, 27065, 8434, 48206, 40872, 22294, 35238]\n    ],\n    [\n        [2282, 15706, 2144, 62484, 40911, 27399, 7390, 2042, 42315, 33314, 16065, 32345, 8623, 32012, 45114, 3248],\n        [24216, 20638, 7023, 27508, 14472, 56264, 153, 11046, 4778, 13394, 27624, 36531, 25542, 711, 38442, 63993],\n        [62924, 45992, 20733, 60487, 55467, 34446, 4921, 30722, 9356, 57912, 54598, 31840, 10052, 40423, 18191, 12837],\n        [64896, 34171, 61244, 58467, 62581, 49823, 35642, 15691, 58475, 40500, 49633, 42022, 27794, 38969, 40965, 24978]\n    ],\n    [\n        [36510, 46339, 20116, 32355, 49210, 5859, 18411, 30245, 41487, 22831, 24018, 27931, 46448, 35136, 41407, 8611],\n        [43886, 19638, 37762, 2749, 36246, 51739, 36153, 33795, 61723, 26196, 63085, 61875, 8283, 15340, 54744, 38370],\n        [7144, 27054, 41038, 2643, 22841, 15745, 13223, 7437, 25312, 47126, 38503, 44305, 429, 11809, 13244, 21018],\n        [37818, 4454, 58896, 27786, 61478, 30482, 45787, 2704, 55284, 49743, 12160, 26055, 39984, 42506, 37587, 23618]\n    ],\n    [\n        [64200, 52580, 11186, 48073, 19086, 63201, 22356, 42628, 53254, 20116, 24946, 784, 4567, 29189, 29554, 24648],\n        [2092, 8335, 24758, 37665, 55226, 30852, 32475, 14865, 37413, 32731, 59625, 48570, 55798, 47732, 55402, 4418],\n        [43522, 29696, 34638, 52358, 62563, 20111, 33704, 58565, 1694, 5136, 57685, 55852, 8766, 50400, 35166, 30365],\n        [31146, 58636, 25252, 4280, 33055, 28666, 28941, 18235, 43637, 46240, 45407, 53490, 60005, 63050, 5891, 43835]\n    ],\n    [\n        [30762, 28992, 52675, 46372, 34738, 47972, 56427, 20293, 18781, 20313, 36598, 8854, 2626, 28022, 6936, 44600],\n        [25104, 44396, 18098, 3009, 36468, 15106, 40718, 39934, 52555, 7181, 50234, 18797, 10576, 59257, 47993, 29819],\n        [26350, 31315, 32566, 65366, 22183, 22382, 38117, 38983, 13193, 17647, 56796, 63946, 57009, 61349, 30201, 19841],\n        [50970, 4156, 12750, 34384, 7675, 47370, 30223, 41578, 27025, 65497, 1455, 46103, 2049, 56475, 50469, 2906]\n    ],\n    [\n        [43060, 32709, 53101, 6964, 30857, 23792, 57941, 48946, 25029, 53081, 46238, 26753, 11783, 11909, 7840, 59375],\n        [27484, 18078, 24029, 64649, 63746, 19658, 21168, 40858, 48334, 21417, 17399, 58204, 63776, 14546, 21772, 34087],\n        [18016, 21918, 65019, 23275, 18780, 43885, 17151, 15134, 22662, 23002, 38936, 26829, 32871, 17489, 2527, 14162],\n        [4138, 1959, 30753, 55845, 43233, 62344, 23775, 46056, 19209, 4957, 5048, 40499, 5552, 24994, 44795, 3280]\n    ],\n    [\n        [43568, 5471, 8674, 18491, 12627, 30513, 7905, 28005, 30063, 40624, 21116, 48306, 65017, 11514, 11774, 39974],\n        [18576, 60592, 43835, 60383, 63143, 15683, 38823, 10963, 47020, 7486, 62465, 55707, 30657, 40902, 32978, 49425],\n        [17886, 21511, 31089, 65312, 30413, 8438, 30468, 3890, 7763, 37874, 21733, 34636, 50960, 11534, 5225, 28868],\n        [41408, 54645, 43614, 42681, 13843, 4917, 24290, 52374, 44549, 54168, 7033, 58796, 37508, 19442, 61642, 57965]\n    ],\n    [\n        [6798, 64766, 18702, 16154, 12407, 461, 59388, 7454, 33612, 44772, 8234, 2738, 1325, 59746, 7662, 65224],\n        [22564, 40364, 8964, 55523, 29387, 6863, 31003, 56395, 31207, 58498, 41206, 46944, 54184, 65529, 55166, 30605],\n        [64424, 28219, 6904, 44697, 61515, 61183, 15737, 55570, 1371, 47531, 1450, 20968, 7931, 53927, 27716, 1872],\n        [29468, 51313, 76, 50258, 45513, 58017, 11418, 31852, 24822, 23038, 19114, 19648, 22624, 13128, 22894, 43338]\n    ],\n    [\n        [28478, 29212, 3973, 28859, 46152, 61781, 33697, 4434, 43741, 22586, 61143, 43504, 6484, 26043, 45294, 4726],\n        [17704, 54852, 25464, 2554, 54239, 49230, 64679, 18410, 31314, 36285, 60029, 57086, 55861, 21931, 56873, 54981],\n        [12862, 11015, 2127, 14597, 40505, 34582, 40433, 24051, 7599, 191, 32867, 16455, 14017, 33676, 19619, 4381],\n        [60034, 15401, 28215, 63191, 63813, 59110, 6396, 54373, 8863, 45240, 43799, 53828, 52556, 9675, 27590, 40428]\n    ],\n    [\n        [16144, 14320, 8540, 7849, 64478, 37195, 47487, 6649, 9266, 22807, 35736, 43125, 44820, 58895, 14000, 1544],\n        [35358, 27789, 57109, 61257, 35331, 4523, 4720, 54355, 37551, 10973, 38383, 60866, 56919, 2688, 57557, 20762],\n        [31878, 3061, 4371, 43159, 31777, 22536, 12260, 58493, 36334, 32533, 48185, 20691, 51514, 53572, 52044, 23655],\n        [37124, 51367, 47333, 51278, 16610, 5696, 3745, 62339, 52348, 54255, 54647, 47870, 5294, 1571, 10317, 50824]\n    ],\n    [\n        [44970, 64883, 33689, 43229, 54103, 45474, 17152, 7495, 34024, 60571, 51489, 13472, 55018, 38870, 43779, 25454],\n        [4396, 32920, 57452, 23243, 32753, 28431, 46445, 44237, 35425, 25606, 51550, 23304, 40584, 59798, 16464, 15880],\n        [14498, 17990, 57098, 40107, 17095, 53635, 10968, 39255, 19644, 17139, 2487, 11575, 47294, 31785, 7792, 37453],\n        [18748, 1990, 48808, 5854, 4325, 36341, 31196, 6404, 55796, 61259, 29464, 58318, 54884, 64097, 45814, 399]\n    ],\n    [\n        [25394, 8284, 21160, 16935, 50966, 56162, 2968, 54386, 59660, 23149, 35789, 2032, 21953, 16600, 23567, 9470],\n        [7256, 50671, 46901, 23968, 41594, 45058, 54531, 15531, 27530, 51200, 37360, 1550, 20919, 10470, 47779, 28054],\n        [7954, 46166, 30190, 14435, 18934, 19509, 9810, 60512, 876, 1503, 58910, 52627, 27441, 53314, 24748, 45066],\n        [18416, 21262, 19236, 58731, 14006, 56913, 37756, 19675, 13359, 43018, 1903, 10695, 33614, 9501, 26681, 27998]\n    ],\n    [\n        [37874, 58444, 40219, 43165, 54789, 46722, 43428, 7725, 64270, 23197, 55452, 48615, 7884, 2958, 28706, 14493],\n        [27288, 1742, 12925, 38066, 44999, 65106, 59061, 17224, 27918, 36216, 24909, 5378, 8293, 15094, 58431, 51581],\n        [35610, 45615, 40717, 7868, 9492, 47349, 42955, 23210, 21980, 12015, 28745, 15161, 25249, 5462, 49977, 50798],\n        [2746, 3602, 35069, 25010, 16128, 8739, 7114, 31286, 42715, 7245, 23268, 23466, 65067, 6133, 47593, 14358]\n    ],\n    [\n        [18208, 10711, 63402, 63669, 45491, 54095, 41755, 51413, 28040, 40764, 65219, 26193, 1345, 526, 1647, 26755],\n        [62724, 30472, 32942, 34550, 39915, 1181, 17393, 7364, 3388, 13296, 23671, 18891, 28429, 23997, 13377, 62813],\n        [24530, 2446, 24983, 28526, 33626, 32961, 21976, 17233, 62775, 47458, 14224, 5624, 39189, 57135, 1777, 40019],\n        [48524, 49912, 37905, 1747, 20443, 45521, 19785, 32490, 58262, 41762, 21053, 60682, 41804, 8572, 48183, 21894]\n    ],\n    [\n        [14466, 50830, 51906, 24225, 59, 27596, 189, 36944, 28217, 1729, 33776, 43285, 42905, 12627, 38531, 16784],\n        [35126, 21474, 17342, 3907, 13798, 19980, 40340, 61808, 58021, 20486, 13173, 31102, 47922, 45685, 31352, 65206],\n        [6166, 2960, 18994, 62342, 22521, 45140, 36448, 34600, 14060, 324, 61656, 13971, 44263, 58786, 35495, 44079],\n        [22204, 45665, 59821, 53073, 32567, 22359, 37211, 51386, 19597, 23121, 26525, 2987, 55503, 33492, 57836, 34165]\n    ],\n    [\n        [258, 58997, 41950, 48243, 39415, 19146, 41752, 57789, 9424, 2771, 46771, 17440, 2107, 32377, 13758, 57948],\n        [27910, 13595, 5387, 6651, 797, 45623, 13223, 63997, 14916, 17480, 826, 34030, 8456, 32406, 17524, 52837],\n        [15322, 46390, 58670, 22627, 15535, 46417, 24232, 6550, 53567, 49141, 23889, 5890, 1341, 45755, 9082, 6563],\n        [31738, 29277, 42965, 22364, 31073, 8945, 54841, 60003, 44255, 43431, 14215, 56407, 53279, 54778, 8761, 9559]\n    ],\n    [\n        [55604, 56326, 22837, 58843, 12039, 33816, 57712, 30043, 3403, 64416, 10070, 6955, 29941, 11092, 7960, 2116],\n        [33032, 16968, 18592, 29037, 61554, 55424, 45376, 1232, 11115, 57975, 45979, 44799, 42013, 60330, 27091, 9596],\n        [62646, 58249, 6130, 35188, 15487, 45810, 10030, 31090, 56973, 18880, 53624, 61062, 50336, 40286, 2737, 13037],\n        [28220, 41312, 21367, 63085, 52624, 16309, 56710, 4988, 49342, 18496, 62307, 8777, 19551, 25323, 46543, 33363]\n    ],\n    [\n        [29020, 58654, 51041, 27289, 33153, 58304, 47954, 27669, 5129, 53020, 63652, 18741, 57491, 11116, 20826, 65264],\n        [10144, 51190, 48821, 3589, 11915, 25717, 39904, 5234, 52537, 19363, 1073, 62181, 15541, 7126, 14116, 7564],\n        [40328, 15815, 5903, 36588, 2883, 12010, 12853, 5742, 13530, 10405, 62635, 54377, 62339, 63487, 8177, 45511],\n        [37934, 26516, 9777, 17071, 2588, 27614, 13209, 30191, 21645, 45696, 34844, 49197, 51646, 47826, 15336, 47746]\n    ],\n    [\n        [33508, 24431, 12041, 54085, 9644, 63924, 42824, 50183, 28252, 39639, 64472, 31586, 57363, 10341, 9309, 21523],\n        [22574, 28356, 33553, 16649, 1239, 14207, 243, 43475, 54032, 14127, 6460, 51472, 20596, 40886, 54600, 58406],\n        [46086, 59115, 1240, 41098, 32139, 31432, 39423, 28444, 22225, 35270, 4521, 23522, 33516, 13277, 39252, 41418],\n        [58868, 43483, 6286, 33900, 8031, 28145, 5804, 29067, 20678, 33736, 5763, 34765, 34643, 27300, 65525, 35332]\n    ],\n    [\n        [29556, 27101, 17118, 23390, 35656, 42596, 54813, 50142, 52179, 19775, 53534, 13206, 1057, 60890, 26963, 49651],\n        [20044, 60702, 35460, 56788, 5041, 42960, 33150, 19694, 65161, 62772, 62963, 84, 46522, 16333, 4750, 21209],\n        [49032, 17585, 1739, 51347, 59069, 14235, 58566, 13081, 32674, 11172, 44637, 43838, 60235, 12468, 59, 2974],\n        [44324, 16222, 15361, 24753, 51472, 14634, 46701, 19450, 40144, 2954, 23407, 18994, 4057, 19852, 54789, 54153]\n    ],\n    [\n        [59620, 40753, 4591, 10575, 45328, 33990, 26964, 33653, 30542, 19087, 63623, 20488, 36231, 45996, 65069, 25488],\n        [36306, 41635, 29084, 38240, 41200, 15163, 21950, 2343, 14508, 50242, 43569, 14233, 15899, 28865, 54316, 39173],\n        [6460, 62549, 3307, 4822, 10206, 2984, 35197, 42560, 25927, 62321, 10473, 48231, 14560, 62853, 2901, 63867],\n        [29968, 24797, 8099, 15112, 5469, 37555, 13980, 54021, 36131, 11250, 28121, 36457, 24941, 20022, 22250, 50198]\n    ],\n    [\n        [33076, 31560, 16896, 19047, 19942, 41891, 33993, 52422, 8795, 56108, 42657, 5816, 47464, 4531, 40975, 17834],\n        [2278, 31992, 62273, 35366, 11547, 19434, 43078, 57995, 60273, 44847, 60566, 8131, 551, 31954, 34138, 57049],\n        [45336, 60473, 57463, 39333, 64248, 63336, 21436, 34129, 56943, 26607, 47751, 15027, 32351, 17460, 19996, 25825],\n        [60984, 7106, 19521, 6308, 56234, 45399, 48653, 60087, 20850, 5980, 2999, 64672, 31977, 51449, 29783, 7378]\n    ],\n    [\n        [52522, 43456, 51276, 55958, 57726, 7754, 15042, 35232, 18067, 49923, 25855, 52633, 13536, 1542, 4457, 50757],\n        [62616, 19760, 20086, 38919, 7876, 8829, 62017, 38410, 2113, 41412, 11633, 2999, 41713, 44346, 35492, 13230],\n        [21234, 43974, 39319, 36866, 65080, 56500, 58562, 64487, 58776, 45753, 56767, 53868, 1663, 4049, 50698, 14835],\n        [59260, 44458, 54636, 7127, 51748, 27569, 21428, 23885, 44163, 63148, 30683, 6595, 3526, 56325, 47094, 49256]\n    ],\n    [\n        [11716, 52915, 58015, 61712, 54725, 895, 41272, 55669, 15188, 40768, 14805, 54274, 18366, 15854, 42316, 5942],\n        [49836, 22069, 31464, 34892, 38143, 45507, 40510, 37826, 60223, 48118, 51788, 1782, 34179, 36109, 62134, 58649],\n        [340, 47679, 63903, 52799, 36285, 2088, 26090, 58004, 65394, 57448, 18272, 9018, 5544, 38765, 9766, 25625],\n        [23384, 25764, 11003, 51123, 53694, 57483, 32951, 53955, 41455, 36028, 35289, 32764, 41452, 19541, 25549, 14821]\n    ],\n    [\n        [65146, 54482, 45118, 18654, 62216, 59809, 50859, 39114, 55688, 45650, 57721, 33926, 26967, 56143, 14020, 48476],\n        [18708, 49384, 26524, 11582, 2291, 61084, 43457, 30742, 36182, 44613, 34139, 51872, 25787, 48049, 44755, 7074],\n        [14716, 26982, 12091, 16963, 16908, 16045, 3627, 36325, 12203, 61317, 5507, 60071, 11871, 54226, 61160, 2342],\n        [34720, 13475, 7744, 20679, 29738, 58755, 36911, 24127, 26536, 1860, 28303, 61933, 4754, 2233, 50239, 16306]\n    ],\n    [\n        [7934, 45193, 34397, 44497, 27010, 17826, 8562, 65063, 56929, 58756, 51621, 52827, 11807, 61869, 63685, 15662],\n        [35106, 16094, 25330, 846, 9972, 25551, 59420, 46049, 33348, 22353, 14751, 32068, 13143, 16817, 20591, 5284],\n        [4668, 37773, 21507, 1069, 11142, 24480, 14740, 1589, 23165, 29215, 1599, 37035, 44048, 41665, 10548, 59331],\n        [5102, 51529, 33983, 60100, 56204, 5502, 25345, 50450, 54937, 35757, 21833, 40642, 16889, 62647, 30476, 50940]\n    ],\n    [\n        [53784, 14499, 59636, 33626, 9594, 57997, 48758, 18960, 27475, 8054, 64316, 60625, 22127, 45340, 33570, 3119],\n        [47150, 17835, 30984, 489, 64265, 58386, 11378, 60221, 25794, 64226, 4253, 2905, 62667, 20100, 23331, 49150],\n        [62944, 17493, 36373, 37031, 51532, 61503, 55288, 28987, 29327, 55191, 53121, 58201, 38689, 9061, 40950, 26361],\n        [29034, 32802, 23065, 43347, 8201, 40391, 22748, 9302, 55690, 5749, 32959, 4007, 21388, 22929, 26660, 19898]\n    ],\n    [\n        [24000, 43959, 57014, 42706, 41970, 2419, 29316, 62187, 53832, 49076, 56035, 55876, 59791, 60027, 21406, 41888],\n        [43678, 47169, 47087, 45679, 13926, 4977, 6006, 2173, 15970, 8343, 26862, 21736, 55748, 5155, 2045, 7757],\n        [19040, 58610, 38376, 40160, 36020, 53115, 9127, 43604, 21845, 31532, 53168, 39732, 48452, 63235, 4853, 48392],\n        [46024, 12712, 60963, 40633, 12370, 61368, 4040, 3216, 13736, 22391, 35413, 32056, 52583, 14923, 14392, 1705]\n    ],\n    [\n        [63396, 18900, 16511, 59627, 8440, 4260, 2421, 32751, 43267, 43607, 58346, 51057, 51041, 37764, 26901, 28247],\n        [3204, 33585, 60981, 43529, 62847, 43649, 26442, 39443, 42985, 6789, 31430, 23793, 5464, 36996, 58312, 36412],\n        [42324, 50103, 6926, 48002, 35098, 48077, 5010, 55966, 39252, 13011, 417, 64885, 52551, 2502, 16924, 63618],\n        [59914, 21113, 22590, 29726, 35034, 56143, 12611, 19202, 6315, 18483, 37701, 37224, 27560, 28991, 62928, 9909]\n    ],\n    [\n        [15998, 16124, 25490, 14517, 15727, 656, 37817, 56520, 37590, 5684, 18757, 57185, 14747, 2951, 42382, 21414],\n        [18860, 1930, 54888, 55136, 29513, 50491, 47851, 50157, 44509, 62289, 1698, 33104, 64702, 43618, 51068, 25333],\n        [59510, 55091, 27100, 52674, 2455, 42050, 62322, 45358, 8298, 50345, 38710, 23964, 38860, 35977, 13111, 54713],\n        [60476, 53891, 13159, 13992, 50018, 21002, 27995, 65406, 4847, 25018, 36281, 62979, 15856, 49360, 53079, 28134]\n    ],\n    [\n        [18166, 21657, 10999, 25946, 14657, 3419, 64367, 7028, 34398, 23331, 13227, 62236, 33078, 51494, 40035, 56400],\n        [52704, 60856, 22554, 55325, 49745, 30500, 9316, 57986, 53267, 16873, 29430, 65021, 20485, 47046, 27772, 64921],\n        [61132, 38671, 24882, 18537, 38104, 16779, 36257, 31022, 3063, 29997, 5046, 59497, 59595, 7137, 44455, 60266],\n        [27598, 7961, 58441, 33427, 23913, 55799, 8089, 46569, 58864, 35614, 6205, 65096, 56347, 26729, 9225, 13596]\n    ],\n    [\n        [23524, 60741, 62478, 54438, 47257, 33339, 38525, 4938, 34179, 9267, 29302, 44989, 53728, 51524, 45015, 39106],\n        [24966, 10401, 54672, 3400, 46629, 30803, 18523, 60675, 53335, 16516, 6803, 28397, 7730, 44155, 32296, 44073],\n        [24264, 16703, 37335, 39539, 61414, 17092, 3873, 28223, 6157, 45985, 40821, 19001, 42880, 58347, 35734, 13213],\n        [2154, 42743, 43080, 25781, 14533, 28621, 14676, 55397, 13601, 57399, 26340, 50667, 53533, 2921, 12268, 55337]\n    ],\n    [\n        [57718, 18080, 1655, 36971, 41505, 389, 2692, 33297, 36190, 18046, 7076, 25858, 10421, 25136, 58703, 49780],\n        [64464, 48352, 29170, 15636, 62221, 29165, 56192, 11746, 13481, 6905, 23081, 26690, 54821, 11186, 12347, 3512],\n        [6296, 37214, 13480, 34582, 5685, 23131, 3615, 32690, 42398, 47285, 4127, 29109, 28313, 40118, 34931, 43212],\n        [11078, 22915, 8424, 59905, 57572, 22926, 36885, 60635, 21174, 17264, 44748, 27490, 61324, 32211, 13973, 3578]\n    ],\n    [\n        [7084, 40086, 33661, 22503, 34560, 45108, 36920, 56575, 6136, 16285, 21179, 59914, 42265, 43315, 32912, 39779],\n        [49498, 531, 15692, 14450, 39423, 30095, 29309, 45415, 7160, 39390, 37266, 45542, 35969, 2671, 61233, 39732],\n        [9360, 41146, 60862, 29067, 46364, 63714, 6268, 23333, 1844, 26729, 8946, 34802, 12872, 10835, 51133, 45379],\n        [57272, 45099, 36030, 44086, 48271, 2583, 51740, 49485, 38145, 48804, 16405, 30707, 64256, 40208, 34617, 57373]\n    ],\n    [\n        [11178, 28751, 5245, 54253, 55080, 63732, 6365, 23143, 43154, 55188, 29724, 49849, 53757, 34947, 14875, 37765],\n        [33974, 50185, 41562, 34816, 62274, 34663, 37471, 55002, 47364, 24633, 51581, 30299, 46500, 51323, 34072, 63868],\n        [18788, 5386, 60719, 9503, 35265, 5614, 42267, 19240, 6483, 45548, 40548, 40180, 5611, 53507, 21186, 59960],\n        [13100, 19759, 3061, 32337, 25051, 30401, 54611, 48227, 8881, 7774, 30408, 34404, 47165, 53177, 13251, 18880]\n    ],\n    [\n        [1528, 59980, 52853, 9030, 60240, 35625, 20310, 7707, 6988, 54611, 12911, 46863, 60548, 59474, 55831, 59759],\n        [48436, 39962, 16076, 36757, 38332, 34299, 24602, 53732, 16610, 4957, 35825, 36530, 63078, 45995, 44051, 28733],\n        [724, 34535, 8055, 56884, 45105, 11489, 39770, 4710, 53273, 49650, 15073, 47114, 28792, 56354, 46237, 39162],\n        [16760, 55830, 14036, 4076, 60283, 28002, 41680, 11688, 62867, 49766, 65432, 34616, 21, 50092, 65414, 58945]\n    ],\n    [\n        [48018, 59627, 254, 29147, 49546, 2131, 52050, 16410, 56371, 4402, 3644, 43603, 63160, 19056, 56041, 3593],\n        [22266, 35168, 34316, 25739, 20270, 25887, 12069, 1345, 29888, 8431, 29349, 43684, 45385, 25033, 12309, 42308],\n        [53342, 57434, 57018, 3555, 12322, 6099, 47783, 24557, 15373, 20198, 42950, 31602, 15113, 18475, 37167, 41447],\n        [57650, 34911, 7742, 38896, 31509, 62196, 57302, 10799, 3088, 21210, 65295, 47398, 52825, 22343, 30290, 26104]\n    ],\n    [\n        [21592, 38568, 46563, 17462, 46819, 5562, 46828, 5852, 65279, 20524, 4593, 55063, 20694, 40039, 5349, 47296],\n        [65360, 54676, 9140, 20171, 13078, 12773, 32892, 39918, 6388, 34772, 50799, 25970, 35004, 52341, 25794, 57010],\n        [41594, 52264, 21853, 7337, 51532, 37863, 31963, 61387, 14840, 32961, 7169, 19502, 11211, 42907, 9233, 24292],\n        [6578, 28922, 30310, 35753, 60718, 49497, 61432, 7734, 20634, 3560, 4864, 11603, 24935, 50321, 25574, 50636]\n    ],\n    [\n        [15720, 44403, 3265, 38485, 11889, 53804, 59875, 5781, 42840, 6165, 11773, 31262, 62773, 1927, 65518, 24009],\n        [6010, 46751, 10957, 17978, 39623, 48442, 1168, 55058, 32381, 37886, 41121, 43369, 50605, 11866, 5344, 19674],\n        [26388, 45588, 61938, 64945, 59424, 34659, 10188, 5835, 848, 24075, 42199, 34041, 7042, 55638, 65200, 61506],\n        [25850, 27259, 31336, 42307, 14948, 57424, 37869, 32739, 40250, 59184, 4923, 1363, 48957, 36802, 18749, 23126]\n    ],\n    [\n        [53780, 54042, 19560, 40953, 50385, 62890, 50925, 25606, 34293, 46715, 32644, 43187, 42741, 41762, 20118, 57307],\n        [28672, 3042, 28829, 31022, 49129, 7849, 14904, 12317, 48181, 17318, 21038, 27015, 29019, 43695, 32194, 22414],\n        [42554, 5754, 64954, 7208, 16521, 50999, 62189, 46848, 62731, 30575, 30698, 56079, 21322, 33045, 11373, 19092],\n        [42512, 38037, 48588, 11992, 57347, 32092, 37685, 55558, 62808, 50829, 46212, 12352, 61337, 10924, 38700, 29327]\n    ],\n    [\n        [12476, 1965, 29733, 18352, 49998, 52184, 9206, 27308, 40928, 61196, 13719, 45320, 5733, 65060, 54990, 5239],\n        [38970, 58637, 54376, 26698, 55889, 38388, 31689, 5606, 11497, 59906, 60189, 58355, 39618, 28698, 33531, 41665],\n        [4242, 55548, 45720, 11042, 39244, 20709, 11726, 41470, 6885, 24040, 3468, 6104, 26040, 20433, 29189, 26265],\n        [49060, 3729, 59796, 44683, 41293, 4401, 39936, 11720, 35642, 52934, 51919, 13664, 57656, 35091, 22454, 37242]\n    ],\n    [\n        [63452, 33166, 24133, 29694, 45386, 23387, 60681, 63573, 5556, 14399, 2657, 14965, 64296, 25670, 45806, 55132],\n        [38106, 52616, 46743, 53336, 60078, 41213, 37949, 58739, 32959, 2241, 24620, 50480, 63565, 5589, 50531, 43798],\n        [41648, 22120, 60641, 62464, 46752, 8562, 26925, 65397, 11562, 9619, 60733, 59896, 30729, 55029, 28844, 21243],\n        [65468, 43060, 34098, 17842, 24688, 44627, 23358, 42299, 25888, 24429, 26619, 11772, 22730, 3722, 19564, 2348]\n    ],\n    [\n        [33512, 21825, 53322, 31517, 9208, 35355, 58578, 52230, 34135, 63302, 60636, 53513, 5964, 30702, 40864, 28508],\n        [32466, 23655, 30812, 8122, 60917, 1367, 61501, 26901, 57646, 19478, 10636, 65302, 57993, 47811, 19321, 6116],\n        [40238, 57772, 58936, 60023, 25334, 18200, 62589, 44927, 2280, 35314, 55187, 39144, 8747, 44961, 17653, 8800],\n        [37056, 65038, 62204, 30537, 33597, 10460, 60103, 63612, 6515, 37120, 44166, 61476, 31603, 26265, 15054, 48527]\n    ],\n    [\n        [1088, 54544, 56557, 23279, 16185, 61157, 50268, 46383, 10916, 1328, 47089, 30503, 12323, 62278, 32177, 49128],\n        [47270, 12213, 10663, 32626, 2124, 49708, 30625, 26893, 48169, 25085, 1549, 57143, 602, 32758, 19022, 38380],\n        [35150, 56273, 15907, 33, 22827, 5079, 27755, 59199, 54114, 53567, 35176, 22191, 61587, 46140, 17237, 45831],\n        [31796, 33966, 29489, 58335, 25859, 39401, 43292, 12966, 9344, 36517, 32876, 22760, 63171, 27767, 49183, 19500]\n    ],\n    [\n        [18054, 64849, 17756, 16560, 3864, 28672, 32349, 52887, 51421, 53805, 23643, 21914, 6793, 53112, 13850, 48954],\n        [33792, 56727, 28008, 10537, 33952, 41536, 34365, 15025, 42972, 32360, 35556, 53578, 31767, 31063, 41793, 35599],\n        [64450, 10318, 30978, 55755, 2601, 2886, 15367, 33573, 25415, 14186, 61515, 11898, 26735, 45042, 40095, 52724],\n        [5346, 52186, 62519, 56132, 1459, 2101, 14241, 59498, 49511, 19186, 49768, 31282, 60195, 43951, 60797, 30615]\n    ],\n    [\n        [23670, 43485, 48667, 48429, 55122, 48501, 28855, 51528, 65077, 36629, 6336, 33170, 4984, 12554, 25328, 57792],\n        [1440, 8204, 63561, 1995, 49426, 13103, 1527, 39497, 32317, 60771, 19202, 56351, 10063, 24852, 54164, 53626],\n        [23634, 41125, 48899, 20072, 40497, 30984, 53011, 43604, 21603, 11158, 15519, 59355, 54938, 15242, 815, 26272],\n        [19520, 9636, 49003, 48180, 39408, 10247, 33806, 29352, 47246, 49216, 44859, 42789, 3470, 49590, 237, 22319]\n    ],\n    [\n        [30724, 59586, 1443, 14688, 25158, 1917, 43706, 17923, 941, 44695, 13374, 62652, 20058, 39708, 34523, 46825],\n        [34636, 8436, 39992, 40188, 2842, 26042, 11289, 57701, 54345, 64999, 895, 38253, 20997, 65145, 54292, 29825],\n        [41772, 26667, 2853, 5124, 12311, 2080, 46818, 45650, 16602, 583, 38564, 4819, 58430, 53168, 26465, 35258],\n        [61758, 22774, 42095, 20942, 45225, 51213, 53267, 12165, 43366, 19036, 50518, 50003, 61649, 3574, 47023, 40608]\n    ],\n    [\n        [8868, 37340, 35434, 716, 42439, 6229, 64168, 15459, 28970, 35116, 8447, 11342, 3869, 39411, 12924, 25345],\n        [48094, 42010, 44197, 43893, 36892, 9373, 42988, 27725, 26360, 49521, 48760, 27300, 40505, 3560, 2440, 61448],\n        [10652, 232, 51830, 41937, 42060, 33793, 56644, 18724, 7064, 53551, 21639, 44407, 56024, 63757, 18345, 10113],\n        [8260, 65366, 55412, 47495, 7753, 37801, 10922, 18928, 21946, 47134, 54012, 13430, 51735, 3174, 14836, 31273]\n    ],\n    [\n        [59928, 52107, 63435, 21353, 29385, 6019, 55099, 20264, 1738, 18395, 60694, 2592, 22575, 55844, 18274, 17532],\n        [63030, 11254, 36223, 47780, 13907, 44620, 55520, 40566, 58850, 54981, 54895, 31836, 41076, 50050, 19537, 16823],\n        [30926, 51500, 34456, 41885, 23044, 41845, 13499, 42077, 9155, 57436, 29377, 64559, 50771, 63402, 39238, 9367],\n        [22020, 2005, 61837, 55405, 45997, 63907, 27382, 44061, 43547, 5106, 5810, 40822, 17388, 55620, 7470, 27184]\n    ],\n    [\n        [15780, 51342, 1488, 11353, 1151, 53842, 33740, 16185, 5901, 22803, 20121, 31707, 28316, 2886, 20336, 3168],\n        [40678, 20923, 63403, 51497, 59976, 64963, 7858, 45213, 36082, 36958, 44290, 50950, 34849, 34266, 55367, 19673],\n        [23228, 18535, 14055, 60536, 21795, 48880, 19235, 39974, 65342, 56260, 16914, 35810, 62010, 5380, 3212, 59096],\n        [43206, 57096, 50265, 42422, 2180, 11056, 20118, 61151, 41235, 26767, 60889, 52527, 37796, 20343, 2458, 28334]\n    ],\n    [\n        [19734, 62895, 25765, 32941, 47626, 5370, 8663, 22038, 62417, 582, 59063, 37072, 7227, 60022, 8259, 41266],\n        [30242, 5810, 45499, 54166, 34851, 29960, 52260, 25450, 15492, 9299, 53615, 2445, 63909, 20254, 5899, 18000],\n        [42506, 54831, 56859, 50318, 63747, 36753, 9405, 44222, 46919, 22064, 60828, 41208, 14066, 49499, 64194, 28646],\n        [23436, 24251, 60126, 4110, 54625, 36910, 28259, 60686, 29291, 10740, 31135, 65118, 6324, 7893, 24802, 47862]\n    ],\n    [\n        [25096, 56882, 44343, 43315, 13408, 24652, 56475, 20039, 18317, 10679, 44036, 49056, 14599, 29561, 15279, 31632],\n        [18720, 63743, 11028, 11980, 41068, 18707, 49841, 51088, 44345, 58769, 33826, 24451, 34918, 45481, 35591, 62065],\n        [25876, 57752, 5683, 59521, 55570, 47531, 61332, 38036, 62341, 60108, 53728, 37101, 30122, 25188, 21045, 30619],\n        [21090, 63406, 4308, 15414, 22893, 28706, 50242, 27201, 9696, 52722, 22612, 61697, 56706, 15496, 29000, 14069]\n    ],\n    [\n        [3634, 58981, 59896, 55648, 54404, 15256, 62474, 2228, 9282, 31437, 4555, 40668, 62219, 17430, 51184, 47065],\n        [40390, 9858, 30082, 25619, 65069, 61863, 56150, 37241, 34414, 34219, 57243, 20399, 28448, 13796, 62518, 20847],\n        [6188, 29029, 56203, 14601, 12391, 50232, 63431, 27052, 56336, 18686, 33657, 5562, 11947, 19086, 63963, 30695],\n        [34378, 23159, 37802, 18322, 19976, 4306, 62051, 9661, 38588, 21054, 28543, 16247, 50904, 65191, 56645, 39592]\n    ],\n    [\n        [47966, 56820, 17431, 34967, 62001, 49655, 11210, 47492, 23625, 36136, 45906, 19711, 55278, 54158, 17878, 37902],\n        [8216, 44392, 19550, 10893, 48233, 26904, 49618, 34828, 356, 52035, 1452, 23704, 25167, 59099, 58175, 59044],\n        [39778, 11273, 11044, 8510, 42771, 31878, 56793, 24495, 9725, 6874, 1080, 47740, 46778, 50227, 51940, 49644],\n        [6224, 59338, 34413, 36095, 18776, 44834, 53863, 45258, 22767, 59095, 53062, 47216, 49373, 60907, 40754, 8632]\n    ],\n    [\n        [42954, 11388, 11265, 19212, 63679, 47399, 47571, 59538, 48583, 32919, 28899, 1474, 31951, 58989, 63500, 2838],\n        [18384, 8856, 40842, 45793, 21251, 35815, 23634, 59286, 63652, 7726, 51665, 10174, 48429, 8278, 64465, 26728],\n        [19066, 48640, 26011, 24738, 52301, 13696, 41759, 6837, 21879, 34231, 39485, 31674, 31448, 61701, 10578, 38555],\n        [62142, 47828, 54636, 38777, 1831, 50778, 7081, 10064, 33936, 24408, 18988, 49961, 3753, 58884, 59043, 40960]\n    ],\n    [\n        [33868, 23270, 35833, 49065, 36587, 31334, 46259, 46552, 1021, 9664, 11253, 39168, 12430, 3459, 27698, 8047],\n        [53226, 34055, 14770, 56733, 26889, 63141, 46848, 49556, 58649, 62309, 44387, 51524, 51642, 17348, 60080, 20225],\n        [42758, 55544, 12014, 59708, 59527, 42139, 48740, 27817, 24426, 40067, 55537, 52030, 25533, 29300, 61120, 33346],\n        [5678, 25175, 33190, 41380, 64589, 28549, 33918, 40135, 11412, 48073, 61127, 22811, 63914, 52591, 47915, 48312]\n    ],\n    [\n        [20968, 35720, 24409, 25270, 19689, 48285, 63063, 51852, 1330, 60265, 41721, 64521, 50278, 26501, 12423, 31454],\n        [40218, 22495, 733, 45693, 18356, 21607, 16520, 30506, 26756, 22627, 14396, 43260, 26745, 18929, 4195, 11038],\n        [38654, 45215, 45539, 31802, 3423, 49579, 39417, 61329, 58599, 55996, 2787, 33120, 49337, 21400, 18034, 55311],\n        [27556, 17333, 1355, 23169, 29438, 53190, 33856, 14455, 21851, 18124, 58647, 26839, 51289, 47064, 27095, 36732]\n    ],\n    [\n        [56552, 9189, 10692, 7261, 41892, 8464, 46388, 58720, 28663, 5676, 12171, 337, 39492, 6282, 60629, 20497],\n        [26864, 37762, 16160, 34456, 54171, 42427, 41734, 33081, 55948, 17188, 28028, 31938, 20052, 35017, 55283, 51604],\n        [62230, 29695, 29857, 26110, 31320, 33672, 24356, 5930, 15944, 59516, 53984, 53832, 25519, 10686, 52240, 11373],\n        [57874, 33846, 25246, 34993, 59905, 23269, 59344, 63742, 13038, 48419, 56568, 11922, 48945, 12889, 27109, 5022]\n    ],\n    [\n        [6474, 46651, 45462, 51457, 63598, 33199, 9990, 52850, 36057, 18030, 50968, 9382, 4990, 7402, 1851, 48196],\n        [1374, 3858, 50115, 26516, 50991, 9437, 2747, 2901, 54465, 50470, 63492, 985, 4898, 57821, 41465, 13950],\n        [13128, 63638, 11540, 18378, 16017, 56219, 36115, 23810, 9784, 30230, 13331, 21391, 23966, 34321, 6505, 14639],\n        [44016, 5865, 39609, 4418, 25694, 23014, 64549, 6595, 32856, 35260, 24984, 8150, 54376, 35816, 47642, 63074]\n    ],\n    [\n        [61678, 18382, 42077, 41267, 3111, 64367, 23020, 41323, 11645, 7152, 7719, 8779, 45940, 7911, 9259, 26313],\n        [13260, 502, 8297, 64968, 44662, 4695, 36783, 14065, 22950, 46843, 8742, 6108, 25152, 57989, 19778, 15771],\n        [14694, 47244, 32296, 22760, 38694, 46268, 48414, 60239, 45863, 64145, 20346, 55775, 28845, 44738, 64831, 7728],\n        [51600, 11530, 23026, 6806, 4106, 11534, 24033, 35670, 4476, 4284, 6103, 59828, 42442, 50617, 30881, 47747]\n    ],\n    [\n        [47154, 39939, 27466, 50179, 8374, 20387, 52857, 17013, 21181, 11774, 1908, 12501, 34075, 29593, 40572, 35082],\n        [15358, 44207, 1652, 4913, 43093, 25395, 64110, 17067, 22690, 29960, 13669, 28569, 14391, 29706, 28169, 33015],\n        [15056, 46882, 7194, 28060, 4309, 97, 51871, 48959, 35535, 33916, 9722, 37398, 64556, 52111, 46294, 58212],\n        [20114, 44441, 12913, 8186, 32255, 30297, 41403, 39258, 51147, 82, 47457, 13240, 56939, 50662, 28878, 28313]\n    ],\n    [\n        [35898, 39296, 44847, 56292, 18895, 15789, 56918, 43254, 61136, 11624, 31428, 7281, 5220, 60956, 39239, 19429],\n        [17322, 61931, 57342, 49679, 41102, 15133, 45637, 20007, 13538, 1076, 35633, 25573, 29125, 5392, 33542, 55529],\n        [8446, 19412, 7579, 50696, 40580, 9971, 26534, 59090, 39476, 9634, 40442, 31854, 22792, 42808, 50405, 27515],\n        [44060, 15804, 5519, 19820, 55402, 4893, 56218, 61381, 54118, 3121, 1587, 32022, 24440, 47646, 58763, 34331]\n    ],\n    [\n        [22028, 1626, 60582, 25756, 25355, 874, 5593, 29282, 40893, 55466, 42526, 13886, 53613, 24043, 7242, 10262],\n        [11360, 34283, 17921, 52337, 52498, 5998, 30848, 21259, 46218, 35684, 36410, 63268, 33899, 31555, 27372, 38613],\n        [36442, 11579, 17398, 44104, 62127, 10985, 47521, 25707, 61833, 55333, 62779, 7308, 41157, 60408, 24274, 38167],\n        [12206, 64305, 37416, 55641, 12284, 22819, 20930, 55929, 22561, 30212, 62229, 63170, 51638, 22781, 37567, 15285]\n    ],\n    [\n        [46460, 25857, 13185, 28702, 51940, 48648, 7301, 9201, 21132, 60111, 28139, 12462, 59386, 35316, 18769, 29800],\n        [46428, 5370, 11049, 12364, 51847, 30473, 38554, 5482, 44880, 40181, 50245, 63670, 24367, 53215, 49239, 21961],\n        [26708, 34433, 47122, 36992, 29383, 5637, 33737, 3480, 36224, 40329, 35661, 2882, 20808, 4715, 58741, 5163],\n        [62644, 15581, 19966, 1807, 37065, 39845, 1797, 48856, 57669, 6065, 40786, 63838, 44552, 64877, 17555, 2435]\n    ],\n    [\n        [56456, 23312, 36501, 12090, 32239, 59944, 9581, 24639, 11194, 2540, 19837, 20975, 46351, 49387, 2960, 61773],\n        [20304, 10430, 45149, 58057, 6477, 56351, 56920, 34807, 36838, 48195, 43840, 27093, 41311, 42988, 54630, 30102],\n        [41598, 58649, 41655, 51042, 7401, 57242, 48764, 62059, 63687, 20248, 63843, 9441, 48370, 26700, 35869, 8504],\n        [25508, 11170, 61637, 59840, 55400, 32560, 60256, 32720, 24991, 31670, 37553, 51262, 23355, 36742, 24844, 28517]\n    ],\n    [\n        [13808, 27731, 26722, 63174, 55857, 20072, 3797, 8605, 34293, 47951, 35735, 58999, 39256, 14738, 58515, 24369],\n        [6316, 23875, 62367, 2755, 4907, 37156, 53596, 28427, 62143, 36307, 53076, 8191, 45398, 41896, 39951, 15629],\n        [21864, 14704, 17879, 58675, 44418, 32167, 20725, 7509, 49831, 57114, 1038, 53682, 53615, 42314, 36091, 26953],\n        [56892, 52855, 30548, 63434, 52281, 12848, 33490, 30822, 51965, 13041, 36596, 28713, 41357, 30081, 22835, 26377]\n    ],\n    [\n        [1044, 15501, 25824, 25488, 65468, 2854, 53545, 58940, 32914, 42526, 22854, 12042, 43445, 37741, 45137, 61225],\n        [60292, 44939, 10115, 50269, 6933, 17820, 48791, 64522, 9627, 7731, 56795, 24797, 49371, 45808, 19364, 54774],\n        [16334, 20112, 64457, 48752, 47536, 59009, 52283, 43726, 64757, 32247, 19881, 31069, 38256, 23951, 8755, 17783],\n        [22100, 35074, 34471, 34895, 38256, 28824, 38996, 11376, 35815, 42336, 58261, 20900, 47850, 50149, 10362, 50076]\n    ],\n    [\n        [24398, 63210, 8414, 41923, 27357, 23170, 4729, 4750, 7961, 11493, 47773, 2249, 62180, 19635, 50887, 43255],\n        [8466, 59952, 10198, 61934, 37628, 53515, 60951, 15031, 7198, 48598, 37775, 6654, 24580, 40572, 16293, 8302],\n        [40776, 41387, 2178, 2982, 47806, 51221, 2275, 4792, 663, 12255, 3666, 9541, 64075, 30149, 28258, 40514],\n        [45764, 35166, 40780, 42861, 27015, 24816, 9563, 61841, 53837, 51829, 46922, 6224, 50324, 47290, 40157, 4711]\n    ],\n    [\n        [16738, 35917, 35207, 29370, 20136, 36028, 31240, 19959, 40782, 20986, 17360, 18352, 14396, 23495, 49012, 24012],\n        [30546, 25869, 64394, 40155, 28991, 11569, 39374, 27901, 7247, 61812, 19477, 44567, 63964, 59552, 62492, 40209],\n        [55694, 32670, 39859, 63388, 53915, 54220, 13451, 32474, 25587, 52764, 6908, 2534, 12790, 17148, 31650, 17595],\n        [22372, 21709, 3758, 34956, 37372, 62274, 14404, 52893, 51678, 25448, 25223, 22261, 3721, 30584, 56591, 43702]\n    ],\n    [\n        [31148, 60333, 14987, 11573, 27260, 23990, 1475, 31134, 34203, 30272, 11554, 49221, 42855, 54881, 44698, 58413],\n        [28246, 964, 6047, 12698, 25033, 27267, 29930, 44173, 19867, 52939, 15085, 9463, 34025, 35444, 53306, 47484],\n        [5440, 52969, 64307, 60021, 18478, 65119, 3266, 55292, 8349, 42907, 19295, 45396, 65285, 49608, 39531, 33091],\n        [30138, 12964, 1474, 7269, 24874, 1366, 56067, 10338, 59344, 29463, 30001, 21020, 40988, 59459, 42905, 8999]\n    ],\n    [\n        [27076, 25314, 63396, 11178, 44602, 46470, 11289, 38142, 46968, 50834, 16066, 34221, 46905, 23484, 36380, 49605],\n        [9406, 59724, 53419, 38323, 9597, 36813, 40123, 63967, 4620, 9000, 13895, 7842, 39500, 48068, 41809, 45677],\n        [61856, 49458, 12794, 37057, 46222, 53046, 58488, 12261, 56023, 28596, 57286, 23152, 29072, 4716, 65270, 6883],\n        [33630, 45725, 41487, 19547, 34010, 16706, 35655, 32574, 50540, 1140, 11338, 8042, 41435, 14709, 10767, 13631]\n    ],\n    [\n        [48502, 25763, 19398, 13964, 60891, 17975, 18948, 18697, 20034, 20208, 37071, 47782, 47402, 14951, 29079, 8213],\n        [49138, 20475, 65004, 42740, 30738, 12961, 6997, 17470, 46840, 57833, 1292, 11176, 4717, 10074, 42579, 62852],\n        [38462, 16709, 49791, 8260, 36034, 48549, 49538, 24167, 21785, 24933, 63867, 2153, 64251, 40365, 22224, 57486],\n        [21186, 24643, 2707, 53088, 37793, 3628, 4492, 25159, 10917, 36, 59915, 28583, 13254, 5235, 28162, 8998]\n    ],\n    [\n        [17930, 8448, 36743, 11453, 54873, 33026, 20737, 54296, 52915, 62433, 29342, 11492, 7920, 46531, 25079, 36590],\n        [54820, 36997, 12624, 3165, 27664, 33497, 48770, 6013, 41605, 40020, 58005, 30274, 60965, 64317, 16387, 52912],\n        [3652, 1837, 39851, 62391, 36515, 49987, 9962, 29960, 12716, 46222, 22265, 61566, 27688, 39830, 22809, 14537],\n        [29540, 31551, 1560, 37722, 29449, 36143, 39844, 63671, 4578, 56370, 50143, 58140, 2626, 56529, 42211, 55707]\n    ],\n    [\n        [3434, 42771, 27967, 8958, 27831, 24223, 41026, 60994, 11962, 29323, 6190, 6374, 25677, 36869, 10598, 5501],\n        [36788, 22822, 9933, 51045, 35602, 56422, 57063, 6264, 38530, 35007, 24584, 817, 64373, 48118, 2474, 26516],\n        [12890, 54513, 46942, 8305, 64524, 34740, 53919, 34293, 61690, 51126, 40789, 7683, 12673, 63936, 46032, 3456],\n        [19968, 16081, 51517, 5807, 44519, 16826, 56869, 64467, 24756, 48456, 44291, 32409, 3913, 64091, 40031, 13]\n    ],\n    [\n        [41404, 323, 15245, 42453, 6581, 18468, 280, 13346, 39808, 13753, 63142, 11440, 42299, 30909, 53531, 37873],\n        [56166, 38337, 1372, 8300, 15086, 61510, 27690, 14218, 21460, 38690, 43955, 49375, 12904, 33566, 22199, 40075],\n        [38038, 26965, 57661, 23677, 37805, 16978, 49656, 22639, 6418, 25295, 60027, 554, 10054, 63939, 38287, 5897],\n        [40136, 64458, 14706, 37580, 2043, 16272, 1299, 36944, 7816, 19122, 5762, 15035, 59306, 38778, 64375, 33112]\n    ],\n    [\n        [61596, 15848, 11534, 5516, 37985, 43227, 41419, 54025, 8574, 50183, 64455, 9673, 4121, 29259, 54761, 51294],\n        [2658, 57653, 11617, 223, 4480, 11344, 53692, 933, 454, 49032, 32016, 47451, 39537, 52966, 54203, 64051],\n        [40860, 43532, 35403, 17354, 38961, 61779, 21412, 52964, 13035, 35051, 34225, 8836, 54693, 62730, 52639, 14307],\n        [43540, 44369, 41553, 16521, 50039, 54908, 41149, 28431, 27985, 51804, 25238, 9114, 63059, 48516, 55417, 51477]\n    ],\n    [\n        [56894, 16662, 13421, 25984, 55168, 48336, 44665, 44154, 43419, 11546, 47332, 36850, 33707, 62544, 24573, 8615],\n        [5916, 44633, 35737, 31051, 35259, 58908, 44934, 58973, 49054, 36056, 17741, 47838, 62947, 7103, 55792, 59883],\n        [21192, 26431, 43734, 27865, 30759, 21379, 55683, 15513, 6541, 40460, 29261, 54038, 3298, 36233, 16840, 43983],\n        [16328, 13085, 31914, 63087, 8772, 24703, 40979, 2756, 28072, 18476, 2073, 38590, 7953, 47044, 25188, 64618]\n    ],\n    [\n        [56274, 31143, 2499, 33053, 60660, 41459, 27980, 26642, 2555, 32629, 53841, 59581, 56247, 46795, 22770, 39640],\n        [50036, 6691, 22181, 35932, 64591, 16056, 5112, 62076, 51830, 46657, 1834, 38910, 2994, 35091, 58855, 26821],\n        [28250, 55827, 45877, 39505, 57187, 38672, 22386, 61523, 60607, 57454, 24594, 37576, 40828, 22507, 35685, 39875],\n        [33420, 22993, 25957, 18896, 43026, 56353, 51937, 25526, 34286, 28653, 58828, 46662, 40936, 59113, 31190, 56141]\n    ],\n    [\n        [33466, 17038, 25253, 4960, 59207, 893, 30526, 9623, 1896, 22106, 15870, 15796, 37423, 2795, 26377, 44087],\n        [19692, 25888, 9691, 26446, 26122, 40082, 43296, 18408, 57919, 3795, 48370, 16470, 18598, 33476, 41195, 44608],\n        [2134, 53073, 41254, 15976, 41524, 57138, 54177, 20457, 13471, 30754, 61122, 53222, 38813, 35982, 45787, 9801],\n        [54248, 48369, 17860, 12376, 59453, 24978, 44523, 46765, 53259, 49621, 46262, 7716, 22476, 63522, 103, 21547]\n    ],\n    [\n        [28308, 48376, 29188, 48493, 9267, 10235, 62528, 60153, 17811, 34706, 4359, 61420, 56678, 52823, 46549, 44941],\n        [28852, 22153, 21400, 17976, 17749, 48397, 23001, 40534, 33521, 41073, 13568, 29050, 4642, 28205, 25944, 40187],\n        [3084, 14459, 57881, 57016, 1249, 34707, 35810, 29479, 64051, 33321, 31065, 50302, 43231, 315, 47859, 48797],\n        [61084, 22627, 54243, 53574, 1180, 54435, 25674, 36303, 7328, 61717, 8683, 29440, 44535, 36685, 15320, 59077]\n    ],\n    [\n        [21226, 12932, 50717, 12493, 50989, 55174, 35856, 63086, 56761, 367, 28716, 34835, 53193, 27074, 51380, 49123],\n        [56764, 26010, 14835, 13004, 1848, 37780, 1316, 9698, 34695, 35434, 39922, 27578, 62993, 2014, 40964, 27197],\n        [48204, 6672, 16481, 47147, 12064, 38292, 25064, 41433, 33793, 50166, 36270, 17221, 28649, 37739, 14559, 64620],\n        [3540, 50005, 25631, 51346, 58775, 47294, 952, 45829, 43165, 3702, 13881, 10750, 44796, 8380, 2477, 28534]\n    ],\n    [\n        [59298, 31499, 52530, 12472, 52471, 51206, 58257, 11481, 46668, 11221, 36118, 17537, 38992, 29545, 36460, 58371],\n        [19052, 32927, 4750, 43382, 28343, 38698, 9832, 12386, 44883, 5906, 15218, 18661, 34792, 39704, 19469, 11452],\n        [38730, 42545, 39825, 65352, 16865, 53854, 53995, 16764, 8805, 29304, 51570, 6897, 58996, 51211, 12245, 51798],\n        [104, 47455, 32271, 7352, 14832, 3161, 30223, 6605, 41793, 63085, 20674, 19051, 4384, 43743, 12281, 20538]\n    ],\n    [\n        [42568, 27495, 62013, 7162, 21295, 15572, 57349, 63344, 8820, 2590, 27746, 24055, 17718, 25406, 14201, 25187],\n        [12534, 10088, 18358, 14825, 44792, 9432, 27067, 51579, 40705, 13330, 52365, 22233, 5019, 50316, 46442, 27463],\n        [65434, 36897, 28567, 7351, 18194, 50198, 44657, 18686, 46617, 9131, 8268, 54918, 22028, 7643, 48610, 4344],\n        [25100, 28588, 60102, 12703, 61685, 4092, 23110, 36715, 15570, 21602, 40290, 29750, 54909, 10113, 56111, 31527]\n    ],\n    [\n        [13740, 11140, 60885, 60318, 21228, 57490, 27125, 54645, 838, 41804, 54194, 3231, 58782, 15199, 64771, 10630],\n        [25290, 56447, 29111, 32153, 57199, 45013, 32361, 10495, 12459, 42357, 744, 19473, 22193, 28591, 55558, 54043],\n        [45726, 59914, 44081, 38800, 2424, 16935, 46870, 1392, 20646, 47505, 54312, 34608, 21487, 10627, 51609, 3811],\n        [7546, 15763, 37305, 48252, 63634, 42438, 11977, 1925, 23356, 54780, 55426, 26280, 23959, 25961, 9964, 41596]\n    ],\n    [\n        [32440, 55186, 54566, 46148, 20959, 42574, 55641, 41013, 12835, 41224, 58677, 63989, 30501, 49037, 50123, 5679],\n        [5076, 8631, 53008, 15066, 41458, 64784, 51120, 40478, 25104, 35613, 36244, 52668, 16763, 20767, 47843, 47754],\n        [19816, 10945, 48335, 62705, 25451, 64074, 56219, 54445, 47934, 19121, 38743, 13095, 1475, 28219, 48078, 9597],\n        [15420, 60103, 50502, 63353, 24214, 1428, 21738, 41761, 13327, 9352, 28440, 13915, 14602, 26897, 60315, 56941]\n    ],\n    [\n        [47702, 28152, 8881, 918, 5579, 31646, 54124, 31825, 49065, 34624, 55486, 4526, 38437, 39197, 42534, 36763],\n        [8742, 9227, 35669, 1913, 52884, 55925, 46376, 32341, 43636, 49529, 7696, 47039, 32156, 10134, 52657, 63958],\n        [48964, 35296, 55365, 61407, 60000, 59102, 35426, 12334, 16545, 16918, 47475, 39774, 44627, 59436, 587, 13804],\n        [6242, 23081, 23000, 44179, 25811, 24507, 52998, 61042, 47775, 51177, 13095, 6424, 61784, 17403, 39805, 17383]\n    ],\n    [\n        [62106, 3354, 53216, 59058, 33910, 39309, 26649, 2243, 51913, 52188, 57352, 60783, 65378, 45794, 49200, 10501],\n        [53654, 13876, 57531, 31442, 975, 7279, 12706, 340, 7375, 56785, 47990, 47171, 1210, 25402, 23400, 21514],\n        [27466, 35879, 23902, 11366, 36577, 49047, 56047, 9162, 52578, 54343, 40314, 11641, 50105, 15403, 44358, 30600],\n        [23906, 41807, 59663, 12747, 20650, 50692, 41968, 45342, 50047, 35913, 18043, 63456, 14026, 18055, 41893, 16573]\n    ],\n    [\n        [52320, 30547, 32023, 63396, 8896, 50601, 41345, 21203, 16831, 31564, 18247, 20802, 28577, 19338, 25973, 43712],\n        [34792, 54400, 46535, 22280, 46971, 13232, 20060, 63266, 22922, 40337, 773, 4221, 6988, 48646, 41628, 19629],\n        [34754, 58224, 7035, 61478, 58333, 364, 41645, 23182, 11915, 63323, 25280, 29868, 23536, 25809, 25138, 20510],\n        [16058, 5232, 34524, 44708, 61964, 4255, 33299, 56751, 40050, 15415, 52195, 60087, 8092, 50286, 8023, 46549]\n    ],\n    [\n        [16674, 10798, 38597, 23217, 26042, 3753, 37685, 14165, 31557, 62711, 28132, 29406, 53281, 42994, 6112, 44760],\n        [1576, 11537, 43584, 61166, 29490, 5564, 27806, 14553, 53551, 57324, 13491, 32751, 55401, 12343, 35914, 31110],\n        [44872, 45977, 65511, 28645, 48308, 9366, 28462, 8019, 4037, 50914, 269, 54454, 40488, 14144, 46783, 6894],\n        [41518, 48760, 22162, 20278, 4103, 43229, 22896, 6094, 335, 23927, 57331, 26279, 55901, 21507, 784, 20692]\n    ],\n    [\n        [35846, 6472, 32074, 14288, 9907, 27356, 64398, 7285, 27897, 29374, 65162, 33824, 33556, 23871, 37134, 14871],\n        [57176, 60516, 37418, 38622, 10281, 65339, 10891, 10875, 19699, 1583, 12050, 25670, 60354, 65095, 2289, 7905],\n        [21352, 35870, 7267, 60492, 28060, 26343, 25854, 61381, 28010, 60382, 39737, 37291, 29692, 57658, 45298, 4381],\n        [40446, 11713, 33204, 21664, 14993, 38322, 63798, 34230, 37350, 18263, 60718, 64940, 27307, 2374, 40423, 29152]\n    ],\n    [\n        [10332, 51284, 47788, 19749, 36370, 52840, 28637, 56565, 27065, 1559, 40358, 53390, 52989, 17946, 24576, 40667],\n        [48280, 40227, 40763, 1112, 48054, 3105, 47979, 23883, 1089, 12248, 1034, 6095, 22546, 58759, 23368, 21162],\n        [56588, 54061, 10405, 12814, 1897, 7822, 51818, 16102, 46108, 31032, 60413, 42446, 57432, 28835, 53690, 64180],\n        [38962, 22723, 43341, 27313, 55916, 545, 26985, 47278, 58157, 57097, 2801, 38826, 13966, 5429, 47823, 16155]\n    ],\n    [\n        [39904, 19074, 35626, 31546, 8933, 14489, 41732, 44275, 5472, 36266, 36999, 52472, 24085, 62587, 8275, 33923],\n        [19562, 19896, 9296, 45233, 53831, 58080, 55549, 56169, 60055, 28400, 55004, 38575, 12618, 22748, 58591, 50722],\n        [22044, 32292, 17866, 53138, 9421, 28058, 55827, 51370, 14358, 26942, 9801, 55931, 35753, 16980, 34077, 30184],\n        [12314, 43677, 30891, 10813, 19891, 48124, 48114, 53478, 35699, 46633, 47938, 53928, 49070, 3752, 35730, 36894]\n    ],\n    [\n        [13662, 64011, 27686, 24593, 48425, 44434, 5342, 18703, 48252, 63919, 50545, 36786, 35788, 38841, 8886, 64254],\n        [9138, 54995, 36899, 18396, 29574, 53801, 34204, 53240, 6600, 58115, 10240, 52101, 62854, 21187, 44696, 45231],\n        [61458, 41070, 2083, 8459, 40083, 39832, 12497, 39757, 1841, 37354, 50219, 31390, 37962, 61270, 47609, 55299],\n        [29170, 44183, 65071, 16655, 51874, 15828, 815, 63323, 10931, 57714, 30494, 10193, 52559, 30537, 52143, 54945]\n    ],\n    [\n        [9090, 50597, 20568, 39296, 64122, 46672, 5954, 61135, 26322, 63492, 47990, 44894, 52942, 35849, 31448, 10614],\n        [57430, 7357, 11556, 43801, 23030, 45369, 59079, 15842, 43136, 19284, 27083, 25675, 37758, 63011, 42002, 29495],\n        [60524, 38516, 38235, 44930, 60205, 14375, 7392, 29381, 37289, 40744, 17742, 57470, 653, 41715, 56040, 6601],\n        [60084, 47175, 56137, 37933, 43909, 11756, 34124, 30452, 5500, 65006, 4740, 14442, 29396, 33702, 57398, 42326]\n    ],\n    [\n        [46086, 10995, 31134, 36096, 14078, 26084, 47954, 15061, 44966, 7782, 3575, 28767, 28150, 4491, 23872, 1640],\n        [42170, 25476, 25797, 30880, 53111, 27678, 210, 48941, 53472, 28698, 12102, 7579, 20733, 16189, 13082, 35378],\n        [3788, 54924, 59802, 44242, 15700, 50526, 12573, 8360, 6266, 24882, 62348, 18278, 30172, 56326, 51838, 60286],\n        [61516, 18952, 12333, 14778, 8528, 17183, 27035, 25874, 35233, 4476, 16845, 38286, 41681, 50160, 40674, 9794]\n    ],\n    [\n        [6624, 19018, 32975, 47568, 62744, 53099, 37461, 16662, 56450, 31614, 58696, 49943, 57121, 59758, 7347, 12993],\n        [28198, 7564, 48708, 36580, 14637, 62859, 49560, 47236, 21442, 38607, 2665, 37969, 19285, 62929, 25994, 17895],\n        [56398, 14652, 4270, 24517, 56118, 4682, 61190, 50582, 56091, 27814, 14125, 51288, 39173, 35806, 31058, 30153],\n        [61580, 30280, 22495, 8817, 46420, 49971, 20351, 48068, 32999, 11746, 50694, 64117, 45153, 4001, 18707, 13538]\n    ],\n    [\n        [31714, 43203, 5130, 61518, 56135, 12647, 12086, 9185, 57271, 32211, 61288, 47194, 38991, 24851, 10541, 40965],\n        [50506, 40940, 46362, 44926, 33346, 54044, 52445, 1943, 22636, 60339, 47147, 33222, 56416, 30804, 44419, 65054],\n        [60928, 530, 38168, 11933, 7563, 59478, 26615, 434, 13864, 2827, 53685, 7937, 11919, 11589, 59074, 62735],\n        [4264, 49410, 9939, 7890, 39821, 55247, 41515, 35356, 12206, 61864, 5739, 54500, 27198, 51748, 4640, 7494]\n    ],\n    [\n        [43092, 60037, 28106, 52133, 62297, 54813, 49519, 29590, 56935, 14646, 13049, 19073, 18160, 29100, 14864, 26330],\n        [51174, 665, 51548, 1014, 23879, 43045, 453, 33411, 55762, 33942, 58549, 48520, 59599, 41546, 11008, 58762],\n        [9468, 34991, 55135, 7385, 62760, 10034, 22203, 61977, 28, 43969, 5212, 33556, 20290, 10726, 15785, 60630],\n        [5596, 21999, 61979, 52988, 13241, 42817, 56894, 37264, 15114, 61614, 41388, 44003, 45208, 26084, 49356, 39804]\n    ],\n];","import { memcmp, memmove, memset } from \"./internal/memory\";\n\n@builtin export declare const HEAP_BASE: usize; // tslint:disable-line\n\n/* tslint:disable */\n\nexport namespace memory {\n\n  @builtin export declare function size(): i32;\n\n  @builtin export declare function grow(pages: i32): i32;\n\n  @inline export function fill(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n    if (isDefined(__memory_fill)) { __memory_fill(dest, c, n); return; }\n    memset(dest, c, n);\n  }\n\n  @inline export function copy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n    if (isDefined(__memory_copy)) { __memory_copy(dest, src, n); return; }\n    memmove(dest, src, n);\n  }\n\n  @inline export function compare(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n    if (isDefined(__memory_compare)) return __memory_compare(vl, vr, n);\n    return memcmp(vl, vr, n);\n  }\n\n  // Passive segments\n\n  // export function init(segmentIndex: u32, srcOffset: usize, dstOffset: usize, n: usize): void {\n  //   __memory_init(segmentIndex, srcOffset, dstOffset);\n  // }\n\n  // export function drop(segmentIndex: u32): void {\n  //   __memory_drop(segmentIndex);\n  // }\n\n  // Allocator\n\n  @inline export function allocate(size: usize): usize {\n    if (isDefined(__memory_allocate)) return __memory_allocate(size);\n    WARNING(\"Calling 'memory.allocate' requires a memory manager to be present.\");\n    return <usize>unreachable();\n  }\n\n  @inline export function free(ptr: usize): void {\n    if (isDefined(__memory_free)) { __memory_free(ptr); return; }\n    WARNING(\"Calling 'memory.free' requires a memory manager to be present.\");\n    unreachable();\n  }\n\n  @inline export function reset(): void {\n    if (isDefined(__memory_reset)) { __memory_reset(); return; }\n    unreachable();\n  }\n}\n","// this function will go away once `memory.copy` becomes an intrinsic\nexport function memcpy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memcpy.c\n  var w: u32, x: u32;\n\n  // copy 1 byte each until src is aligned to 4 bytes\n  while (n && (src & 3)) {\n    store<u8>(dest++, load<u8>(src++));\n    n--;\n  }\n\n  // if dst is aligned to 4 bytes as well, copy 4 bytes each\n  if ((dest & 3) == 0) {\n    while (n >= 16) {\n      store<u32>(dest     , load<u32>(src     ));\n      store<u32>(dest +  4, load<u32>(src +  4));\n      store<u32>(dest +  8, load<u32>(src +  8));\n      store<u32>(dest + 12, load<u32>(src + 12));\n      src += 16; dest += 16; n -= 16;\n    }\n    if (n & 8) {\n      store<u32>(dest    , load<u32>(src    ));\n      store<u32>(dest + 4, load<u32>(src + 4));\n      dest += 8; src += 8;\n    }\n    if (n & 4) {\n      store<u32>(dest, load<u32>(src));\n      dest += 4; src += 4;\n    }\n    if (n & 2) { // drop to 2 bytes each\n      store<u16>(dest, load<u16>(src));\n      dest += 2; src += 2;\n    }\n    if (n & 1) { // drop to 1 byte\n      store<u8>(dest++, load<u8>(src++));\n    }\n    return;\n  }\n\n  // if dst is not aligned to 4 bytes, use alternating shifts to copy 4 bytes each\n  // doing shifts if faster when copying enough bytes (here: 32 or more)\n  if (n >= 32) {\n    switch (dest & 3) {\n      // known to be != 0\n      case 1: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 3;\n        while (n >= 17) {\n          x = load<u32>(src + 1);\n          store<u32>(dest, w >> 24 | x << 8);\n          w = load<u32>(src + 5);\n          store<u32>(dest + 4, x >> 24 | w << 8);\n          x = load<u32>(src + 9);\n          store<u32>(dest + 8, w >> 24 | x << 8);\n          w = load<u32>(src + 13);\n          store<u32>(dest + 12, x >> 24 | w << 8);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 2: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 2;\n        while (n >= 18) {\n          x = load<u32>(src + 2);\n          store<u32>(dest, w >> 16 | x << 16);\n          w = load<u32>(src + 6);\n          store<u32>(dest + 4, x >> 16 | w << 16);\n          x = load<u32>(src + 10);\n          store<u32>(dest + 8, w >> 16 | x << 16);\n          w = load<u32>(src + 14);\n          store<u32>(dest + 12, x >> 16 | w << 16);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 3: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        n -= 1;\n        while (n >= 19) {\n          x = load<u32>(src + 3);\n          store<u32>(dest, w >> 8 | x << 24);\n          w = load<u32>(src + 7);\n          store<u32>(dest + 4, x >> 8 | w << 24);\n          x = load<u32>(src + 11);\n          store<u32>(dest + 8, w >> 8 | x << 24);\n          w = load<u32>(src + 15);\n          store<u32>(dest + 12, x >> 8 | w << 24);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n    }\n  }\n\n  // copy remaining bytes one by one\n  if (n & 16) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 8) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 4) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 2) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 1) {\n    store<u8>(dest++, load<u8>(src++));\n  }\n}\n\n// this function will go away once `memory.copy` becomes an intrinsic\nexport function memmove(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n  if (dest === src) return;\n  if (src + n <= dest || dest + n <= src) {\n    memcpy(dest, src, n);\n    return;\n  }\n  if (dest < src) {\n    if ((src & 7) == (dest & 7)) {\n      while (dest & 7) {\n        if (!n) return;\n        --n;\n        store<u8>(dest++, load<u8>(src++));\n      }\n      while (n >= 8) {\n        store<u64>(dest, load<u64>(src));\n        n    -= 8;\n        dest += 8;\n        src  += 8;\n      }\n    }\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    if ((src & 7) == (dest & 7)) {\n      while ((dest + n) & 7) {\n        if (!n) return;\n        store<u8>(dest + --n, load<u8>(src + n));\n      }\n      while (n >= 8) {\n        n -= 8;\n        store<u64>(dest + n, load<u64>(src + n));\n      }\n    }\n    while (n) {\n      store<u8>(dest + --n, load<u8>(src + n));\n    }\n  }\n}\n\n// this function will go away once `memory.fill` becomes an intrinsic\nexport function memset(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n\n  // fill head and tail with minimal branching\n  if (!n) return;\n  store<u8>(dest, c);\n  store<u8>(dest + n - 1, c);\n  if (n <= 2) return;\n\n  store<u8>(dest + 1, c);\n  store<u8>(dest + 2, c);\n  store<u8>(dest + n - 2, c);\n  store<u8>(dest + n - 3, c);\n  if (n <= 6) return;\n  store<u8>(dest + 3, c);\n  store<u8>(dest + n - 4, c);\n  if (n <= 8) return;\n\n  // advance pointer to align it at 4-byte boundary\n  var k: usize = -dest & 3;\n  dest += k;\n  n -= k;\n  n &= -4;\n\n  var c32: u32 = <u32>-1 / 255 * c;\n\n  // fill head/tail up to 28 bytes each in preparation\n  store<u32>(dest, c32);\n  store<u32>(dest + n - 4, c32);\n  if (n <= 8) return;\n  store<u32>(dest + 4, c32);\n  store<u32>(dest + 8, c32);\n  store<u32>(dest + n - 12, c32);\n  store<u32>(dest + n - 8, c32);\n  if (n <= 24) return;\n  store<u32>(dest + 12, c32);\n  store<u32>(dest + 16, c32);\n  store<u32>(dest + 20, c32);\n  store<u32>(dest + 24, c32);\n  store<u32>(dest + n - 28, c32);\n  store<u32>(dest + n - 24, c32);\n  store<u32>(dest + n - 20, c32);\n  store<u32>(dest + n - 16, c32);\n\n  // align to a multiple of 8\n  k = 24 + (dest & 4);\n  dest += k;\n  n -= k;\n\n  // copy 32 bytes each\n  var c64: u64 = <u64>c32 | (<u64>c32 << 32);\n  while (n >= 32) {\n    store<u64>(dest, c64);\n    store<u64>(dest + 8, c64);\n    store<u64>(dest + 16, c64);\n    store<u64>(dest + 24, c64);\n    n -= 32;\n    dest += 32;\n  }\n}\n\nexport function memcmp(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n  if (vl == vr) return 0;\n  while (n != 0 && load<u8>(vl) == load<u8>(vr)) {\n    n--; vl++; vr++;\n  }\n  return n ? <i32>load<u8>(vl) - <i32>load<u8>(vr) : 0;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../node_modules/assemblyscript/index.d.ts\" />\n\nimport \"allocator/tlsf\";\nimport { precomp_base } from \"./precomp\";\nexport { memory };\n\n// SHA512\n\nfunction setU8(t: Uint8Array, s: Uint8Array, o: isize): void {\n    let ss = s.length;\n    for (let i: isize = 0; i < ss; i++) {\n        t[i + o] = s[i];\n    }\n}\n\n@inline\nfunction Sigma0(x: u64):\n    u64 {\n    return rotr(x, 28) ^ rotr(x, 34) ^ rotr(x, 39);\n}\n\n@inline function Sigma1(x: u64):\n    u64 {\n    return rotr(x, 14) ^ rotr(x, 18) ^ rotr(x, 41);\n}\n\n@inline function sigma0(x: u64):\n    u64 {\n    return rotr(x, 1) ^ rotr(x, 8) ^ (x >> 7);\n}\n\n@inline function sigma1(x: u64):\n    u64 {\n    return rotr(x, 19) ^ rotr(x, 61) ^ (x >> 6);\n}\n\n@inline function Ch(x: u64, y: u64, z: u64):\n    u64 {\n    return (x & y) ^ (~x & z);\n}\n\n@inline function Maj(x: u64, y: u64, z: u64):\n    u64 {\n    return (x & y) ^ (x & z) ^ (y & z);\n}\n\nfunction load64(x: Uint8Array, offset: isize):\n    u64 {\n    let u: u64 = 0;\n    for (let i = 0; i < 8; ++i) {\n        u = (u << 8) | x[offset + i];\n    }\n    return u;\n}\n\nfunction store64(x: Uint8Array, offset: isize, u: u64):\n    void {\n    for (let i = 7; i >= 0; --i) {\n        x[offset + i] = u as u8;\n        u >>= 8;\n    }\n}\n\nconst K: u64[] = [\n    0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f,\n    0xe9b5dba58189dbbc, 0x3956c25bf348b538, 0x59f111f1b605d019,\n    0x923f82a4af194f9b, 0xab1c5ed5da6d8118, 0xd807aa98a3030242,\n    0x12835b0145706fbe, 0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2,\n    0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235,\n    0xc19bf174cf692694, 0xe49b69c19ef14ad2, 0xefbe4786384f25e3,\n    0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65, 0x2de92c6f592b0275,\n    0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5,\n    0x983e5152ee66dfab, 0xa831c66d2db43210, 0xb00327c898fb213f,\n    0xbf597fc7beef0ee4, 0xc6e00bf33da88fc2, 0xd5a79147930aa725,\n    0x06ca6351e003826f, 0x142929670a0e6e70, 0x27b70a8546d22ffc,\n    0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed, 0x53380d139d95b3df,\n    0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6,\n    0x92722c851482353b, 0xa2bfe8a14cf10364, 0xa81a664bbc423001,\n    0xc24b8b70d0f89791, 0xc76c51a30654be30, 0xd192e819d6ef5218,\n    0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8,\n    0x19a4c116b8d2d0c8, 0x1e376c085141ab53, 0x2748774cdf8eeb99,\n    0x34b0bcb5e19b48a8, 0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb,\n    0x5b9cca4f7763e373, 0x682e6ff3d6b2b8a3, 0x748f82ee5defb2fc,\n    0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,\n    0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915,\n    0xc67178f2e372532b, 0xca273eceea26619c, 0xd186b8c721c0c207,\n    0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178, 0x06f067aa72176fba,\n    0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,\n    0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,\n    0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a,\n    0x5fcb6fab3ad6faec, 0x6c44198c4a475817,\n];\n\nfunction _hashblocks(st: Uint8Array, m: Uint8Array, n: isize): isize {\n    let z: Uint64Array = new Uint64Array(8), b: Uint64Array = new Uint64Array(8),\n        a: Uint64Array = new Uint64Array(8),\n        w: Uint64Array = new Uint64Array(16);\n    let t: u64;\n\n    for (let i = 0; i < 8; ++i) {\n        z[i] = a[i] = load64(st, 8 * i);\n    }\n    let pos = 0;\n    while (n >= 128) {\n        for (let i = 0; i < 16; ++i) {\n            w[i] = load64(m, 8 * i + pos);\n        }\n        for (let i = 0; i < 80; ++i) {\n            for (let j = 0; j < 8; ++j) {\n                b[j] = a[j];\n            }\n            t = a[7] + Sigma1(a[4]) + Ch(a[4], a[5], a[6]) + K[i] + w[i & 15];\n            b[7] = t + Sigma0(a[0]) + Maj(a[0], a[1], a[2]);\n            b[3] += t;\n            for (let j = 0; j < 8; ++j) {\n                a[(j + 1) & 7] = b[j];\n            }\n            if ((i & 15) === 15) {\n                for (let j = 0; j < 16; ++j) {\n                    w[j] += w[(j + 9) & 15] + sigma0(w[(j + 1) & 15]) +\n                        sigma1(w[(j + 14) & 15]);\n                }\n            }\n        }\n        for (let i = 0; i < 8; ++i) {\n            a[i] += z[i];\n            z[i] = a[i];\n        }\n        pos += 128;\n        n -= 128;\n    }\n    for (let i = 0; i < 8; ++i) {\n        store64(st, 8 * i, z[i]);\n    }\n    return n;\n}\n\nconst iv_: u8[] = [\n    0x6a, 0x09, 0xe6, 0x67, 0xf3, 0xbc, 0xc9, 0x08, 0xbb, 0x67, 0xae, 0x85, 0x84,\n    0xca, 0xa7, 0x3b, 0x3c, 0x6e, 0xf3, 0x72, 0xfe, 0x94, 0xf8, 0x2b, 0xa5, 0x4f,\n    0xf5, 0x3a, 0x5f, 0x1d, 0x36, 0xf1, 0x51, 0x0e, 0x52, 0x7f, 0xad, 0xe6, 0x82,\n    0xd1, 0x9b, 0x05, 0x68, 0x8c, 0x2b, 0x3e, 0x6c, 0x1f, 0x1f, 0x83, 0xd9, 0xab,\n    0xfb, 0x41, 0xbd, 0x6b, 0x5b, 0xe0, 0xcd, 0x19, 0x13, 0x7e, 0x21, 0x79,\n];\n\nlet iv: Uint8Array = new Uint8Array(64);\nfor (let i = 0; i < 64; ++i) {\n    iv[i] = iv_[i];\n}\n\nfunction _hashInit(): Uint8Array {\n    let st = new Uint8Array(64 + 128 + 8 * 2);\n\n    for (let i = 0; i < 64; ++i) {\n        st[i] = iv[i];\n    }\n    return st;\n}\n\nfunction _hashUpdate(\n    st: Uint8Array, m: Uint8Array, n: isize, r: isize): isize {\n    let w = st.subarray(64);\n    let pos: isize = 0;\n    let av: isize = 128 - r;\n    let tc = n;\n\n    if (tc > av) {\n        tc = av;\n    }\n    setU8(w, m.subarray(0, tc), r);\n    r += tc;\n    n -= tc;\n    pos += tc;\n    if (r === 128) {\n        _hashblocks(st, w, 128);\n        r = 0;\n    }\n    if (r === 0 && n > 0) {\n        let rb = _hashblocks(st, m.subarray(pos), n);\n        if (rb > 0) {\n            setU8(w, m.subarray(pos + n - rb), r);\n            r += rb;\n        }\n    }\n    return r;\n}\n\nfunction _hashFinal(\n    st: Uint8Array, out: Uint8Array, t: isize, r: isize): void {\n    let w = st.subarray(64);\n    let x = new Uint8Array(256);\n\n    setU8(x, w.subarray(0, r), 0);\n    x[r] = 128;\n    r = 256 - 128 * isize(r < 112);\n    x[r - 9] = 0;\n    store64(x, r - 8, t << 3);\n    _hashblocks(st, x, r);\n    for (let i = 0; i < 64; ++i) {\n        out[i] = st[i];\n    }\n}\n\nfunction _hash(out: Uint8Array, m: Uint8Array, n: isize): void {\n    let st = _hashInit();\n    let r = _hashUpdate(st, m, n, 0);\n\n    _hashFinal(st, out, n, r);\n}\n\n// HMAC\n\nfunction _hmac(m: Uint8Array, k: Uint8Array): Uint8Array {\n    let b = new Uint8Array(256);\n    let ib = b.subarray(128);\n    if (k.length > 128) {\n        k = hash(k);\n    }\n    setU8(b, k, 0);\n    for (let i = 0; i < 128; ++i) {\n        b[i] ^= 0x5c;\n    }\n    setU8(ib, k, 0);\n    for (let i = 0; i < 128; ++i) {\n        ib[i] ^= 0x36;\n    }\n    let st = _hashInit();\n    let r = _hashUpdate(st, ib, 128, 0);\n    r = _hashUpdate(st, m, m.length, r);\n    _hashFinal(st, b, 128 + m.length, r);\n\n    return hash(b);\n}\n\n// helpers\n\nfunction _verify32(x: Uint8Array, y: Uint8Array): bool {\n    let d: u8 = 0;\n\n    for (let i = 0; i < 32; ++i) {\n        d |= x[i] ^ y[i];\n    }\n    return d === 0;\n}\n\n// mod(2^255-19) field arithmetic - Doesn't use 51-bit limbs yet to keep the\n// code short and simple\n\n@inline\nfunction fe25519n():\n    Int64Array {\n    return new Int64Array(16);\n}\n\nfunction fe25519(init: i64[]):\n    Int64Array {\n    let r: Int64Array = new Int64Array(16);\n\n    for (let i = 0, len = init.length; i < len; ++i) {\n        r[i] = init[i];\n    }\n    return r;\n}\n\nlet fe25519_0: Int64Array = fe25519n();\nlet fe25519_1: Int64Array = fe25519([1]);\nlet D: Int64Array = fe25519([\n    0x78a3,\n    0x1359,\n    0x4dca,\n    0x75eb,\n    0xd8ab,\n    0x4141,\n    0x0a4d,\n    0x0070,\n    0xe898,\n    0x7779,\n    0x4079,\n    0x8cc7,\n    0xfe73,\n    0x2b6f,\n    0x6cee,\n    0x5203,\n]);\nlet D2: Int64Array = fe25519([\n    0xf159,\n    0x26b2,\n    0x9b94,\n    0xebd6,\n    0xb156,\n    0x8283,\n    0x149a,\n    0x00e0,\n    0xd130,\n    0xeef3,\n    0x80f2,\n    0x198e,\n    0xfce7,\n    0x56df,\n    0xd9dc,\n    0x2406,\n]);\nlet X: Int64Array = fe25519([\n    0xd51a,\n    0x8f25,\n    0x2d60,\n    0xc956,\n    0xa7b2,\n    0x9525,\n    0xc760,\n    0x692c,\n    0xdc5c,\n    0xfdd6,\n    0xe231,\n    0xc0a4,\n    0x53fe,\n    0xcd6e,\n    0x36d3,\n    0x2169,\n]);\nlet Y: Int64Array = fe25519([\n    0x6658,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n    0x6666,\n]);\nlet I: Int64Array = fe25519([\n    0xa0b0,\n    0x4a0e,\n    0x1b27,\n    0xc4ee,\n    0xe478,\n    0xad2f,\n    0x1806,\n    0x2f43,\n    0xd7a7,\n    0x3dfb,\n    0x0099,\n    0x2b4d,\n    0xdf0b,\n    0x4fc1,\n    0x2480,\n    0x2b83,\n]);\n\n@inline\nfunction fe25519Copy(r: Int64Array, a: Int64Array):\n    void {\n    for (let i = 0; i < 16; ++i) {\n        r[i] = a[i];\n    }\n}\n\nfunction fe25519Carry(o: Int64Array):\n    void {\n    let c: i64;\n\n    for (let i = 0; i < 16; ++i) {\n        o[i] += (1 << 16);\n        c = o[i] >> 16;\n        o[(i + 1) * isize(i < 15)] += c - 1 + 37 * (c - 1) * isize(i === 15);\n        o[i] -= c << 16;\n    }\n}\n\nfunction fe25519Cmov(p: Int64Array, q: Int64Array, b: i64):\n    void {\n    let c: i64 = ~(b - 1);\n\n    for (let i = 0; i < 16; ++i) {\n        p[i] ^= ((p[i] ^ q[i]) & c);\n    }\n}\n\nfunction fe25519Pack(o: Uint8Array, n: Int64Array):\n    void {\n    let b: i64;\n    let m = fe25519n();\n    let t = fe25519n();\n\n    fe25519Copy(t, n);\n    fe25519Carry(t);\n    fe25519Carry(t);\n    fe25519Carry(t);\n    for (let j = 0; j < 2; ++j) {\n        m[0] = t[0] - 0xffed;\n        for (let i = 1; i < 15; ++i) {\n            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);\n            m[i - 1] &= 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);\n        b = (m[15] >> 16) & 1;\n        m[14] &= 0xffff;\n        fe25519Cmov(t, m, 1 - b);\n    }\n    for (let i = 0; i < 16; ++i) {\n        let ti = t[i] as u32;\n        o[2 * i + 0] = ti & 0xff;\n        o[2 * i + 1] = ti >> 8;\n    }\n}\n\nfunction fe25519Eq(a: Int64Array, b: Int64Array):\n    bool {\n    let c = new Uint8Array(32), d = new Uint8Array(32);\n\n    fe25519Pack(c, a);\n    fe25519Pack(d, b);\n\n    return _verify32(c, d);\n}\n\nfunction fe25519Par(a: Int64Array):\n    u8 {\n    let d = new Uint8Array(32);\n    fe25519Pack(d, a);\n\n    return d[0] & 1;\n}\n\nfunction fe25519Unpack(o: Int64Array, n: Uint8Array):\n    void {\n    for (let i = 0; i < 16; ++i) {\n        o[i] = (n[2 * i] as i64) + (n[2 * i + 1] as i64 << 8);\n    }\n    o[15] &= 0x7fff;\n}\n\n@inline function fe25519Add(o: Int64Array, a: Int64Array, b: Int64Array):\n    void {\n    for (let i = 0; i < 16; ++i) {\n        o[i] = (a[i] + b[i]);\n    }\n}\n\n@inline function fe25519Sub(o: Int64Array, a: Int64Array, b: Int64Array):\n    void {\n    for (let i = 0; i < 16; ++i) {\n        o[i] = a[i] - b[i];\n    }\n}\n\nfunction fe25519Mul(o: Int64Array, a: Int64Array, b: Int64Array):\n    void {\n    let t = new Int64Array(31);\n\n    for (let i = 0; i < 16; ++i) {\n        for (let j = 0; j < 16; ++j) {\n            t[i + j] += a[i] * b[j];\n        }\n    }\n    for (let i = 0; i < 15; ++i) {\n        t[i] += 38 as i64 * t[i + 16];\n    }\n    fe25519Copy(o, t);\n    fe25519Carry(o);\n    fe25519Carry(o);\n}\n\nfunction fe25519Sq(o: Int64Array, a: Int64Array):\n    void {\n    fe25519Mul(o, a, a);\n}\n\nfunction fe25519Inv(o: Int64Array, i: Int64Array):\n    void {\n    let c = fe25519n();\n\n    fe25519Copy(c, i);\n    for (let a = 253; a >= 0; --a) {\n        fe25519Sq(c, c);\n        if (a !== 2 && a !== 4) {\n            fe25519Mul(c, c, i);\n        }\n    }\n    fe25519Copy(o, c);\n}\n\nfunction fe25519Pow2523(o: Int64Array, i: Int64Array):\n    void {\n    let c = fe25519n();\n\n    fe25519Copy(c, i);\n    for (let a = 250; a >= 0; --a) {\n        fe25519Sq(c, c);\n        if (a !== 1) {\n            fe25519Mul(c, c, i);\n        }\n    }\n    fe25519Copy(o, c);\n}\n\nlet _L: Int64Array = new Int64Array(32);\n_L[0] = 237;\n_L[1] = 211;\n_L[2] = 245;\n_L[3] = 92;\n_L[4] = 26;\n_L[5] = 99;\n_L[6] = 18;\n_L[7] = 88;\n_L[8] = 214;\n_L[9] = 156;\n_L[10] = 247;\n_L[11] = 162;\n_L[12] = 222;\n_L[13] = 249;\n_L[14] = 222;\n_L[15] = 20;\n_L[31] = 16;\n\nfunction fe25519ModL(r: Uint8Array, x: Int64Array): void {\n    let carry: i64;\n\n    for (let i = 63; i >= 32; --i) {\n        carry = 0;\n        let k = i - 12;\n        for (let j = i - 32; j < k; ++j) {\n            x[j] += carry - 16 * x[i] * _L[j - (i - 32)];\n            carry = (x[j] + 128) >> 8;\n            x[j] -= carry * 256;\n        }\n        x[k] += carry;\n        x[i] = 0;\n    }\n    carry = 0;\n    for (let j = 0; j < 32; ++j) {\n        x[j] += carry - (x[31] >> 4) * _L[j];\n        carry = x[j] >> 8;\n        x[j] &= 255;\n    }\n    for (let j = 0; j < 32; ++j) {\n        x[j] -= carry * _L[j];\n    }\n    for (let i = 0; i < 32; ++i) {\n        x[i + 1] += x[i] >> 8;\n        r[i] = x[i] as u8;\n    }\n}\n\nfunction fe25519Reduce(r: Uint8Array): void {\n    let x = new Int64Array(64);\n\n    for (let i = 0; i < 64; ++i) {\n        x[i] = r[i];\n    }\n    for (let i = 0; i < 64; ++i) {\n        r[i] = 0;\n    }\n    fe25519ModL(r, x);\n}\n\n// Ed25519 group arithmetic\n\n@inline\nfunction ge25519n():\n    Int64Array[] {\n    let e: Int64Array[] = [fe25519n(), fe25519n(), fe25519n(), fe25519n()];\n\n    return e;\n}\n\n@inline function geCopy(r: Int64Array[], a: Int64Array[]):\n    void {\n    fe25519Copy(r[0], a[0]);\n    fe25519Copy(r[1], a[1]);\n    fe25519Copy(r[2], a[2]);\n    fe25519Copy(r[3], a[3]);\n}\n\nfunction add(p: Int64Array[], q: Int64Array[]):\n    void {\n    let a = fe25519n(), b = fe25519n(), c = fe25519n(), d = fe25519n(),\n        e = fe25519n(), f = fe25519n(), g = fe25519n(), h = fe25519n(),\n        t = fe25519n();\n\n    fe25519Sub(a, p[1], p[0]);\n    fe25519Sub(t, q[1], q[0]);\n    fe25519Mul(a, a, t);\n    fe25519Add(b, p[0], p[1]);\n    fe25519Add(t, q[0], q[1]);\n    fe25519Mul(b, b, t);\n    fe25519Mul(c, p[3], q[3]);\n    fe25519Mul(c, c, D2);\n    fe25519Mul(d, p[2], q[2]);\n    fe25519Add(d, d, d);\n    fe25519Sub(e, b, a);\n    fe25519Sub(f, d, c);\n    fe25519Add(g, d, c);\n    fe25519Add(h, b, a);\n\n    fe25519Mul(p[0], e, f);\n    fe25519Mul(p[1], h, g);\n    fe25519Mul(p[2], g, f);\n    fe25519Mul(p[3], e, h);\n}\n\n@inline function cmov(p: Int64Array[], q: Int64Array[], b: u8):\n    void {\n    for (let i = 0; i < 4; ++i) {\n        fe25519Cmov(p[i], q[i], b);\n    }\n}\n\nfunction pack(r: Uint8Array, p: Int64Array[]):\n    void {\n    let tx = fe25519n(), ty = fe25519n(), zi = fe25519n();\n    fe25519Inv(zi, p[2]);\n    fe25519Mul(tx, p[0], zi);\n    fe25519Mul(ty, p[1], zi);\n    fe25519Pack(r, ty);\n    r[31] ^= fe25519Par(tx) << 7;\n}\n\nfunction scalarmult(p: Int64Array[], q: Int64Array[], s: Uint8Array):\n    void {\n    let t: Int64Array[] = ge25519n();\n    let b: u8;\n\n    fe25519Copy(p[0], fe25519_0);\n    fe25519Copy(p[1], fe25519_1);\n    fe25519Copy(p[2], fe25519_1);\n    fe25519Copy(p[3], fe25519_0);\n\n    for (let i: isize = 0; i <= 255; ++i) {\n        b = (s[(i >>> 3)] >>> (i as u8 & 7)) & 1;\n        geCopy(t, p);\n        add(t, q);\n        cmov(p, t, b);\n        add(q, q);\n    }\n}\n\nfunction scalarmultBase(p: Int64Array[], s: Uint8Array):\n    void {\n    let q: Int64Array[] = ge25519n();\n    let t: Int64Array[] = ge25519n();\n    let b: u8;\n\n    fe25519Copy(p[0], fe25519_0);\n    fe25519Copy(p[1], fe25519_1);\n    fe25519Copy(p[2], fe25519_1);\n    fe25519Copy(p[3], fe25519_0);\n\n    for (let i: isize = 0; i <= 255; ++i) {\n        b = (s[(i >>> 3)] >>> (i as u8 & 7)) & 1;\n        q[0] = fe25519(precomp_base[i][0]);\n        q[1] = fe25519(precomp_base[i][1]);\n        q[2] = fe25519(precomp_base[i][2]);\n        q[3] = fe25519(precomp_base[i][3]);\n        geCopy(t, p);\n        add(t, q);\n        cmov(p, t, b);\n    }\n}\n\n// EdDSA\n\nfunction _signKeypairFromSeed(kp: Uint8Array):\n    void {\n    let pk = new Uint8Array(32);\n    let d = new Uint8Array(64);\n    let p = ge25519n();\n\n    _hash(d, kp, 32);\n    d[0] &= 248;\n    d[31] = (d[31] & 127) | 64;\n    scalarmultBase(p, d);\n    pack(pk, p);\n    for (let i = 0; i < 32; ++i) {\n        kp[i + 32] = pk[i];\n    }\n}\n\nfunction unpackneg(r: Int64Array[], p: Uint8Array):\n    bool {\n    let t = fe25519n(), chk = fe25519n(), num = fe25519n(), den = fe25519n(),\n        den2 = fe25519n(), den4 = fe25519n(), den6 = fe25519n();\n\n    fe25519Copy(r[2], fe25519_1);\n    fe25519Unpack(r[1], p);\n    fe25519Sq(num, r[1]);\n    fe25519Mul(den, num, D);\n    fe25519Sub(num, num, r[2]);\n    fe25519Add(den, r[2], den);\n    fe25519Sq(den2, den);\n    fe25519Sq(den4, den2);\n    fe25519Mul(den6, den4, den2);\n    fe25519Mul(t, den6, num);\n    fe25519Mul(t, t, den);\n    fe25519Pow2523(t, t);\n    fe25519Mul(t, t, num);\n    fe25519Mul(t, t, den);\n    fe25519Mul(t, t, den);\n    fe25519Mul(r[0], t, den);\n    fe25519Sq(chk, r[0]);\n    fe25519Mul(chk, chk, den);\n    if (!fe25519Eq(chk, num)) {\n        fe25519Mul(r[0], r[0], I);\n    }\n    fe25519Sq(chk, r[0]);\n    fe25519Mul(chk, chk, den);\n    if (!fe25519Eq(chk, num)) {\n        return false;\n    }\n    if (fe25519Par(r[0]) === (p[31] >> 7)) {\n        fe25519Sub(r[0], fe25519_0, r[0]);\n    }\n    fe25519Mul(r[3], r[0], r[1]);\n\n    return true;\n}\n\nfunction isCanonical(s: Uint8Array): bool {\n    let c: u32 = (s[31] & 0x7f) ^ 0x7f;\n\n    for (let i = 30; i > 0; --i) {\n        c |= s[i] ^ 0xff;\n    }\n    c = (c - 1) >> 8;\n    let d = ((0xed - 1) as u32 - (s[0] as u32)) >> 8;\n\n    return !(c & d & 1);\n}\n\n// Ed25519\n\nlet B = new Uint8Array(32);\nfor (let i = 0; i < 32; ++i) {\n    B[i] = 0x66;\n}\n\nfunction _signSyntheticRHv(\n    hs: Uint8Array, r: isize, Z: Uint8Array, sk: Uint8Array): isize {\n    let zeros = new Uint8Array(128);\n    let empty_labelset = new Uint8Array(3);\n    let Zlen = Z.length;\n\n    if (Zlen > 128 - (32 + 3)) {\n        Z = hash(Z);\n        Zlen = Z.length;\n    }\n    empty_labelset[0] = 0x02;\n\n    r = _hashUpdate(hs, B, 32, r);\n    r = _hashUpdate(hs, empty_labelset, 3, r);\n    r = _hashUpdate(hs, Z, Zlen, r);\n    r = _hashUpdate(hs, zeros, 128 - (32 + 3 + Zlen) % 128, r);\n    r = _hashUpdate(hs, sk, 32, r);\n    r = _hashUpdate(hs, zeros, 128 - 32 % 128, r);\n    r = _hashUpdate(hs, empty_labelset, 3, r);\n    r = _hashUpdate(hs, sk.subarray(32), 32, r);\n\n    return r;\n}\n\nfunction _signDetached(\n    sig: Uint8Array, m: Uint8Array, kp: Uint8Array, Z: Uint8Array): void {\n    let R = ge25519n();\n    let az = new Uint8Array(64);\n    let nonce = new Uint8Array(64);\n    let hram = new Uint8Array(64);\n    let x = new Int64Array(64);\n    let mlen = m.length;\n    let hs = _hashInit();\n    let r: isize = 0;\n\n    _hash(az, kp, 32);\n    if (Z.length > 0) {\n        r = _signSyntheticRHv(hs, r, Z, az);\n    } else {\n        r = _hashUpdate(hs, az.subarray(32), 32, r);\n    }\n    r = _hashUpdate(hs, m, mlen, r);\n    _hashFinal(hs, nonce, 32 + mlen, r);\n    setU8(sig, kp.subarray(32), 32);\n\n    fe25519Reduce(nonce);\n    scalarmultBase(R, nonce);\n    pack(sig, R);\n\n    hs = _hashInit();\n    r = _hashUpdate(hs, sig, 64, 0);\n    r = _hashUpdate(hs, m, mlen, r);\n    _hashFinal(hs, hram, 64 + mlen, r);\n    fe25519Reduce(hram);\n    az[0] &= 248;\n    az[31] = (az[31] & 127) | 64;\n    for (let i = 0; i < 32; ++i) {\n        x[i] = nonce[i];\n    }\n    for (let i = 0; i < 32; ++i) {\n        for (let j = 0; j < 32; ++j) {\n            x[i + j] += (hram[i] as i64) * (az[j] as i64);\n        }\n    }\n    fe25519ModL(sig.subarray(32), x);\n}\n\nfunction _signVerifyDetached(\n    sig: Uint8Array, m: Uint8Array, pk: Uint8Array): bool {\n    let A = ge25519n();\n    let R = ge25519n();\n    let rcheck = new Uint8Array(32);\n    let h = new Uint8Array(64);\n\n    if (!isCanonical(sig.subarray(32)) || !isCanonical(pk)) {\n        return false;\n    }\n    if (!unpackneg(A, pk)) {\n        return false;\n    }\n    let hs = _hashInit();\n    let r = _hashUpdate(hs, sig, 32, 0);\n    r = _hashUpdate(hs, pk, 32, r);\n    r = _hashUpdate(hs, m, m.length, r);\n    _hashFinal(hs, h, 32 + 32 + m.length, r);\n    fe25519Reduce(h);\n\n    scalarmult(R, A, h);\n    scalarmultBase(A, sig.subarray(32));\n    add(R, A);\n    pack(rcheck, R);\n\n    return _verify32(rcheck, sig.subarray(0, 32));\n}\n\n// Exported API\n\n/**\n * Signature size, in bytes\n */\n@global\nexport const SIGN_BYTES: isize = 64;\n\n/**\n * Public key size, in bytes\n */\n@global\nexport const SIGN_PUBLICKEYBYTES: isize = 32;\n\n/**\n * Secret key size, in bytes\n */\n@global\nexport const SIGN_SECRETKEYBYTES: isize = 32;\n\n/**\n * Key pair size, in bytes\n */\n@global\nexport const SIGN_KEYPAIRBYTES: isize = 64;\n\n/**\n * Seed size, in bytes\n */\n@global\nexport const SIGN_SEEDBYTES: isize = 32;\n\n/**\n * Recommended random bytes size, in bytes\n */\n@global\nexport const SIGN_RANDBYTES: isize = 32;\n\n/**\n * Hash function output size, in bytes\n */\n@global\nexport const HASH_BYTES: isize = 64;\n\n/**\n * HMAC output size, in bytes\n */\n@global\nexport const HMAC_BYTES: isize = 64;\n\n/**\n * Fill an array with zeros\n * @param x Array to clear\n */\n@global\nexport function memzero(x: Uint8Array): void {\n    for (let i = 0, j = x.length; i < j; ++i) {\n        x[i] = 0;\n    }\n}\n\n/**\n * Check two arrays for equality\n * @param x First array\n * @param y Second array\n * @returns true if `x === y`\n */\n@global\nexport function equals(x: Uint8Array, y: Uint8Array): bool {\n    let len = x.length;\n    let d: u8 = 0;\n\n    if (len === 0 || len !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < len; ++i) {\n        d |= x[i] ^ y[i];\n    }\n    return d === 0;\n}\n\n/**\n * Sign a message and returns its signature.\n * @param m Message to sign\n * @param kp Key pair (`SIGN_KEYPAIRBYTES` long)\n * @param Z Random bytes. This can be an empty array to produce deterministic\n *     signatures\n * @returns Signature\n */\n@global\nexport function sign(m: Uint8Array, kp: Uint8Array, Z: Uint8Array): Uint8Array {\n    let sig = new Uint8Array(SIGN_BYTES);\n    _signDetached(sig, m, kp, Z);\n\n    return sig;\n}\n\n/**\n * Verify a signature\n * @param m Message\n * @param sig Signature\n * @param pk Public key\n * @returns `true` on success\n */\n@global\nexport function signVerify(\n    m: Uint8Array, sig: Uint8Array, pk: Uint8Array): bool {\n    if (sig.length !== SIGN_BYTES) {\n        throw new Error(\"bad signature size\");\n    }\n    if (pk.length !== SIGN_PUBLICKEYBYTES) {\n        throw new Error(\"bad public key size\");\n    }\n    return _signVerifyDetached(sig, m, pk);\n}\n\n/**\n * Create a new key pair from a seed\n * @param seed Seed (`SIGN_SEEDBYTES` long)\n * @returns Key pair\n */\n@global\nexport function signKeypairFromSeed(seed: Uint8Array): Uint8Array {\n    if (seed.length !== SIGN_SEEDBYTES) {\n        throw new Error(\"bad seed size\");\n    }\n    let kp = new Uint8Array(SIGN_KEYPAIRBYTES);\n    for (let i: isize = 0; i < 32; i++) {\n        kp[i] = seed[i];\n    }\n    _signKeypairFromSeed(kp);\n\n    return kp;\n}\n\n/**\n * Return the public key from a key pair\n * @param kp Key pair\n * @returns Public key\n */\n@global\nexport function signPublicKey(kp: Uint8Array): Uint8Array {\n    const len = SIGN_PUBLICKEYBYTES;\n    let pk = new Uint8Array(len);\n\n    for (let i = 0; i < len; ++i) {\n        pk[i] = kp[i + 32];\n    }\n    return pk;\n}\n\n/**\n * Return the secret key from a key pair\n * @param kp Key pair\n * @returns Secret key\n */\n@global\nexport function signSecretKey(kp: Uint8Array): Uint8Array {\n    const len = SIGN_SECRETKEYBYTES;\n    let sk = new Uint8Array(len);\n\n    for (let i = 0; i < len; ++i) {\n        sk[i] = kp[i];\n    }\n    return sk;\n}\n\n/**\n * Initialize a multipart hash computation\n * @returns A hash function state\n */\n@global\nexport function hashInit(): Uint8Array {\n    return _hashInit();\n}\n\n/**\n * Absorb data to be hashed\n * @param st Hash function state\n * @param m (partial) message\n */\n@global\nexport function hashUpdate(st: Uint8Array, m: Uint8Array): void {\n    let r = load64(st, 64 + 128);\n    let t = load64(st, 64 + 128 + 8);\n    let n = m.length;\n\n    t += n;\n    r = _hashUpdate(st, m, n, r as isize);\n    store64(st, 64 + 128, r as u64);\n    store64(st, 64 + 128 + 8, t as u64);\n}\n\n/**\n * Finalize a hash computation\n * @param st Hash function state\n * @returns Hash\n */\n@global\nexport function hashFinal(st: Uint8Array): Uint8Array {\n    let h = new Uint8Array(HASH_BYTES);\n    let r = load64(st, 64 + 128);\n    let t = load64(st, 64 + 128 + 8);\n\n    _hashFinal(st, h, t as isize, r as isize);\n\n    return h;\n}\n\n/**\n * Compute a hash for a single-part message\n * @param m Message\n * @returns Hash\n */\n@global\nexport function hash(m: Uint8Array): Uint8Array {\n    let st = hashInit();\n\n    hashUpdate(st, m);\n\n    return hashFinal(st);\n}\n\n/**\n * HMAC-SHA-512\n * @param m Message\n * @param k Key\n */\n@global\nexport function hmac(m: Uint8Array, k: Uint8Array): Uint8Array {\n    return _hmac(m, k);\n}\n","import {\n  AL_MASK,\n  MAX_SIZE_32\n } from \"./allocator\";\n\n/** Size of an ArrayBuffer header. */\nexport const HEADER_SIZE: usize = (offsetof<ArrayBuffer>() + AL_MASK) & ~AL_MASK;\n/** Maximum byte length of an ArrayBuffer. */\nexport const MAX_BLENGTH: i32 = <i32>MAX_SIZE_32 - HEADER_SIZE;\n\nfunction computeSize(byteLength: i32): usize {\n  // round up to power of 2, with HEADER_SIZE=8:\n  // 0            -> 2^3  = 8\n  // 1..8         -> 2^4  = 16\n  // 9..24        -> 2^5  = 32\n  // ...\n  // MAX_LENGTH   -> 2^30 = 0x40000000 (MAX_SIZE_32)\n  return <usize>1 << <usize>(<u32>32 - clz<u32>(byteLength + HEADER_SIZE - 1));\n}\n\n// Low-level utility\n\nfunction __gc(ref: usize): void {}\n\nexport function allocateUnsafe(byteLength: i32): ArrayBuffer {\n  assert(<u32>byteLength <= <u32>MAX_BLENGTH);\n  var buffer: usize;\n  if (isManaged<ArrayBuffer>()) {\n    buffer = __gc_allocate(computeSize(byteLength), __gc); // tslint:disable-line\n  } else {\n    buffer = memory.allocate(computeSize(byteLength));\n  }\n  store<i32>(buffer, byteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n  return changetype<ArrayBuffer>(buffer);\n}\n\nexport function reallocateUnsafe(buffer: ArrayBuffer, newByteLength: i32): ArrayBuffer {\n  var oldByteLength = buffer.byteLength;\n  if (newByteLength > oldByteLength) {\n    assert(newByteLength <= MAX_BLENGTH);\n    if (newByteLength <= <i32>(computeSize(oldByteLength) - HEADER_SIZE)) { // fast path: zero out additional space\n      store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n    } else { // slow path: copy to new buffer\n      let newBuffer = allocateUnsafe(newByteLength);\n      memory.copy(\n        changetype<usize>(newBuffer) + HEADER_SIZE,\n        changetype<usize>(buffer) + HEADER_SIZE,\n        <usize>oldByteLength\n      );\n      if (!isManaged<ArrayBuffer>()) {\n        memory.free(changetype<usize>(buffer));\n      }\n      buffer = newBuffer;\n    }\n    memory.fill(\n      changetype<usize>(buffer) + HEADER_SIZE + <usize>oldByteLength,\n      0,\n      <usize>(newByteLength - oldByteLength)\n    );\n  } else if (newByteLength < oldByteLength) { // fast path: override size\n    // TBD: worth to copy and release if size is significantly less than before?\n    assert(newByteLength >= 0);\n    store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n  }\n  return buffer;\n}\n\n// The helpers below use two different types in order to emit loads and stores that load respectively\n// store one type to/from memory while returning/taking the desired output/input type. This allows to\n// emit instructions like\n//\n// * `i32.load8` ^= `<i32>load<i8>(...)` that reads an i8 but returns an i32, or\n// * `i64.load32_s` ^= `<i64>load<i32>(...)`) that reads a 32-bit as a 64-bit integer\n//\n// without having to emit an additional instruction for conversion purposes. The second parameter\n// can be omitted for references and other loads and stores that simply return the exact type.\n\n@inline export function LOAD<T,TOut = T>(buffer: ArrayBuffer, index: i32, byteOffset: i32 = 0): TOut {\n  return <TOut>load<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()) + <usize>byteOffset, HEADER_SIZE);\n}\n\n@inline export function STORE<T,TIn = T>(buffer: ArrayBuffer, index: i32, value: TIn, byteOffset: i32 = 0): void {\n  store<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()) + <usize>byteOffset, value, HEADER_SIZE);\n}\n","import {\n  HEADER_SIZE as AB_HEADER_SIZE,\n  MAX_BLENGTH as AB_MAX_BLENGTH,\n  allocateUnsafe,\n  LOAD,\n  STORE\n} from \"./arraybuffer\";\n\nimport {\n  SORT as SORT_IMPL\n} from \"./sort\";\n\n/** Typed array base class. Not a global object. */\nexport abstract class TypedArray<T> {\n  [key: number]: T; // compatibility only\n\n  readonly buffer: ArrayBuffer;\n  readonly byteOffset: i32;\n  readonly byteLength: i32;\n\n  constructor(length: i32) {\n    const MAX_LENGTH = <u32>AB_MAX_BLENGTH / sizeof<T>();\n    if (<u32>length > MAX_LENGTH) throw new RangeError(\"Invalid typed array length\");\n    var byteLength = length << alignof<T>();\n    var buffer = allocateUnsafe(byteLength);\n    memory.fill(changetype<usize>(buffer) + AB_HEADER_SIZE, 0, <usize>byteLength);\n    this.buffer = buffer;\n    this.byteOffset = 0;\n    this.byteLength = byteLength;\n  }\n\n  @inline\n  get length(): i32 {\n    return this.byteLength >>> alignof<T>();\n  }\n\n  @operator(\"[]\")\n  protected __get(index: i32): T {\n    if (<u32>index >= <u32>(this.byteLength >>> alignof<T>())) throw new Error(\"Index out of bounds\");\n    return LOAD<T>(this.buffer, index, this.byteOffset);\n  }\n\n  @inline @operator(\"{}\")\n  protected __unchecked_get(index: i32): T {\n    return LOAD<T>(this.buffer, index, this.byteOffset);\n  }\n\n  @operator(\"[]=\")\n  protected __set(index: i32, value: NATIVE<T>): void {\n    if (<u32>index >= <u32>(this.byteLength >>> alignof<T>())) throw new Error(\"Index out of bounds\");\n    STORE<T,NATIVE<T>>(this.buffer, index, value, this.byteOffset);\n  }\n\n  @inline @operator(\"{}=\")\n  protected __unchecked_set(index: i32, value: NATIVE<T>): void {\n    STORE<T,NATIVE<T>>(this.buffer, index, value, this.byteOffset);\n  }\n\n  // copyWithin(target: i32, start: i32, end: i32 = this.length): this\n}\n\n@inline\nexport function FILL<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  value: NATIVE<T>,\n  start: i32,\n  end: i32\n): TArray {\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  var len = array.length;\n  start = start < 0 ? max(len + start, 0) : min(start, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  if (sizeof<T>() == 1) {\n    if (start < end) {\n      memory.fill(\n        changetype<usize>(buffer) + start + byteOffset + AB_HEADER_SIZE,\n        <u8>value,\n        <usize>(end - start)\n      );\n    }\n  } else {\n    for (; start < end; ++start) {\n      STORE<T,NATIVE<T>>(buffer, start, value, byteOffset);\n    }\n  }\n  return array;\n}\n\n@inline\nexport function SORT<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  comparator: (a: T, b: T) => i32\n): TArray {\n  var byteOffset = array.byteOffset;\n  var length = array.length;\n  if (length <= 1) return array;\n  var buffer = array.buffer;\n  if (length == 2) {\n    let a = LOAD<T>(buffer, 1, byteOffset);\n    let b = LOAD<T>(buffer, 0, byteOffset);\n    if (comparator(a, b) < 0) {\n      STORE<T>(buffer, 1, b, byteOffset);\n      STORE<T>(buffer, 0, a, byteOffset);\n    }\n    return array;\n  }\n  SORT_IMPL<T>(buffer, byteOffset, length, comparator);\n  return array;\n}\n\n@inline\nexport function SUBARRAY<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  begin: i32,\n  end: i32\n): TArray {\n  var length = <i32>array.length;\n  if (begin < 0) begin = max(length + begin, 0);\n  else begin = min(begin, length);\n  if (end < 0) end = max(length + end, begin);\n  else end = max(min(end, length), begin);\n  var slice = memory.allocate(offsetof<TArray>());\n  store<usize>(slice, array.buffer, offsetof<TArray>(\"buffer\"));\n  store<i32>(slice, <i32>array.byteOffset + (begin << alignof<T>()), offsetof<TArray>(\"byteOffset\"));\n  store<i32>(slice, (end - begin) << alignof<T>(), offsetof<TArray>(\"byteLength\"));\n  return changetype<TArray>(slice);\n}\n\n@inline\nexport function REDUCE<TArray extends TypedArray<T>, T, TRet>(\n  array: TArray,\n  callbackfn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var index = 0;\n  var length = <i32>array.length;\n  while (index != length) {\n    initialValue = callbackfn(\n      initialValue,\n      unchecked(array[index]),\n      index,\n      array,\n    );\n    ++index;\n  }\n  return initialValue;\n}\n\n@inline\nexport function REDUCE_RIGHT<TArray extends TypedArray<T>, T, TRet>(\n  array: TArray,\n  callbackfn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var index = <i32>array.length - 1;\n  var length = -1;\n  while (index != length) {\n    initialValue = callbackfn(\n      initialValue,\n      unchecked(array[index]),\n      index,\n      array,\n    );\n    --index;\n  }\n  return initialValue;\n}\n\n@inline\nexport function MAP<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, self: TArray) => T,\n): TArray {\n  var length: i32 = array.length;\n  var result = instantiate<TArray>(length);\n  var i: i32 = 0;\n  while (i < length) {\n    unchecked(result[i] = callbackfn(array[i], i, <TArray>array));\n    ++i;\n  }\n  return result;\n}\n","import {\n  MAX_BLENGTH,\n  HEADER_SIZE,\n  allocateUnsafe,\n  reallocateUnsafe,\n  LOAD,\n  STORE\n} from \"./internal/arraybuffer\";\n\nimport {\n  allocateUnsafe as allocateUnsafeString,\n  freeUnsafe as freeUnsafeString,\n  copyUnsafe as copyUnsafeString\n} from \"./internal/string\";\n\nimport {\n  COMPARATOR,\n  SORT\n} from \"./internal/sort\";\n\nimport {\n  itoa,\n  dtoa,\n  itoa_stream,\n  dtoa_stream,\n  MAX_DOUBLE_LENGTH\n} from \"./internal/number\";\n\nimport {\n  isArray as builtin_isArray\n} from \"./builtins\";\n\nexport class Array<T> {\n  [key: number]: T; // compatibility only\n\n  /* @internal */ buffer_: ArrayBuffer;\n  /* @internal */ length_: i32;\n\n  @inline static isArray<U>(value: U): bool {\n    return builtin_isArray(value) && value !== null;\n  }\n\n  constructor(length: i32 = 0) {\n    const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n    if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\n    var byteLength = length << alignof<T>();\n    var buffer = allocateUnsafe(byteLength);\n    this.buffer_ = buffer;\n    this.length_ = length;\n    memory.fill(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      0,\n      <usize>byteLength\n    );\n  }\n\n  @inline\n  get length(): i32 {\n    return this.length_;\n  }\n\n  set length(length: i32) {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    if (<u32>length > <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, length << alignof<T>());\n      this.buffer_ = buffer;\n    }\n    this.length_ = length;\n  }\n\n  every(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < min(toIndex, this.length_); ++index) {\n      if (!callbackfn(LOAD<T>(buffer, index), index, this)) return false;\n    }\n    return true;\n  }\n\n  findIndex(predicate: (element: T, index: i32, array: Array<T>) => bool): i32 {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < min(toIndex, this.length_); ++index) {\n      if (predicate(LOAD<T>(buffer, index), index, this)) return index;\n    }\n    return -1;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): T {\n    var buffer = this.buffer_;\n    return <u32>index < <u32>(buffer.byteLength >>> alignof<T>())\n      ? LOAD<T>(buffer, index)\n      : <T>unreachable();\n  }\n\n  @operator(\"{}\")\n  private __unchecked_get(index: i32): T {\n    return LOAD<T>(this.buffer_, index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: T): void {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    if (<u32>index >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>index >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, (index + 1) << alignof<T>());\n      this.buffer_ = buffer;\n      this.length_ = index + 1;\n    }\n    STORE<T>(buffer, index, value);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n  }\n\n  @operator(\"{}=\")\n  private __unchecked_set(index: i32, value: T): void {\n    STORE<T>(this.buffer_, index, value);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n  }\n\n  fill(value: T, start: i32 = 0, end: i32 = i32.MAX_VALUE): this {\n    var buffer = this.buffer_;\n    var len    = this.length_;\n\n    start = start < 0 ? max(len + start, 0) : min(start, len);\n    end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n\n    if (sizeof<T>() == 1) {\n      if (start < end) {\n        memory.fill(\n          changetype<usize>(buffer) + start + HEADER_SIZE,\n          <u8>value,\n          <usize>(end - start)\n        );\n      }\n    } else {\n      for (; start < end; ++start) {\n        STORE<T>(buffer, start, value);\n      }\n    }\n    return this;\n  }\n\n  @inline\n  includes(searchElement: T, fromIndex: i32 = 0): bool {\n    return this.indexOf(searchElement, fromIndex) >= 0;\n  }\n\n  indexOf(searchElement: T, fromIndex: i32 = 0): i32 {\n    var length = this.length_;\n    if (length == 0 || fromIndex >= length) return -1;\n    if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n    var buffer = this.buffer_;\n    while (fromIndex < length) {\n      if (LOAD<T>(buffer, fromIndex) == searchElement) return fromIndex;\n      ++fromIndex;\n    }\n    return -1;\n  }\n\n  lastIndexOf(searchElement: T, fromIndex: i32 = this.length_): i32 {\n    var length = this.length_;\n    if (length == 0) return -1;\n    if (fromIndex < 0) fromIndex = length + fromIndex; // no need to clamp\n    else if (fromIndex >= length) fromIndex = length - 1;\n    var buffer = this.buffer_;\n    while (fromIndex >= 0) {                           // ^\n      if (LOAD<T>(buffer, fromIndex) == searchElement) return fromIndex;\n      --fromIndex;\n    }\n    return -1;\n  }\n\n  push(element: T): i32 {\n    var length = this.length_;\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    var newLength = length + 1; // safe only if length is checked\n    if (<u32>length >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\n      this.buffer_ = buffer;\n    }\n    this.length_ = newLength;\n    STORE<T>(buffer, length, element);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\n    return newLength;\n  }\n\n  concat(items: Array<T>): Array<T> {\n    var thisLen = this.length_;\n    var otherLen = items === null ? 0 : items.length_;\n    var outLen = thisLen + otherLen;\n    var out = new Array<T>(outLen);\n\n    if (thisLen) {\n      memory.copy(\n        changetype<usize>(out.buffer_)  + HEADER_SIZE,\n        changetype<usize>(this.buffer_) + HEADER_SIZE,\n        <usize>thisLen << alignof<T>()\n      );\n    }\n    if (otherLen) {\n      memory.copy(\n        changetype<usize>(out.buffer_)   + HEADER_SIZE + (<usize>thisLen << alignof<T>()),\n        changetype<usize>(items.buffer_) + HEADER_SIZE,\n        <usize>otherLen << alignof<T>()\n      );\n    }\n    return out;\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): this {\n    var buffer = this.buffer_;\n    var len = this.length_;\n\n        end   = min<i32>(end, len);\n    var to    = target < 0 ? max(len + target, 0) : min(target, len);\n    var from  = start < 0 ? max(len + start, 0) : min(start, len);\n    var last  = end < 0 ? max(len + end, 0) : min(end, len);\n    var count = min(last - from, len - to);\n\n    if (from < to && to < (from + count)) {\n      from += count - 1;\n      to   += count - 1;\n      while (count) {\n        STORE<T>(buffer, to, LOAD<T>(buffer, from));\n        --from, --to, --count;\n      }\n    } else {\n      memory.copy(\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>to << alignof<T>()),\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>from << alignof<T>()),\n        <usize>count << alignof<T>()\n      );\n    }\n    return this;\n  }\n\n  pop(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(\"Array is empty\");\n    var element = LOAD<T>(this.buffer_, --length);\n    this.length_ = length;\n    return element;\n  }\n\n  forEach(callbackfn: (value: T, index: i32, array: Array<T>) => void): void {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < toIndex && index < this.length_; ++index) {\n      callbackfn(LOAD<T>(buffer, index), index, this);\n    }\n  }\n\n  map<U>(callbackfn: (value: T, index: i32, array: Array<T>) => U): Array<U> {\n    var buffer = this.buffer_;\n    var length = this.length_;\n    var result = new Array<U>(length);\n    var resultBuffer = result.buffer_;\n    for (let index = 0; index < min(length, this.length_); ++index) {\n      STORE<U>(resultBuffer, index, callbackfn(LOAD<T>(buffer, index), index, this));\n    }\n    return result;\n  }\n\n  filter(callbackfn: (value: T, index: i32, array: Array<T>) => bool): Array<T> {\n    var buffer = this.buffer_;\n    var result = new Array<T>();\n    for (let index = 0, toIndex = this.length_; index < min(toIndex, this.length_); ++index) {\n      let value = LOAD<T>(buffer, index);\n      if (callbackfn(value, index, this)) result.push(value);\n    }\n    return result;\n  }\n\n  reduce<U>(\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < min(toIndex, this.length_); ++index) {\n      accum = callbackfn(accum, LOAD<T>(buffer, index), index, this);\n    }\n    return accum;\n  }\n\n  reduceRight<U>(\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    var buffer = this.buffer_;\n    for (let index: i32 = this.length_ - 1; index >= 0; --index) {\n      accum = callbackfn(accum, LOAD<T>(buffer, index), index, this);\n    }\n    return accum;\n  }\n\n  shift(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(\"Array is empty\");\n    var buffer = this.buffer_;\n    var element = LOAD<T>(buffer, 0);\n    var lastIndex = length - 1;\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\n      <usize>lastIndex << alignof<T>()\n    );\n    STORE<T>(buffer, lastIndex, <T>null);\n    this.length_ = lastIndex;\n    return element;\n  }\n\n  some(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\n    var buffer = this.buffer_;\n    for (let index = 0, toIndex = this.length_; index < min(toIndex, this.length_); ++index) {\n      if (callbackfn(LOAD<T>(buffer, index), index, this)) return true;\n    }\n    return false;\n  }\n\n  unshift(element: T): i32 {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    var length = this.length_;\n    var newLength = length + 1; // safe only if length is checked\n    if (<u32>length >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\n      capacity = buffer.byteLength >>> alignof<T>();\n      this.buffer_ = buffer;\n    }\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\n      changetype<usize>(buffer) + HEADER_SIZE,\n      <usize>(capacity - 1) << alignof<T>()\n    );\n    STORE<T>(buffer, 0, element);\n    this.length_ = newLength;\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\n    return newLength;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Array<T> {\n    var length = this.length_;\n    if (begin < 0) begin = max(length + begin, 0);\n    else if (begin > length) begin = length;\n    if (end < 0) end = length + end; // no need to clamp\n    else if (end > length) end = length;\n    if (end < begin) end = begin;    // ^\n    var newLength = end - begin;\n    assert(newLength >= 0);\n    var sliced = new Array<T>(newLength);\n    if (newLength) {\n      memory.copy(\n        changetype<usize>(sliced.buffer_) + HEADER_SIZE,\n        changetype<usize>(this.buffer_) + HEADER_SIZE + (<usize>begin << alignof<T>()),\n        <usize>newLength << alignof<T>()\n      );\n    }\n    return sliced;\n  }\n\n  splice(start: i32, deleteCount: i32 = i32.MAX_VALUE): Array<T> {\n    var length  = this.length_;\n    start       = start < 0 ? max<i32>(length + start, 0) : min<i32>(start, length);\n    deleteCount = max<i32>(min<i32>(deleteCount, length - start), 0);\n    var buffer  = this.buffer_;\n    var spliced = new Array<T>(deleteCount);\n    var source  = changetype<usize>(buffer) + HEADER_SIZE + (<usize>start << alignof<T>());\n    memory.copy(\n      changetype<usize>(spliced.buffer_) + HEADER_SIZE,\n      source,\n      <usize>deleteCount << alignof<T>()\n    );\n    var offset = start + deleteCount;\n    if (length != offset) {\n      memory.copy(\n        source,\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>offset << alignof<T>()),\n        <usize>(length - offset) << alignof<T>()\n      );\n    }\n    this.length_ = length - deleteCount;\n    return spliced;\n  }\n\n  reverse(): Array<T> {\n    var buffer = this.buffer_;\n    for (let front = 0, back = this.length_ - 1; front < back; ++front, --back) {\n      let temp = LOAD<T>(buffer, front);\n      STORE<T>(buffer, front, LOAD<T>(buffer, back));\n      STORE<T>(buffer, back, temp);\n    }\n    return this;\n  }\n\n  sort(comparator: (a: T, b: T) => i32 = COMPARATOR<T>()): this {\n    // TODO remove this when flow will allow trackcing null\n    assert(comparator); // The comparison function must be a function\n\n    var length = this.length_;\n    if (length <= 1) return this;\n    var buffer = this.buffer_;\n    if (length == 2) {\n      let a = LOAD<T>(buffer, 1); // a = arr[1]\n      let b = LOAD<T>(buffer, 0); // b = arr[0]\n      if (comparator(a, b) < 0) {\n        STORE<T>(buffer, 1, b);   // arr[1] = b;\n        STORE<T>(buffer, 0, a);   // arr[0] = a;\n      }\n      return this;\n    }\n    SORT<T>(buffer, 0, length, comparator);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    var lastIndex = this.length_ - 1;\n    if (lastIndex < 0) return \"\";\n    var result = \"\";\n    var value: T;\n    var buffer = this.buffer_;\n    var sepLen = separator.length;\n    var hasSeparator = sepLen != 0;\n    if (value instanceof bool) {\n      if (!lastIndex) {\n        return select<string>(\"true\", \"false\", LOAD<T,bool>(buffer, 0));\n      }\n      let valueLen = 5; // max possible length of element len(\"false\")\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T,bool>(buffer, i);\n        valueLen = 4 + <i32>(!value);\n        copyUnsafeString(result, offset, select<string>(\"true\", \"false\", value), 0, valueLen);\n        offset += valueLen;\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, changetype<String>(separator), 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T,bool>(buffer, lastIndex);\n      valueLen = 4 + <i32>(!value);\n      copyUnsafeString(result, offset, select<string>(\"true\", \"false\", value), 0, valueLen);\n      offset += valueLen;\n\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isInteger<T>()) {\n      if (!lastIndex) {\n        return changetype<string>(itoa<T>(LOAD<T>(buffer, 0)));\n      }\n      const valueLen = (sizeof<T>() <= 4 ? 10 : 20) + <i32>isSigned<T>();\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T>(buffer, lastIndex);\n      offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isFloat<T>()) {\n      if (!lastIndex) {\n        return changetype<string>(dtoa(LOAD<T,f64>(buffer, 0)));\n      }\n      const valueLen = MAX_DOUBLE_LENGTH;\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T,f64>(buffer, i);\n        offset += dtoa_stream(changetype<usize>(result), offset, value);\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T,f64>(buffer, lastIndex);\n      offset += dtoa_stream(changetype<usize>(result), offset, value);\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isString<T>()) {\n      if (!lastIndex) {\n        return LOAD<string>(buffer, 0);\n      }\n      let estLen = 0;\n      for (let i = 0, len = lastIndex + 1; i < len; ++i) {\n        estLen += LOAD<string>(buffer, i).length;\n      }\n      let offset = 0;\n      let result = allocateUnsafeString(estLen + sepLen * lastIndex);\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<string>(buffer, i);\n        if (value) {\n          let valueLen = value.length;                          // tslint:disable-line:no-unsafe-any\n          copyUnsafeString(result, offset, value, 0, valueLen); // tslint:disable-line:no-unsafe-any\n          offset += valueLen;                                   // tslint:disable-line:no-unsafe-any\n        }\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<string>(buffer, lastIndex);\n      if (value) {\n        let valueLen = value.length;                          // tslint:disable-line:no-unsafe-any\n        copyUnsafeString(result, offset, value, 0, valueLen); // tslint:disable-line:no-unsafe-any\n      }\n      return result;\n    } else if (isArray<T>()) {\n      if (!lastIndex) {\n        value = LOAD<T>(buffer, 0);\n        return value ? value.join(separator) : \"\"; // tslint:disable-line:no-unsafe-any\n      }\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        if (value) result += value.join(separator); // tslint:disable-line:no-unsafe-any\n        if (hasSeparator) result += separator;\n      }\n      value = LOAD<T>(buffer, lastIndex);\n      if (value) result += value.join(separator); // tslint:disable-line:no-unsafe-any\n      return result;\n    } else if (isReference<T>()) { // References\n      if (!lastIndex) return \"[object Object]\";\n      const valueLen = 15; // max possible length of element len(\"[object Object]\")\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        if (value) {\n          copyUnsafeString(result, offset, changetype<String>(\"[object Object]\"), 0, valueLen);\n          offset += valueLen;\n        }\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, changetype<String>(separator), 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      if (LOAD<T>(buffer, lastIndex)) {\n        copyUnsafeString(result, offset, changetype<String>(\"[object Object]\"), 0, valueLen);\n        offset += valueLen;\n      }\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else {\n      assert(false); // Unsupported generic typename\n    }\n  }\n\n  @inline\n  toString(): string {\n    return this.join();\n  }\n\n  private __gc(): void {\n    var buffer = this.buffer_;\n    __gc_mark(changetype<usize>(buffer)); // tslint:disable-line\n    if (isManaged<T>()) {\n      let offset: usize = 0;\n      let end = <usize>this.length_ << alignof<usize>();\n      while (offset < end) {\n        __gc_mark(load<usize>(changetype<usize>(buffer) + offset, HEADER_SIZE)); // tslint:disable-line\n        offset += sizeof<usize>();\n      }\n    }\n  }\n}\n","import {\n  TypedArray,\n  FILL,\n  SORT,\n  SUBARRAY,\n  REDUCE,\n  REDUCE_RIGHT,\n  MAP,\n} from \"./internal/typedarray\";\n\nimport {\n  COMPARATOR\n} from \"./internal/sort\";\n\nexport class Int8Array extends TypedArray<i8> {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i8>();\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return FILL<Int8Array, i8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i8, b: i8) => i32 = COMPARATOR<i8>()): Int8Array {\n    return SORT<Int8Array, i8>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int8Array {\n    return SUBARRAY<Int8Array, i8>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int8Array, i8, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int8Array, i8, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: i8, index: i32, self: Int8Array) => i8): Int8Array {\n    return MAP<Int8Array, i8>(this, callbackfn);\n  }\n}\n\nexport class Uint8Array extends TypedArray<u8> {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u8>();\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return FILL<Uint8Array, u8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8Array {\n    return SORT<Uint8Array, u8>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint8Array {\n    return SUBARRAY<Uint8Array, u8>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8Array, u8, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8Array, u8, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: u8, index: i32, self: Uint8Array) => u8): Uint8Array {\n    return MAP<Uint8Array, u8>(this, callbackfn);\n  }\n}\n\nexport class Uint8ClampedArray extends Uint8Array {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u8>();\n\n  @inline @operator(\"[]=\")\n  protected __set(index: i32, value: i32): void {\n    super.__set(index, max(min(value, 255), 0));\n  }\n\n  @inline @operator(\"{}=\")\n  protected __unchecked_set(index: i32, value: i32): void {\n    super.__unchecked_set(index, max(min(value, 255), 0));\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return changetype<Uint8ClampedArray>(super.fill(value, start, end)); // safe because '.fill' reuses 'this'\n  }\n\n  sort(comparator: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8ClampedArray {\n    return changetype<Uint8ClampedArray>(super.sort(comparator)); // safe because '.sort' reuses 'this'\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint8ClampedArray {\n    return SUBARRAY<Uint8ClampedArray, u8>(this, begin, end);\n  }\n\n  map(callbackfn: (value: u8, index: i32, self: Uint8ClampedArray) => u8): Uint8ClampedArray {\n    return MAP<Uint8ClampedArray, u8>(this, callbackfn);\n  }\n}\n\nexport class Int16Array extends TypedArray<i16> {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i16>();\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return FILL<Int16Array, i16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i16, b: i16) => i32 = COMPARATOR<i16>()): Int16Array {\n    return SORT<Int16Array, i16>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int16Array {\n    return SUBARRAY<Int16Array, i16>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int16Array, i16, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int16Array, i16, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: i16, index: i32, self: Int16Array) => i16): Int16Array {\n    return MAP<Int16Array, i16>(this, callbackfn);\n  }\n}\n\nexport class Uint16Array extends TypedArray<u16> {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u16>();\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return FILL<Uint16Array, u16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u16, b: u16) => i32 = COMPARATOR<u16>()): Uint16Array {\n    return SORT<Uint16Array, u16>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint16Array {\n    return SUBARRAY<Uint16Array, u16>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint16Array, u16, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint16Array, u16, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: u16, index: i32, self: Uint16Array) => u16): Uint16Array {\n    return MAP<Uint16Array, u16>(this, callbackfn);\n  }\n}\n\nexport class Int32Array extends TypedArray<i32> {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i32>();\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return FILL<Int32Array, i32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i32, b: i32) => i32 = COMPARATOR<i32>()): Int32Array {\n    return SORT<Int32Array, i32>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int32Array {\n    return SUBARRAY<Int32Array, i32>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int32Array, i32, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int32Array, i32, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: i32, index: i32, self: Int32Array) => i32): Int32Array {\n    return MAP<Int32Array, i32>(this, callbackfn);\n  }\n}\n\nexport class Uint32Array extends TypedArray<u32> {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u32>();\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return FILL<Uint32Array, u32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u32, b: u32) => i32 = COMPARATOR<u32>()): Uint32Array {\n    return SORT<Uint32Array, u32>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint32Array {\n    return SUBARRAY<Uint32Array, u32>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint32Array, u32, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint32Array, u32, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: u32, index: i32, self: Uint32Array) => u32): Uint32Array {\n    return MAP<Uint32Array, u32>(this, callbackfn);\n  }\n}\n\nexport class Int64Array extends TypedArray<i64> {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<i64>();\n\n  fill(value: i64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return FILL<Int64Array, i64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i64, b: i64) => i32 = COMPARATOR<i64>()): Int64Array {\n    return SORT<Int64Array, i64>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int64Array {\n    return SUBARRAY<Int64Array, i64>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int64Array, i64, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int64Array, i64, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: i64, index: i32, self: Int64Array) => i64): Int64Array {\n    return MAP<Int64Array, i64>(this, callbackfn);\n  }\n}\n\nexport class Uint64Array extends TypedArray<u64> {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<u64>();\n\n  fill(value: u64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return FILL<Uint64Array, u64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u64, b: u64) => i32 = COMPARATOR<u64>()): Uint64Array {\n    return SORT<Uint64Array, u64>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint64Array {\n    return SUBARRAY<Uint64Array, u64>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint64Array, u64, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint64Array, u64, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: u64, index: i32, self: Uint64Array) => u64): Uint64Array {\n    return MAP<Uint64Array, u64>(this, callbackfn);\n  }\n}\n\nexport class Float32Array extends TypedArray<f32> {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<f32>();\n\n  fill(value: f32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return FILL<Float32Array, f32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f32, b: f32) => i32 = COMPARATOR<f32>()): Float32Array {\n    return SORT<Float32Array, f32>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Float32Array {\n    return SUBARRAY<Float32Array, f32>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float32Array, f32, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float32Array, f32, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: f32, index: i32, self: Float32Array) => f32): Float32Array {\n    return MAP<Float32Array, f32>(this, callbackfn);\n  }\n}\n\nexport class Float64Array extends TypedArray<f64> {\n  static readonly BYTES_PER_ELEMENT: usize = sizeof<f64>();\n\n  fill(value: f64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return FILL<Float64Array, f64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f64, b: f64) => i32 = COMPARATOR<f64>()): Float64Array {\n    return SORT<Float64Array, f64>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Float64Array {\n    return SUBARRAY<Float64Array, f64>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float64Array, f64, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float64Array, f64, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: f64, index: i32, self: Float64Array) => f64): Float64Array {\n    return MAP<Float64Array, f64>(this, callbackfn);\n  }\n}\n"]}