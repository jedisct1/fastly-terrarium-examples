{"version":3,"sources":["~lib/internal/allocator.ts","~lib/allocator/tlsf.ts","~lib/internal/arraybuffer.ts","assembly/index.ts","~lib/internal/string.ts","~lib/internal/typedarray.ts","~lib/memory.ts","~lib/internal/memory.ts","~lib/internal/number.ts","~lib/builtins.ts","~lib/array.ts","~lib/typedarray.ts","assembly/precomp.ts"],"names":[],"mappings":"82CC+IW,EAAK,kBACD,AAA0B,EAAK,GAA/B,GAAkC,QAsBtC,EAAK,kBACL,EAAK,kBAEV,AAA0B,AAAC,EAAK,GAAU,GAAa,GAAvD,GACA,QAlFK,KAAY,mBAEjB,AACE,EAA0B,GAAa,AAAC,KAAY,2BAgVnD,kBAEA,EAAM,AAAO,OAhRX,EAAK,kBACL,EAAK,kBAEV,AAA0B,AAAC,EAAK,GAAU,GAAa,GAAvD,SAvBK,EAAK,kBACK,AAA0B,EAAK,GAA/B,YAuHV,AADS,OACG,mBAEZ,AADI,EAAY,KACR,OAAkB,EAAO,UAAjC,kBAIH,EAAO,MAEJ,AAAM,EAAO,KADb,GAIA,AAAM,AAAC,EAAQ,AAAC,AADhB,AAAW,MACU,IAAY,KACtC,EAAM,MAKG,OACP,AAFO,SAED,EAAY,MAClB,IAAM,EAAY,MAGlB,AAAS,EAAa,EAAI,IAA1B,KACF,EAAa,EAAI,EAAI,IAGjB,AAAC,KAEH,EAAc,EAAI,AADN,EAAc,IACC,AAAC,AAAC,EAAK,WAG9B,AAAC,KAAO,OAAc,AAAC,AAAC,EAAK,gBAhN9B,KAAY,mBAEjB,AAAY,EAA0B,6BA2PjC,KAAY,mBACZ,IAAc,kBACd,KAAa,mBAElB,EAA2B,GAC3B,WAtJK,kBAEA,AADS,OACG,mBAGjB,AAAQ,KAAa,KAAU,OAAkB,EAAO,UAAxD,kBAGwB,sBAItB,AAHY,AADG,SAIH,KACd,EAAY,IACZ,EAAa,AAAc,AAAa,AAAC,EAAY,GAA1B,GAAb,QAEF,AADJ,YAMN,EAAY,KACW,sBAElB,AADQ,AADG,OAEA,mBAClB,EAAY,IACZ,EAAY,AAAa,AAAa,AAAC,EAAY,GAA1B,GAAZ,QAED,IADJ,KAKV,EAAa,EAAY,MACZ,EAAO,IAIb,AADA,EAAY,KACJ,OAAkB,EAAO,UAAjC,kBAcI,EAAa,AAVpB,EAAO,MAEJ,AAAM,EAAO,KADb,GAIA,AAAM,AAAC,EAAQ,AAAC,AADhB,AAAW,MACU,IAAY,KACtC,EAAM,MAIoB,MAC5B,EAAa,KACb,EAAa,KACT,IAAM,EAAY,MACtB,EAAa,EAAI,EAAI,IAGrB,OAAc,AAAC,EAAK,OACpB,EAAc,EAAI,EAAc,IAAM,AAAC,EAAK,YAiIrC,EAAS,kBACR,AAAC,EAAQ,kBACT,AAAC,EAAM,kBAIX,UACK,EAAS,EAAU,mBAGtB,EAAQ,GAAc,KAEb,OADX,EAAS,OAKJ,EAAS,EAA0B,qBAKxC,AADO,EAAM,KACN,OAOX,EAAY,AAAkB,AAAC,EAAW,GAA9B,AAFG,EAAO,GAEC,OACvB,EAAY,KACZ,EAAY,KAIZ,AADW,AAAkB,EAAQ,GAAO,KAChC,aAGZ,EAAY,OAQP,kBACO,SA/HL,EAAQ,OAAkB,EAAO,UAAjC,kBAIH,EAAO,MACJ,IACA,AAAM,EAAO,IAIb,AAAM,AAAC,EAAQ,AAAC,AADhB,AAAW,MACU,IAAY,KACtC,EAAM,KAEF,EAAK,KAAe,MACjB,OAAS,MAMb,AAFO,EAAc,IAAM,AAAC,EAAM,QAa9B,EAAa,EAAI,AAAS,OAR5B,AADO,KAAa,AAAC,EAAM,AAAC,EAAK,SAKrB,EAAc,AADxB,AAAW,0BAET,EAAa,EAAI,AADhB,OAHD,UA4BJ,AADS,OACG,mBACZ,EAAQ,OAAkB,EAAO,UAAjC,kBACC,AAAC,EAAO,kBAEhB,EAAY,IAIR,AADY,AAAC,EAAY,GAAS,KACrB,KACf,EAAa,AAAO,AAAC,EAAY,GAApB,MAKb,AAHY,AACV,EAA2B,GAAa,KAE7B,AAAC,EAAY,GAAc,MACxC,EAAY,KAIZ,EAAa,EAAY,MACC,sBAAP,EACnB,KAAc,OAGT,EAA2B,SAuEhC,AAAC,AADM,OAKL,EAAc,AAFA,SAEe,AAAY,EAAc,KAAe,WAC5D,MAAP,cAEP,IAAa,KACQ,MAAG,EAAK,KAC3B,IAAc,EAAI,IACC,MAAG,EAAK,KACzB,IAAa,EAAI,EAAI,IADe,WAFA,WAMxC,IAAe,IAA+C,EAAiB,MAI7E,EAAO,aAMP,AAAC,AADO,EAAY,AAFjB,AAAW,AAAC,EAAO,GAAW,sBAS/B,AAAY,AADM,AAFJ,IAEiB,AADjB,AAAM,AAAC,AAAC,EAAO,KAAU,KAAa,eAEzB,KACzB,AAAY,IAAe,QAKjC,EAAe,EAAsB,GAAI,AADxB,EAC6C,KAC/C,EAAY,gCAGR,GAAU,mBACxB,EAAS,EAAc,SC1cvB,EAAmB,sBAOf,AAFA,gBAEQ,aK8Jf,AAAC,OACK,EAAM,KACN,EAAO,GAAI,GAAG,KACpB,EAAK,OAEC,EAAO,GAAG,KACV,EAAO,GAAG,KACV,EAAO,KAAI,GAAG,KACd,EAAW,GAAG,KACpB,EAAK,OACC,EAAO,GAAG,KACV,EAAO,GAAI,GAAG,KACpB,EAAK,OAWE,AAPH,AADO,EAAC,GAAO,KACvB,KAOiB,KACN,AAAO,AAPlB,EAAK,GACA,KAMM,GAAW,GAAG,KACrB,EAAK,OACE,EAAO,GAAG,KACV,EAAO,GAAG,KACV,EAAO,KAAI,GAAI,KACf,EAAW,GAAG,KACrB,EAAK,OACE,EAAO,GAAI,KACX,EAAO,GAAI,KACX,EAAO,GAAI,KACX,EAAO,GAAI,KACX,EAAO,KAAI,GAAI,KACf,EAAW,GAAI,KACf,EAAW,GAAI,KACf,EAAW,GAAI,KAIlB,AADJ,AAAK,AAAC,EAAO,GAAb,KACJ,KACA,EAAK,OAIE,EAAK,KACC,EAAM,KACN,EAAO,GAAG,KACV,EAAO,GAAI,KACX,EAAO,GAAI,KACtB,EAAK,KACL,EAAQ,YD5MiC,AAAkB,SDjBvD,EAAc,sBCRX,ADWK,AADC,AADI,MAEuB,GCXxB,qCDYhB,EAAc,KACd,EAAkB,KAClB,EAAkB,qBAqBd,EAAc,AAAM,qBHiCjB,AAA6D,AGhCtB,KHgCvC,AAA4B,EAA5B,AGhCY,OHgCoE,UG5DnF,EAAc,qBCRX,ADWK,AADC,AAAe,AADX,EAAU,SAEa,GCXxB,qCDYhB,EAAc,KACd,EAAkB,KAClB,EAAkB,qBAqBd,EAAc,AAAM,KAAoB,mBHiCrC,AAA6D,AGhCtB,KHgCvC,AGhCY,KHgCgB,AAAC,EAAgB,KAAmC,UCyX/E,AARc,MAUA,AOnZf,SPmZ4B,EAAI,KACnC,EAAE,EAAU,kCAD8B,2VAk6B1B,AE90Cb,SF80CuB,EAAI,KAC9B,EAAE,EAAK,IAD4B,gBEz0CnC,EAAc,AAAM,qBHwCsF,AAA3F,AAA6D,AGvC7C,KHuChB,AAA4B,EAA5B,AGvCJ,eFu1CX,AAHM,aAGO,AAAQ,KAAR,MAAb,IACO,IAEE,QAAG,EAAI,KACX,EAAE,IAAK,EAAE,KAAd,KADuB,WAGpB,QAhwCE,AAAe,WAER,EAAI,MAChB,EAAG,EAAK,EAAG,UADW,mBEjBf,AApFJ,OAqFL,AM7BoC,EN6B5B,KAAW,AAAI,AAAS,EAAT,cACd,AAAI,aACb,EAAM,KAAS,AAAI,AAAS,EAAT,cACZ,AAAI,uBAEF,AADD,ACnFiD,MDoFzC,QACT,EAAO,AAAwB,EAAxB,AAAK,SACZ,EAAO,AAAC,EAAM,MMpCyB,KNnD5C,EAAc,AAAM,KAAoB,mBHwCkE,AAA3F,AAA6D,AGvC7C,KHuChB,AGvCJ,KHuCgC,AAAC,EAAgB,gBCFxD,AAAgB,MAChB,AAAgB,MAChB,AAAgB,MAChB,AAAgB,QAGR,EAAI,UACS,AAAhB,IAAqB,SAAvB,IAAO,IAAd,EAAE,UADmB,WAGf,MACH,EAAK,MACK,MAAG,EAAI,KAChB,EAAE,OAAe,AAAC,EAAK,GAAK,SADN,WAGb,MAAG,EAAI,MACH,MAAG,EAAI,KAChB,EAAE,EAAK,EAAE,MADY,WAGrB,EAAE,IAAK,AArEZ,AAAK,AAqEc,EAAE,MArEb,GAAM,AAAK,EAAG,IAAM,AAAK,EAAG,KAqET,AAzD3B,AAAC,AAyD6B,EAAE,MAAI,EAAE,KAzD5B,AAyDgC,EAAE,IAzDjC,AAAC,0CAyD6C,EAAE,EAAI,QAC9D,EAAE,EAAK,EA1E8B,AAAtC,AAAK,AA0Ec,EAAE,MA1Eb,GAAM,AAAK,EAAG,IAAM,AAAK,EAAG,KA0ET,AAtD3B,AAAC,AAsD8B,EAAE,MAtD5B,AAsDgC,EAAE,OAtD7B,AAAC,EAAI,AAsD4B,EAAE,QAtDzB,AAAK,EAAJ,OAuDpB,EAAE,EAAF,MAAQ,KACK,MAAG,EAAI,KAChB,EAAE,AAAC,EAAI,KAAK,GAAK,EAAE,cAEnB,AAAC,EAAI,GAAQ,OACA,MAAG,EAAI,KAChB,EAAE,EAAF,MAAQ,EAAE,AAAC,EAAI,GAAK,KAAM,AAzEnC,AAAK,AAyEqC,EAAE,AAAC,EAAI,KAAK,OAzE9C,GAAK,AAAK,EAAG,IAAK,AAAC,EAAK,KAyE6B,AArE7D,AAAK,AAqE+D,EAAE,AAAC,EAAI,GAAM,OArEzE,GAAM,AAAK,EAAG,IAAM,AAAC,EAAK,mBAyDX,WAgBb,MAAG,EAAI,KAChB,EAAE,EAAF,MAAQ,EAAE,OACV,EAAE,EAAK,EAAE,MAFY,WAIzB,EAAO,MACP,EAAK,UAEI,MAAG,EAAI,KACI,EAAE,WAAV,EAAK,SADI,mBAiCnB,AALE,EAAY,eAKQ,QAAnB,EAAW,EAAG,AAFd,EAAO,AADP,GAAM,sEAKf,EAAK,KACE,IAKH,EAJA,AAHJ,EAAK,KAGK,MACM,EAAI,EAAG,MACf,aAEO,EAAI,MAAf,IAEI,AADK,AAAY,EAAI,EAAW,UAAM,MACjC,KACC,IAA6B,IAhJvB,IAAS,AEoBtB,AF4HU,EAAW,AAAM,EAAN,GAAU,GQrEJ,mBR3EK,EAAI,KACvC,EAAE,EAAI,GAAK,ADgEI,AAA6D,AGlC7C,KHkChB,AAA4B,EAA5B,AGlCJ,YF/BmC,WAiJrC,EAAL,iBAOA,EAAY,GQ7Ec,URgF5B,AAFE,AAAe,SAzJM,AEoBtB,AFuIE,EAAW,EAAG,aA3JgB,EAAI,KACvC,EAAE,EAAS,ADgEI,AAA6D,AGlC7C,KHkChB,AGlCJ,KHkCgC,SCjEG,WA4JlD,EAAE,EAAK,KAEP,EAAE,AADE,GAAM,AAAC,AAAM,EAAI,IAAQ,MACvB,GAAK,SACA,EAAI,IAAG,EAAK,OACX,EAAI,EAAG,KACN,MAAG,EAAI,MAChB,EAAI,EAAK,EAAG,UADU,gBAOlB,AAAY,AADX,IACe,EAAG,EAAG,MAEnB,EAAI,EAAK,EAAG,OAq3CN,qBAcb,AAAY,EAAI,EAAG,AAHf,AEthDD,OFyhDmB,yCADrB,GAAL,WAgBW,EAAI,AAJP,AAAe,OAIL,aAAY,sBAanB,IAAI,IAEE,UA3fL,AAAe,OACN,AAAe,MAGhC,AAFO,OAEA,MAEA,AElkCJ,AFikCC,AAAK,YAGb,EAAe,EAAK,IAQhB,AAAY,EAAI,EAAgB,EADhC,AAAY,EAAI,EAAO,GADvB,AAAY,EAAI,EAAI,EADpB,AAAY,EAAI,EAAO,GAAM,AAAC,AAAU,EAAT,GAAiB,KADhD,AAAY,EAAI,EAAG,EADnB,AAAY,EAAI,EAAgB,EADhC,AAAY,EAAI,EAAG,EAAI,kBAOX,EAAI,EAAY,EQthCE,QRshCG,EAAI,YAv1B5B,QAAI,EAAK,KACV,IACA,EAAI,KACH,EAAE,MACE,EAAI,SAAI,EAAI,KACuB,SACpC,AAAC,AADA,AAAU,oBAAO,GAAQ,KAAa,EAAI,AAAC,EAAI,cAAtB,AAAK,EAAL,OACpB,IAAQ,KACtB,EAAE,EAAK,EAAK,EAAQ,OAHM,WAK9B,EAAE,EAAF,MAAQ,KACR,EAAE,EAAK,IAViB,WAYpB,IACK,QAAG,EAAI,KACiC,SACzC,AADC,AAAU,oBAAO,GAAQ,mCAAU,OAC9B,KACd,EAAE,EAAK,EAAK,MAHU,WAKb,QAAG,EAAI,aACa,IAAH,SAA1B,EAAE,EAAF,EAAQ,iBAAU,MADI,WAGb,QAAG,EAAI,KD9N0F,AAA3F,AGlCgB,KHkChB,AGlCJ,KHkCgC,AGlCnB,AFiQH,ID/NuC,UCgO5D,EAAE,EAAI,KAAN,MAAY,EAAM,MAClB,EAAE,EAAK,kBAKH,AAxEc,WA0EN,EAAI,MAChB,EAAE,EAAK,EAAE,WACT,EAAE,EAAK,IAFe,WAInB,EAAG,gBAgUM,EAAI,KAChB,EAAE,EAAF,MAAQ,OACJ,EAAE,IAAM,KACZ,EAAE,AAAC,EAAI,KAAP,MAAc,EAAI,MAClB,EAAE,EAAF,MAAQ,EAAK,cAEjB,EAAE,EAAF,MAAS,OAED,AADJ,EAAE,IAAO,KACD,KAAZ,EAAE,EAAF,MAAQ,AAAQ,AAAK,EAAL,GAAR,MACR,EAAE,EAAF,MAAS,EAAK,cAaN,AAAe,UAEP,EAAI,KACP,EAAE,MACE,QAAG,EAAI,OACV,EAAJ,SAAF,EAAE,EAAU,KAAe,KAAE,YAAjB,GAAZ,KADsB,WAFJ,WAMZ,IAAG,IAjBJ,QAAG,EAAI,KAChB,EAAE,EAAF,MAAQ,AAAY,EAAE,EAAI,KAAlB,MADc,WA7I1B,EAAE,kBACe,AA+IF,SA/If,AA+IY,IA/IV,kBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,ED3b4G,AAA3F,AGlCgB,KHkChB,AGlCJ,KHkCgC,UC6jBlC,IACA,gBAwFL,MACA,MACA,MACA,MACA,MACA,MACA,MACA,AAxSc,MAgSd,IAUM,OAAK,gDACR,IAAG,OAAK,oDACP,EAAG,EAAG,IACP,IAAG,OAAK,oDACR,IAAG,OAAK,oDACP,EAAG,EAAG,IACN,EAAG,KAAK,OACR,EAAG,EAAG,IACN,EAAG,KAAK,OACN,AAAH,MAAM,iDACN,IAAG,IAAG,iDACN,IAAG,IAAG,IAtIJ,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,WAuIf,IAAM,iDACN,IAAG,IAAG,IA9IJ,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,WAgJd,KAAK,EAAG,IACR,KAAK,EAAG,IACR,KAAK,EAAG,IACR,KAAK,EAAG,gHArDhB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,OAuHD,SAAK,kXACL,SAAK,kXACL,SAAK,kXACL,SAAK,kXAEL,SAAK,kXAGJ,MAAG,EAAK,MACb,AAAC,EAAE,AAAC,EAAM,SAAQ,AAAC,EAAU,IAAM,KAEvC,IAAM,iEACN,EAAM,oDACN,EAAM,aArHE,SAAK,qXACL,SAAK,AAqHH,qXApHF,SAAK,qXACL,SAAK,qXAoHT,EAAG,IAhFM,OAAL,mBAiFG,yzBAhFE,OAAL,m0BACK,OAAL,i0BACK,OAAL,aAxPZ,EAAE,EAAM,AAAC,6BADE,GACX,KACA,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,qCAAqC,MAC9C,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,kBD/coG,AAA3F,AGlCgB,KHkChB,AGlCJ,KHkCgC,SC+cE,MA+SrB,qBAzJpB,AAhPc,wBAkPP,SAAH,6VACC,SAAK,EAAK,aAEP,EAAG,EAAG,IAFM,mBA1BhB,EAAG,EAAG,IAgCN,EAAG,EAAG,IAlMlB,EAAE,kBACF,AAkMY,IAlMV,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,ED3b4G,AAA3F,AGlCgB,KHkChB,AGlCJ,KHkCgC,kBCodvC,MAxCR,AAyCQ,AAhGc,MAuDpB,kBACe,AA0CF,SAAH,EA1CV,kBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBA6BW,IACA,IACA,IACA,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,OACD,QAAG,EAAI,KACP,EAAE,EAAI,SACf,EAAE,EAAK,EAAE,IAAK,KAAS,AAAC,AAAC,EAAM,GAAM,MACrC,EAAE,EAAS,EAAK,OAHM,WAK1B,EAAE,EAAM,EAAE,IAAM,KAAS,AAAC,AAAC,EAAE,IAAO,GAAM,MACtC,AAAC,EAAE,IAAO,GAAM,KACpB,EAAE,EAAF,MAAS,OApCb,EAAE,QAAM,AAAsC,AADnC,AAAC,AAsCU,EAAI,GAtCT,QACT,mBAqCW,cApCnB,EAAE,EAoCc,MApCR,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,qCAAqC,MAC9C,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,kBD/coG,AAA3F,AGlCgB,KHkChB,AGlCJ,KHkCgC,SC+cE,MAYxB,WAYZ,QAAG,EAAI,KAEhB,EAAE,AAAI,EAAJ,KAAa,AADN,EAAE,OACS,MACpB,EAAE,EAAQ,GAAK,EAAM,KAHC,kBA8Cd,AAFJ,AA1Jc,MA4JP,IAEF,QAAG,EAAI,KACX,EAAE,SAAP,KADoB,WAGjB,EAAM,QAxBD,AAFJ,AAvIc,MAyIP,IAEP,EAAE,IAAK,WAKJ,AADA,AAnJW,QAoJL,QA2BD,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,WAxH1B,EAAE,kBACe,AA6FF,SA7Ff,AA6FY,IA7FV,kBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,EAAgB,oBAClB,EAAE,EAAgB,4CAKmB,AA2EtB,SA3Ef,EAAE,EAAF,EAAQ,AAAsC,AADnC,AAAC,AAAC,MAAI,QACT,WAAC,OA2EG,UA1EZ,EAAE,EAAM,AAAC,mCAAqC,GAA9C,KACA,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,qCAAqC,MAC9C,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,kBD/coG,AAA3F,AGlCgB,AFifI,KD/cpB,AGlCJ,KHkCgC,SC+cE,SAgErC,EAAG,EAAG,AAAkB,gCA8TY,MAA6B,MAC9D,MAFN,QAIG,EAAI,EAAI,YAER,EAAG,EAAG,IACN,EAAG,EAAG,IAEH,EAAG,IACN,EAAG,EAAG,IACN,EAAG,EAAG,IAXW,EA9Pd,EAAG,IA4QN,EAAK,EAAK,IAbH,IAcM,IAAK,6CACnB,IAAmB,iDAClB,EAAc,EAAG,IACC,AAAnB,MAhUE,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,WAiUT,AAAc,MACd,AAAc,MACd,AAAc,MACnB,EAAU,EAAG,cAEA,AAAC,EAAa,kCAAxB,cAAH,ixBACD,EAAG,IAEM,EAAb,WA6DI,MAAqB,MAAwB,MAAqB,MAC9D,MAAmB,MAAmB,MAAmB,MAC1D,YAAsC,MAAwB,MACnE,MAAmB,MAAwB,MAAsB,MAChE,MACF,OAA2B,OAHF,IAKlB,AAFW,SAER,AAFD,sDAGN,IAAK,IAAG,iDACP,EAAI,EAAI,IACR,EAAI,EAAG,YAGP,EAAS,EAAI,IAEJ,EAAU,EAAW,KAC9B,EAAM,EAAU,IAChB,EAAM,EAAU,IAChB,EAAO,EAAM,IACb,EAAO,EAAO,IAEd,EAAI,EAAG,IACP,EAAI,EAAG,IACP,EAAM,EAAM,IAEZ,EAAS,EAAG,IACX,AAAkB,2BAEf,SAAJ,mXACI,SAAJ,+VArhBZ,EAAE,kBACe,AAqhBI,SArhBrB,AAqhBY,IArhBV,kBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,EAAgB,4BAygBF,uDAAJ,yxBACI,uDAAJ,yxBArgByB,AAsgBhB,SAtgBrB,EAAE,EAAF,EAAQ,AAAsC,AADnC,AAAC,AAugBe,EAvgBV,QACT,8BAsgBI,UArgBZ,EAAE,EAAM,AAAC,mCAAqC,GAA9C,KACA,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,qCAAqC,MAC9C,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,kBD/coG,AAA3F,AGlCgB,AFifI,KD/cpB,AGlCJ,KHkCgC,SC+cE,MAyfrC,EAAS,EAAI,IACb,EAAI,EAAI,AAAkB,MAE3B,IAAI,IAAG,IAvaL,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,WAwad,EAAI,EAAS,IACd,EAAI,IACH,EAAG,gFA2LN,AAAe,OACZ,AAAe,OAChB,AAAe,OAClB,AAAe,OACZ,OACF,IAGH,EAAI,IAOC,EAAI,EAAO,AAAK,EAAL,GADlB,EAAgB,EAAG,EALnB,KAAW,KACP,AAAkB,EAAO,EAAG,KAE5B,AAAY,EAAI,EAAY,UAAK,EAAI,SAIvC,IA1tCuB,AEoBtB,AFssCI,EAAY,mBA1tCgB,EAAI,KACvC,EAAE,EAAI,GAAK,mBADmC,WA4tCzC,IACM,EAAG,IACJ,EAAK,IAGf,AAAY,AADX,IACe,EAAK,GAAI,MAElB,EAAI,EAAM,AAAK,EAAL,GADjB,AAAY,EAAI,EAAG,EAAM,MAEpB,IACI,MAAG,EAAI,KAChB,EAAE,EAAK,EAAM,WADS,WAGb,MAAG,EAAI,KACH,MAAG,EAAI,OACd,EAAI,SAAN,EAAE,EAAU,AAAU,kBAAmB,ADzqC6D,AAA3F,AGlCgB,KHkChB,AGlCJ,KF2sCsC,SAA7C,KADsB,WADJ,WAKnB,EAAa,EQlqCc,QRkqCT,SAuJX,AADJ,AAAe,OACN,EAAG,EAAI,WAnrChB,AE7LH,WF+LS,EAAI,KACX,EAAE,IAAP,KADuB,WAGpB,UAoCgB,IAAO,MAIR,cAAG,AADrB,mBAGK,AAAC,AAAC,AD/LmG,AAA3F,AAA6D,AGlC7C,KHkChB,AAA4B,EAA5B,AGlCJ,YFiOC,AAFJ,AAAU,UAEA,GAAK,GAAvB,KACK,AAAC,AAAC,EAAK,GAAK,OAAM,GAAvB,KACK,KAEF,cAwqBC,AAAC,AAAC,EAAE,IAAM,IAAQ,OACb,QAAI,EAAI,KACZ,EAAE,IAAK,SAAZ,KADoB,WAMhB,EAAI,AAAC,AAAC,AAHV,AAAC,EAAI,GAAM,GAGI,AAFX,AAAC,GAAyB,AAAC,EAAE,UAAe,IAE5B,EAAE,UAAM,YAnYvB,OACI,QAAG,EAAI,KAChB,EAAE,EAAK,ADjfQ,EAA4B,AAAC,EAAgB,SCgftC,WAG1B,EAAE,EAAF,MAAS,aAmYM,MAAmB,MAAmB,MAC5C,MAAmB,MAAqB,MAAqB,MAC9D,MAAuB,AAngBT,MAqgBlB,AAAC,AAAqB,OACf,IAEG,EAAI,YAGF,0BAAJ,kWACG,AAAJ,IAAQ,qDAGH,0BAAJ,kWACD,IAAQ,iDAvTP,EAAG,EAAG,IA0TN,EAAG,EAAG,IACJ,IAAW,AAAd,mDACG,AAAH,MAAM,iDAEL,EAAQ,EAAG,IAEN,AAAqB,EAAU,EAAW,MAC1C,OAAS,OAAS,OAEvB,AAFJ,OAEO,EAAU,IACb,EAAG,EAAU,IACb,EAAG,EAAG,IAEN,EAAG,EAAG,IACD,AAAH,AAAH,QAxXE,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,WAyXf,EAAG,IACF,EAAG,EAAI,IA5enB,EAAE,EAAe,AA8eF,kBAAH,EA7eV,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,ED3b4G,AAA3F,AGlCgB,AF6djB,KD3bC,AGlCJ,KHkCgC,UC25B3C,IACc,IAAH,IAxXF,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,YA0Xd,EAAG,EAAG,IAEV,AAAC,AAAE,GAAc,AAAC,AAAkB,IAAK,IAAO,AAAc,WOh8B1C,yBAC5B,EADa,KAEb,EAAe,KJlCR,AIoCL,EAA4B,GJpCd,q0CH4rBZ,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OAuVV,iCAAS,wXACT,iCAAS,wXACT,iCAAS,wXACT,iCAAS,64DAER,MAAG,EAAI,uCACC,EAAI,6jDACV,IAFW,uCAnEd,SAAK,qXACL,AAuEL,WAvEU,qXACL,SAAK,qXApOjB,AAqOY,OArOV,EAAe,AAqOA,qBApOjB,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBA4RW,OAAK,EAAK,KACf,AAAC,EAAE,AAAC,EAAM,SAAQ,AAAC,EAAU,IAAM,KACnC,EAAG,IACH,EAAG,IACH,EAAG,IACH,EAAG,yCACoB,AAAC,AAAC,EAAI,GAAQ,GAAW,yzGACzB,AAAC,AAAC,EAAI,GAAQ,GAAW,i0BAA/C,0/EACsB,AAAC,AAAC,EAAI,GAAQ,GAAW,yzGACzB,AAAC,AAAC,EAAI,GAAQ,GAAW,i0BAA/C,0/EACsB,AAAC,AAAC,EAAI,GAAQ,GAAW,yzGACzB,AAAC,AAAC,EAAI,GAAQ,GAAW,i0BAA/C,0/EACqB,AAAC,AAAC,EAAI,GAAQ,GAAW,yzGACzB,AAAC,AAAC,EAAI,GAAO,GAAW,i0BAA7C,0/EACqB,AAAC,AAAC,EAAI,GAAO,GAAW,yzGACxB,AAAC,AAAC,EAAI,GAAO,GAAW,i0BAA7C,0/EACqB,AAAC,AAAC,EAAI,GAAO,GAAW,yzGACxB,AAAC,AAAC,EAAI,GAAO,GAAW,i0BAA7C,0/EACqB,AAAC,AAAC,EAAI,GAAO,GAAW,yzGACxB,AAAC,AAAC,EAAI,GAAO,GAAW,i0BAA7C,w/EACqB,AAAC,AAAC,EAAI,GAAO,GAAW,oxGAtDrC,eAAL,mBAuDkB,AAAC,AAAC,EAAI,GAAO,GAAW,0zBAtDrC,OAAL,AAsDH,m0BArDQ,OAAL,i0BACK,OAAL,aAxPZ,EAAE,EAAM,AAAC,6BADE,GACX,KACA,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,qCAAqC,MAC9C,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,kBD/coG,AAA3F,AGlCgB,AFifI,KD/cpB,AGlCJ,KHkCgC,SC+cE,MA8RzC,EAAG,IAtBe,EAAK,kBA9kBf,EAAI,KACX,EAAE,IAAK,EAAE,KAAd,KADsB,WAGnB,SAoiCH,AA9NY,WA8Ne,AAAC,AAAQ,EAAa,gBAC1C,wEAGP,AAAC,AAAgB,EAAG,EAAI,OACjB,IAEH,AAAe,OAEf,AAAY,AADX,IACe,EAAK,EAAI,MAC7B,AAAY,EAAI,EAAI,EAAI,MACxB,AAAY,EAAI,EAAG,KAAU,MACtB,EAAI,EAAG,AAAU,AEzuCrB,KFyuCW,GAAoB,IAC7B,wEAp0Be,AAAF,MAw0BX,EAAG,EAAG,IACF,EAAG,EAAa,EQxrCG,URyrC9B,EAAG,IAHM,EAKS,IAEN,EAAQ,EAAa,EAAG,SAyIpC,KAAe,qBAGf,KAAc,oBAGS,EAAK,EAAG,SAvN3B,AAAe,uCAngBnB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OA6wBhB,EAAG,IACM,EAAG,IACJ,EAAY,EQ1nCQ,QR0nCH,SA2N3B,KAAgB,oBAGX,AAAe,WACR,EAAI,KAChB,EAAG,EAAK,EAAK,UADS,WAGL,WAYZ,AAAe,UAER,EAAI,KAChB,EAAG,EAAK,EAAG,EAAI,WADQ,kBAalB,AAAe,UAER,EAAI,KAChB,EAAG,EAAK,EAAG,UADY,mBAjzBnB,AA7Nc,wBA+NP,SAAH,6VACC,SAAK,EAAK,aAEP,EAAG,EAAG,IAFM,2BAMhB,EAAG,EAAG,oBAGN,EAAG,EAAG,IAhBN,EAAG,EAAG,IAkBN,EAAG,EAAG,IApLlB,EAAE,kBACe,AAoLF,SApLf,AAoLY,IApLV,kBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,ED3b4G,AAA3F,AGlCgB,KHkChB,AGlCJ,KHkCgC,2BC+rBhC,AADN,MACU,OAHV,EAIO,KAAK,IAHZ,EAIO,KAAK,IACT,EAAG,IACf,EAAE,EAAF,MAAS,AAAmB,IAAc,8CAvEtC,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,OA4bJ,AAAe,OACZ,AAAe,OAChB,AAAe,OAClB,AAAe,OACZ,OACF,IAGH,EAAI,IAOC,EAAI,EAAO,AAAK,EAAL,GADlB,EAAgB,EAAG,EALnB,KAAW,KACP,AAAkB,EAAO,EAAG,KAE5B,AAAY,EAAI,EAAY,UAAK,EAAI,SAIvC,IA5oCuB,AEoBtB,AFwnCI,EAAY,mBA5oCgB,EAAI,KACvC,EAAE,EAAI,GAAK,mBADmC,WA8oCzC,IACM,EAAG,IACb,EAAK,IAGN,AAAY,AADX,IACe,EAAK,GAAI,MAElB,EAAI,EAAM,AAAK,EAAL,GADjB,AAAY,EAAI,EAAG,EAAM,MAEpB,IA7vBT,EAAE,EAAF,MAAQ,MACR,EAAE,EAAM,AAAC,EAAE,IAAM,IAAO,MA8vBX,MAAG,EAAI,KAChB,EAAE,EAAK,EAAM,WADS,WAGb,MAAG,EAAI,KACH,MAAG,EAAI,OACd,EAAI,SAAN,EAAE,EAAU,AAAU,kBAAmB,AD5lC6D,AAA3F,AGlCgB,KHkChB,AGlCJ,KF8nCsC,SAA7C,KADsB,WADJ,WAKnB,EAAa,EQrlCc,QRqlCT,SAoTT,AADN,AAAe,OACJ,EAAG,EAAI,WAvlBxB,AAAS,MACF,IAEE,AAAC,EAAE,IAAM,IAAQ,MACjB,QAAI,EAAI,KACZ,EAAE,IAAK,QAAZ,KADsB,WAMlB,AAAC,AAHL,AAAC,EAAI,GAAM,GACP,AAAC,GAAoB,AAAC,EAAE,SAAe,IAE9B,eA7cO,AAAF,MA8Hd,EAEO,IAFiB,EAGjB,IAEC,EAAG,UAiRX,MACE,kBAGC,MACA,MACA,AA9ZW,MAuDL,AAyWA,SAzWjB,AAyWY,OAzWV,eACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,qBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,sBACF,EAAE,ED3b4G,AAA3F,AGlCgB,AF6djB,KD3bC,AGlCJ,KHkCgC,UCsxBjC,KAAK,IAPT,EAQK,WAPL,EAQO,EAAK,IACN,AAAL,MAAU,gDACL,OAAK,AAAV,MA5PE,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,2BA+Pd,EAAM,EAAM,IACZ,EAAG,EAAM,IACT,EAAG,EAAG,IACH,EAAG,IACN,EAAG,EAAG,IACN,EAAG,EAAG,IACN,EAAG,EAAG,IACN,KAAK,EAAG,IACV,IAAK,WACH,EAAK,EAAK,IAClB,AAAC,AAAU,EAAK,OACJ,KAAK,KAAK,KA1Nd,AA4NF,IA5NK,AA4NA,OA5NG,IA6NN,EAAK,EAAK,IAClB,AAAC,AAAU,EAAK,OACT,IAEP,AAAC,AAAkB,OAAe,AAAC,EAAE,QAAO,IAAQ,QACzC,OAAK,IAAW,OA5QlB,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,YA8Qd,KAAK,KAAK,iBAiTlB,AAAC,AAAY,UAAb,AAAoB,AAAW,aAAO,AAAC,AAAQ,EAAa,mBACrD,wEAGP,AAAC,AAAO,EAAG,EAAI,OACR,IAEH,AAAe,OAEf,AAAY,AADX,IACe,EAAK,EAAI,MAC7B,AAAY,EAAI,EAAI,EAAI,MACxB,AAAY,EAAI,EAAG,KAAU,MACtB,EAAI,EAAG,AAAU,AE5pCrB,KF4pCW,GAAoB,IAC7B,oCApfL,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OAIE,AAAF,MA2vBX,EAAG,EAAG,IACF,EAAG,EAAa,EQ3mCG,UR4mC9B,EAAG,IAHM,EAIA,IAEG,EAAQ,EAAa,EAAG,SAuSpC,KAAe,qBAGf,KAAc,oBAGW,EAAK,EAAG,UAtX7B,AAAe,uCApbnB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OA8rBhB,EAAG,IA3tBT,EAAE,EAAF,MAAQ,MACR,EAAE,EAAM,AAAC,EAAE,IAAM,IAAO,MA4tBT,EAAG,IACb,EAAY,EQ5iCiB,QR4iCZ,SAyXlB,KAAgB,oBAGX,AAAe,WACR,EAAI,KAChB,EAAG,EAAK,EAAK,UADS,WAGH,YAt0Cd,AADD,AAAe,OACH,GQtGc,UR0G5B,IAHF,KAAW,MACP,AAAK,+DAGG,EAAI,MAChB,EAAE,EAAF,MAAQ,MADe,WAGrB,QAzLuB,WAAU,EAAI,KACvC,EAAE,EAAS,ADgEI,AGlCgB,KHkChB,AAA4B,EGlChC,YF/BmC,WA0LrC,QAAG,EAAI,MAChB,EAAG,EAAH,MAAS,KADc,WAInB,AAAY,AADX,IACe,EAAI,GAAK,MAC7B,AAAY,EAAI,EAAG,KAAU,MACtB,EAAI,EAAG,AAAM,KAAN,IAAgB,IAEtB,OAm5CK,AAAJ,EAAG,eAnyCA,EAAI,MAEhB,EAAE,EAAK,AADC,EAAE,IAAK,KACJ,MACH,AAAC,EAAM,KAHO,mBAWlB,AA1Fc,MA2Fd,AA/Fc,WAiGN,EAAI,KACP,EAAE,MACE,QAAG,EAAI,OACd,EAAI,SAAN,EAAE,EAAU,ADlQ0F,AAA3F,AAA6D,AGlC7C,KHkChB,AGlCJ,KHkCgC,AAAC,EAAgB,QCkQ5C,GAAZ,KADsB,WAFJ,WAMlB,IACD,EAAG,IACG,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,WADa,WAGb,QAAI,EAAI,MACjB,EAAE,EAAK,IADgB,cAMpB,EAAG,EAAG,aAIG,EAAI,KACX,EAAG,IADqB,WAG1B,EAAG,EAAG,UAIH,MACD,WACO,EAAI,KAChB,EAAG,EAAK,EAAE,WADY,0EAGhB,EAUA,IATC,EAUA,IATD,EAUE,EAAK,IATN,EAUE,EAAK,IATP,EAUE,EAAK,IATN,EAUE,EAAK,IATP,EAUE,EAAK,IATP,EAUE,EAAM,IACb,AAVC,IAUE,EAAO,IAER,EAAG,GAAS,IACZ,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAG,IACN,EAAG,EAAG,IACN,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAG,IACN,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAO,IACV,EAAG,EAAG,IACN,EAAG,EAAO,IACV,EAAG,EAAG,IACN,EAAG,EAAO,IAEN,QAAG,EAAI,KAChB,EAAE,EAAI,KAAN,MAAY,EAAE,IAAM,MACpB,EAAI,EAAK,EAAE,wBA2sCG,AAAD,UAUC,AAAe,OAC7B,KAAW,QAAM,KAAW,OAA5B,mBAGE,QA5mDuB,AA4mDnB,WA5mD6B,EAAI,KACvC,EAAE,EAAS,ADgEI,AAA6D,AGlC7C,KHkChB,AAA4B,EAA5B,AGlCJ,YF/BmC,WA6mDzC,IACD,AA34Cc,MA44CT,QAAG,EAAI,KAChB,EAAE,EAAK,EAAG,UADY,kBAatB,AExmDG,KFwmDU,oBAGb,AAAC,EAAE,IAAM,qBAGL,AA/5Cc,UAg6CN,EAAI,KAEhB,EAAE,EAAK,AAAY,EAAZ,AAAC,AADC,EAAE,MACG,UACV,AAAC,MAAO,KAHQ,kBA3tCF,AEpZf,WFoZyB,EAAI,KAEhC,EAAE,EAAK,AADH,AAAC,EAAE,QAAa,AAAC,EAAE,SAAa,WAEhC,AAAC,EAAK,GAAK,KAHsB,iBAyuCjC,MAAwB,MAAwB,AA96ClC,UAg7CN,EAAI,KAChB,EAAG,AAAK,EAAL,GAAU,EAAG,WADI,WAGlB,QAAI,oDACJ,EAAI,IACD,QAxpDoB,AEoBtB,AFqoDE,EAAY,EAAG,eAzpDe,EAAI,KACvC,EAAE,EAAS,ADgEI,AGlCgB,KHkChB,AAA4B,EGlChC,YF/BmC,mBAoqD1C,YAAgD,AAj8ClC,MAi8CU,EAC7B,EAAK,QACQ,EAAI,KAChB,EAAG,AAAK,EAAL,GAAU,EAAG,WADI,WAGlB,QAAI,oDACJ,EAAI,IACD,QA3qDoB,AEoBtB,AFwpDE,EAAY,EAAG,eA5qDe,EAAI,KACvC,EAAE,EAAS,ADgEI,AGlCgB,KHkChB,AAA4B,EGlChC,YF/BmC,kBA+Z5B,AE3Yf,WF2YyB,EAAI,KAEhC,EAAE,EAAK,AADF,AAAC,EAAE,QAAa,AAAC,EAAE,SAAxB,WAEA,EAAM,KAH+B,uBAyxCR,AAr9CX,MAq9Cb,IACC,wDAzrDmB,AA0rDnB,aA1rD6B,EAAI,KACvC,EAAE,EAAS,ADgEI,AGlCgB,KHkChB,AAA4B,EGlChC,YF/BmC,WA2rD5C,EAAI,IAEY,OAYH,EAAG,AAFE,YAYf,OAAkB,OACnB,AAr/Cc,OAq/CI,AAj/CJ,UAm/CN,EAAI,KAChB,EAAG,EAAK,EAAE,WADU,WAGX,QAAG,EAAI,KAChB,EAAG,EAAK,EAAE,WADU,WAGjB,EAAG,EAAI,IACD,QAAG,EAAI,KAChB,EAAG,EAAK,EAAE,WADU,qBA6EhB,AA/lCc,0GAdlB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,SAw3CN,EAAI,KAChB,EAAE,EAAK,EAAG,WADY,WAGtB,AAAC,AAAO,EAAI,EAAG,OACR,IAEA,EAAI,EAAG,IAGV,OACK,MAAG,EAAI,KACX,EAAE,IAAP,KADsB,WAGnB,EAAM,iJA/ET,AAAC,AAAO,EAAI,EAAG,YAAU,AAAC,AAAkB,QACrC,IAEA,EAAI,EAAG,IAEb,AADG,AAriCc,MAsiCd,IACJ,AAz3BY,MA03BL,WAWP,AAAS,MACF,IAEH,AAtjCc,sCAdlB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OA60CP,EAAI,IACd,EAAG,WAaF,AADG,AA7iDa,QAnOO,AEoBtB,WFpBgC,EAAI,KACvC,EAAE,EAAS,ADgEI,AAA6D,AGlC7C,KHkChB,AAA4B,EAA5B,AGlCJ,YF/BmC,WAyZlD,EAAE,EAAF,MAAQ,MACR,EAAE,EAAM,AAAC,EAAE,IAAM,IAAO,MA03CH,EAAG,SAUlB,AADG,AA1jDa,QAnOO,AEoBtB,WFpBgC,EAAI,KACvC,EAAE,EAAS,ADgEI,AAA6D,AGlC7C,KHkChB,AAA4B,EAA5B,AGlCJ,YF/BmC,WAyZlD,EAAE,EAAF,MAAQ,MACR,EAAE,EAAM,AAAC,EAAE,IAAM,IAAO,MAu4CC,UAoCjB,AA1nCc,0GAdlB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OAk5ClB,AAAC,AAAO,EAAI,EAAG,YAAU,AAAC,AAAO,EAAI,EAAG,QACjC,IAEP,EAAI,IACH,EAAG,YAYA,AA7oCc,0GAdlB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OAq6ClB,AAAC,AAAO,EAAI,EAAG,YAAU,AAAC,AAAO,EAAI,EAAG,QACjC,IAEP,EAAI,IACH,EAAG,gHAlqCJ,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OAu7ClB,AAAC,AAAgB,EAAI,EAv7B4B,OAw7B1C,IAEA,EAAI,EAAG,IAEJ,AADN,AAtqCc,MAuqCL,IACb,AAh2BY,MAi2BL,WAWP,AAAS,MACF,IAEH,AAvrCc,sCAdlB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OA88CP,EAAI,IACL,EAAG,2CAxsCb,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OA49Cf,AAAE,AAAS,KAAM,AAAgB,EAAI,EA59BS,WAs+B7C,AAjtCc,0GAdlB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OAy+ClB,AAAC,AAAgB,EAAI,EAz+B4B,YAy+BtB,AAAC,AAAgB,EAAI,EAAG,QAC5C,IAEP,EAAI,IACM,EAAG,YAYT,AApuCc,0GAdlB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,AA1QS,OA4/ClB,AAAC,AAAgB,EAAI,EA5/B4B,YA4/BtB,AAAC,AAAgB,EAAI,EAAG,QAC5C,IAEP,EAAI,IACM,EAAG,cA/5BT,MAAkB,YAAsC,MACxD,MAAwB,MAAmB,YACzB,MACjB,MAAmB,MAAmB,MAAmB,AApmB5C,MAimBsB,QAMhC,EAAG,EAAQ,IAJf,IAKM,IAAG,6CACL,EAAG,EAAG,IACP,IAAG,IAAW,iDACd,IAAK,IAAG,iDACP,EAAG,EAAG,IACJ,IAAG,AAAN,mDACC,EAAG,EAAG,IAEC,EAAI,AAAsB,EAAG,EAAG,WACvC,EAAS,EAAG,IACb,EAAS,IACA,IAAW,AAApB,2DACI,uDAAH,yxBAziByB,AA0iBtB,SA1iBf,EAAE,EAAF,EAAQ,AAAsC,AADnC,AAAC,AA2iBM,EA3iBD,QACT,8BA0iBI,UAziBZ,EAAE,EAAM,AAAC,mCAAqC,GAA9C,KACA,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,mCAAqC,MAC9C,EAAE,EAAF,MAAQ,AAAC,qCAAqC,MAC9C,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,qCAAuC,MACjD,EAAE,EAAF,MAAS,AAAC,kBD/coG,AAA3F,AGlCgB,AFifI,OD/cpB,AGlCJ,KHkCgC,SC+cE,MA6hBtC,IAAG,IAAG,iDACL,EAAG,EAAG,IACN,EAAG,EAAG,IACJ,AAAH,MAAM,iDAEN,IAAO,AAAH,mDACH,EAAI,EAAI,IACR,EAAI,EAAG,IAraP,EAAG,EAAG,IAuaP,IAAI,IAAW,IAjdb,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,WAkdf,IAAI,IAAW,IAxdb,QAAG,EAAI,KAChB,EAAE,EAAK,EAAE,IAAK,EAAE,OADM,WA0dd,KAAK,EAAI,IACT,KAAK,EAAI,IACT,KAAK,EAAI,IACT,KAAK,EAAI,UAMZ,MAAmB,0GArYxB,EAAS,OACT,EAAS,OACT,EAAS,OACT,EAAS,OAqYC,EAAI,EAAW,EAAG,MAClB,EAAI,EAAW,EAAI,OACd,EAAI,IACJ,EAAI,IACnB,EAAI,IACM,EAAG,SAy3BI,AAFb,AAtvCc,MAwvCE,WIxtDtB,EAAM,KAAW,MACd,EAAK,OAAK,AAAS,KAAO,AAAS,SAAnC,IACL,OAAK,OAAM,WAEN,IAAI,AAAc,KAAM,AAAc,OAAM,MDrO1B,AAAT,EAAI,EAAI,SLidpB,IAEE,AADO,MAID,AAAC,AADO,AADJ,AAAkB,EAAO,UAEhB,kBACrB,EAAa,EAAY,MACzB,EAAY,AAAkB,EAAO,UKlcO","sourceRoot":"assemblyscript:///","sourceContents":["/** Number of alignment bits. */\n@inline export const AL_BITS: u32 = 3;\n/** Number of possible alignment values. */\n@inline export const AL_SIZE: usize = 1 << <usize>AL_BITS;\n/** Mask to obtain just the alignment bits. */\n@inline export const AL_MASK: usize = AL_SIZE - 1;\n/** Maximum 32-bit allocation size. */\n@inline export const MAX_SIZE_32: usize = 1 << 30; // 1GB\n","/**\n * Two-Level Segregate Fit Memory Allocator.\n *\n * A general purpose dynamic memory allocator specifically designed to meet real-time requirements.\n * Always aligns to 8 bytes.\n *\n * @module std/assembly/allocator/tlsf\n *//***/\n\n// ╒══════════════ Block size interpretation (32-bit) ═════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─╫─┴─┴─┤\n// │ |                    FL                       │ SB = SL + AL  │ ◄─ usize\n// └───────────────────────────────────────────────┴─────────╨─────┘\n// FL: first level, SL: second level, AL: alignment, SB: small block\n\nimport {\n  AL_BITS,\n  AL_SIZE,\n  AL_MASK\n} from \"../internal/allocator\";\n\nconst SL_BITS: u32 = 5;\nconst SL_SIZE: usize = 1 << <usize>SL_BITS;\n\nconst SB_BITS: usize = <usize>(SL_BITS + AL_BITS);\nconst SB_SIZE: usize = 1 << <usize>SB_BITS;\n\nconst FL_BITS: u32 = (sizeof<usize>() == sizeof<u32>()\n  ? 30 // ^= up to 1GB per block\n  : 32 // ^= up to 4GB per block\n) - SB_BITS;\n\n// ╒════════════════ Block structure layout (32-bit) ══════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┼─┤\n// │                          size                             │L│F│ ◄─┐ info\n// ╞═══════════════════════════════════════════════════════════╧═╧═╡   │      ┐\n// │                        if free: ◄ prev                        │ ◄─┤ usize\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                        if free: next ►                        │ ◄─┤\n// ├───────────────────────────────────────────────────────────────┤   │\n// │                ... unused free space >= 0 ...                 │   │    = 0\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤   │\n// │                        if free: jump ▲                        │ ◄─┘\n// └───────────────────────────────────────────────────────────────┘ MIN SIZE ┘\n// F: FREE, L: LEFT_FREE\n\n/** Tag indicating that this block is free. */\nconst FREE: usize = 1 << 0;\n/** Tag indicating that this block's left block is free. */\nconst LEFT_FREE: usize = 1 << 1;\n/** Mask to obtain all tags. */\nconst TAGS: usize = FREE | LEFT_FREE;\n\n/** Block structure. */\n@unmanaged\nclass Block {\n\n  /** Info field holding this block's size and tags. */\n  info: usize;\n\n  /** End offset of the {@link Block#info} field. User data starts here. */\n  static readonly INFO: usize = (sizeof<usize>() + AL_MASK) & ~AL_MASK;\n\n  /** Previous free block, if any. Only valid if free. */\n  prev: Block | null;\n  /** Next free block, if any. Only valid if free. */\n  next: Block | null;\n\n  /** Minimum size of a block, excluding {@link Block#info}. */\n  static readonly MIN_SIZE: usize = (3 * sizeof<usize>() + AL_MASK) & ~AL_MASK;// prev + next + jump\n\n  /** Maximum size of a used block, excluding {@link Block#info}. */\n  static readonly MAX_SIZE: usize = 1 << (FL_BITS + SB_BITS);\n\n  /** Gets this block's left (free) block in memory. */\n  get left(): Block {\n    assert(this.info & LEFT_FREE); // must be free to contain a jump\n    return assert(\n      load<Block>(changetype<usize>(this) - sizeof<usize>())\n    ); // can't be null\n  }\n\n  /** Gets this block's right block in memory. */\n  get right(): Block {\n    assert(this.info & ~TAGS); // can't skip beyond the tail block\n    return assert(\n      changetype<Block>(\n        changetype<usize>(this) + Block.INFO + (this.info & ~TAGS)\n      )\n    ); // can't be null\n  }\n}\n\n// ╒════════════════ Root structure layout (32-bit) ═══════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤          ┐\n// │        0        |           flMap                            S│ ◄────┐\n// ╞═══════════════════════════════════════════════════════════════╡      │\n// │                           slMap[0] S                          │ ◄─┐  │\n// ├───────────────────────────────────────────────────────────────┤   │  │\n// │                           slMap[1]                            │ ◄─┤  │\n// ├───────────────────────────────────────────────────────────────┤  u32 │\n// │                              ...                              │ ◄─┤  │\n// ├───────────────────────────────────────────────────────────────┤   │  │\n// │                           slMap[22] P                         │ ◄─┘  │\n// ╞═══════════════════════════════════════════════════════════════╡    usize\n// │                            head[0]                            │ ◄────┤\n// ├───────────────────────────────────────────────────────────────┤      │\n// │                              ...                              │ ◄────┤\n// ├───────────────────────────────────────────────────────────────┤      │\n// │                           head[736]                           │ ◄────┤\n// ╞═══════════════════════════════════════════════════════════════╡      │\n// │                            tailRef                            │ ◄────┘\n// └───────────────────────────────────────────────────────────────┘   SIZE   ┘\n// S: Small blocks map, P: Possibly padded if 64-bit\n\nassert((1 << SL_BITS) <= 32); // second level must fit into 32 bits\n\n/** Root structure. */\n@unmanaged\nclass Root {\n\n  /** First level bitmap. */\n  flMap: usize = 0;\n\n  /** Start offset of second level maps. */\n  private static readonly SL_START: usize = sizeof<usize>();\n\n  // Using *one* SL map per *FL bit*\n\n  /** Gets the second level map for the specified first level. */\n  getSLMap(fl: usize): u32 {\n    assert(fl < FL_BITS); // fl out of range\n    return load<u32>(changetype<usize>(this) + fl * 4, Root.SL_START);\n  }\n\n  /** Sets the second level map for the specified first level. */\n  setSLMap(fl: usize, value: u32): void {\n    assert(fl < FL_BITS); // fl out of range\n    store<u32>(changetype<usize>(this) + fl * 4, value, Root.SL_START);\n  }\n\n  /** End offset of second level maps. */\n  private static readonly SL_END: usize = Root.SL_START + FL_BITS * 4;\n\n  // Using *number bits per SL* heads per *FL bit*\n\n  /** Start offset of FL/SL heads. */\n  private static readonly HL_START: usize = (Root.SL_END + AL_MASK) & ~AL_MASK;\n\n  /** Gets the head of the specified first and second level index. */\n  getHead(fl: usize, sl: u32): Block | null {\n    assert(fl < FL_BITS); // fl out of range\n    assert(sl < SL_SIZE); // sl out of range\n    return changetype<Block>(load<usize>(\n      changetype<usize>(this) + (fl * SL_SIZE + <usize>sl) * sizeof<usize>()\n    , Root.HL_START));\n  }\n\n  /** Sets the head of the specified first and second level index. */\n  setHead(fl: usize, sl: u32, value: Block | null): void {\n    assert(fl < FL_BITS); // fl out of range\n    assert(sl < SL_SIZE); // sl out of range\n    store<usize>(\n      changetype<usize>(this) + (fl * SL_SIZE + <usize>sl) * sizeof<usize>()\n    , changetype<usize>(value)\n    , Root.HL_START);\n  }\n\n  /** End offset of FL/SL heads. */\n  private static readonly HL_END: usize = (\n    Root.HL_START + FL_BITS * SL_SIZE * sizeof<usize>()\n  );\n\n  get tailRef(): usize { return load<usize>(0, Root.HL_END); }\n  set tailRef(value: usize) { store<usize>(0, value, Root.HL_END); }\n\n  /** Total size of the {@link Root} structure. */\n  static readonly SIZE: usize = Root.HL_END + sizeof<usize>();\n\n  /** Inserts a previously used block back into the free list. */\n  insert(block: Block): void {\n    // check as much as possible here to prevent invalid free blocks\n    assert(block); // cannot be null\n    var blockInfo = block.info;\n    assert(blockInfo & FREE); // must be free\n    var size: usize;\n    assert(\n      (size = block.info & ~TAGS) >= Block.MIN_SIZE && size < Block.MAX_SIZE\n    ); // must be valid, not necessary to compute yet if noAssert=true\n\n    var right: Block = assert(block.right); // can't be null\n    var rightInfo = right.info;\n\n    // merge with right block if also free\n    if (rightInfo & FREE) {\n      this.remove(right);\n      block.info = (blockInfo += Block.INFO + (rightInfo & ~TAGS));\n      right = block.right;\n      rightInfo = right.info;\n      // jump is set below\n    }\n\n    // merge with left block if also free\n    if (blockInfo & LEFT_FREE) {\n      let left: Block = assert(block.left); // can't be null\n      let leftInfo = left.info;\n      assert(leftInfo & FREE); // must be free according to tags\n      this.remove(left);\n      left.info = (leftInfo += Block.INFO + (blockInfo & ~TAGS));\n      block = left;\n      blockInfo = leftInfo;\n      // jump is set below\n    }\n\n    right.info = rightInfo | LEFT_FREE;\n    this.setJump(block, right);\n    // right is no longer used now, hence rightInfo is not synced\n\n    size = blockInfo & ~TAGS;\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE); // must be valid\n\n    // mapping_insert\n    var fl: usize, sl: u32;\n    if (size < SB_SIZE) {\n      fl = 0;\n      sl = <u32>(size / AL_SIZE);\n    } else {\n      fl = fls<usize>(size);\n      sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n      fl -= SB_BITS - 1;\n    }\n\n    // perform insertion\n    var head = this.getHead(fl, sl);\n    block.prev = null;\n    block.next = head;\n    if (head) head.prev = block;\n    this.setHead(fl, sl, block);\n\n    // update first and second level maps\n    this.flMap |= (1 << fl);\n    this.setSLMap(fl, this.getSLMap(fl) | (1 << sl));\n  }\n\n  /**\n   * Removes a free block from FL/SL maps. Does not alter left/jump because it\n   * is likely that splitting is performed afterwards, invalidating any changes\n   * again.\n   */\n  private remove(block: Block): void {\n    var blockInfo = block.info;\n    assert(blockInfo & FREE); // must be free\n    var size = blockInfo & ~TAGS;\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE); // must be valid\n\n    // mapping_insert\n    var fl: usize, sl: u32;\n    if (size < SB_SIZE) {\n      fl = 0;\n      sl = <u32>(size / AL_SIZE);\n    } else {\n      fl = fls<usize>(size);\n      sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n      fl -= SB_BITS - 1;\n    }\n\n    // link previous and next free block\n    var prev = block.prev;\n    var next = block.next;\n    if (prev) prev.next = next;\n    if (next) next.prev = prev;\n\n    // update head if we are removing it\n    if (block == this.getHead(fl, sl)) {\n      this.setHead(fl, sl, next);\n\n      // clear second level map if head is empty now\n      if (!next) {\n        let slMap = this.getSLMap(fl);\n        this.setSLMap(fl, slMap &= ~(1 << sl));\n\n        // clear first level map if second level is empty now\n        if (!slMap) this.flMap &= ~(1 << fl);\n      }\n    }\n  }\n\n  /** Searches for a free block of at least the specified size. */\n  search(size: usize): Block | null {\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE);\n\n    // mapping_search\n    var fl: usize, sl: u32;\n    if (size < SB_SIZE) {\n      fl = 0;\n      sl = <u32>(size / AL_SIZE);\n    } else {\n      // (*) size += (1 << (fls<usize>(size) - SL_BITS)) - 1;\n      fl = fls<usize>(size);\n      sl = <u32>((size >> (fl - SL_BITS)) ^ (1 << SL_BITS));\n      fl -= SB_BITS - 1;\n      // (*) instead of rounding up, use next second level list for better fit\n      if (sl < SL_SIZE - 1) ++sl;\n      else ++fl, sl = 0;\n    }\n\n    // search second level\n    var slMap = this.getSLMap(fl) & (~0 << sl);\n    var head: Block | null;\n    if (!slMap) {\n      // search next larger first level\n      let flMap = this.flMap & (~0 << (fl + 1));\n      if (!flMap) {\n        head = null;\n      } else {\n        fl = ffs<usize>(flMap);\n        slMap = assert(this.getSLMap(fl)); // can't be zero if fl points here\n        head = this.getHead(fl, ffs<u32>(slMap));\n      }\n    } else {\n      head = this.getHead(fl, ffs<u32>(slMap));\n    }\n    return head;\n  }\n\n  /** Links a free left with its right block in memory. */\n  private setJump(left: Block, right: Block): void {\n    assert(left.info & FREE);       // must be free\n    assert(left.right == right);    // right block must match\n    assert(right.info & LEFT_FREE); // right block must be tagged as LEFT_FREE\n    store<Block>(\n      changetype<usize>(right) - sizeof<usize>()\n    , left); // last word in left block's (free) data region\n  }\n\n  /**\n   * Uses the specified free block, removing it from internal maps and\n   * splitting it if possible, and returns its data pointer.\n   */\n  use(block: Block, size: usize): usize {\n    var blockInfo = block.info;\n    assert(blockInfo & FREE); // must be free so we can use it\n    assert(size >= Block.MIN_SIZE && size < Block.MAX_SIZE); // must be valid\n    assert(!(size & AL_MASK)); // size must be aligned so the new block is\n\n    this.remove(block);\n\n    // split if the block can hold another MIN_SIZE block\n    var remaining = (blockInfo & ~TAGS) - size;\n    if (remaining >= Block.INFO + Block.MIN_SIZE) {\n      block.info = size | (blockInfo & LEFT_FREE); // also discards FREE\n\n      let spare = changetype<Block>(\n        changetype<usize>(block) + Block.INFO + size\n      );\n      spare.info = (remaining - Block.INFO) | FREE; // not LEFT_FREE\n      this.insert(spare); // also sets jump\n\n    // otherwise tag block as no longer FREE and right as no longer LEFT_FREE\n    } else {\n      block.info = blockInfo & ~FREE;\n      let right: Block = assert(block.right); // can't be null (tail)\n      right.info &= ~LEFT_FREE;\n    }\n\n    return changetype<usize>(block) + Block.INFO;\n  }\n\n  /** Adds more memory to the pool. */\n  addMemory(start: usize, end: usize): bool {\n    assert(start <= end);\n    assert(!(start & AL_MASK)); // must be aligned\n    assert(!(end & AL_MASK)); // must be aligned\n\n    var tailRef = this.tailRef;\n    var tailInfo: usize = 0;\n    if (tailRef) {\n      assert(start >= tailRef + sizeof<usize>()); // starts after tail\n\n      // merge with current tail if adjacent\n      if (start - Block.INFO == tailRef) {\n        start -= Block.INFO;\n        tailInfo = changetype<Block>(tailRef).info;\n      }\n\n    } else {\n      assert(start >= changetype<usize>(this) + Root.SIZE); // starts after root\n    }\n\n    // check if size is large enough for a free block and the tail block\n    var size = end - start;\n    if (size < Block.INFO + Block.MIN_SIZE + Block.INFO) {\n      return false;\n    }\n\n    // left size is total minus its own and the zero-length tail's header\n    var leftSize = size - 2 * Block.INFO;\n    var left = changetype<Block>(start);\n    left.info = leftSize | FREE | (tailInfo & LEFT_FREE);\n    left.prev = null;\n    left.next = null;\n\n    // tail is a zero-length used block\n    var tail = changetype<Block>(start + size - Block.INFO);\n    tail.info = 0 | LEFT_FREE;\n    this.tailRef = changetype<usize>(tail);\n\n    this.insert(left); // also merges with free left before tail / sets jump\n\n    return true;\n  }\n}\n\n/** Determines the first (LSB to MSB) set bit's index of a word. */\nfunction ffs<T>(word: T): T {\n  assert(word != 0); // word cannot be 0\n  return ctz<T>(word);  // differs from ffs only for 0\n}\n\n/** Determines the last (LSB to MSB) set bit's index of a word. */\nfunction fls<T>(word: T): T {\n  assert(word != 0); // word cannot be 0\n  const inv: T = (sizeof<T>() << 3) - 1;\n  return inv - clz<T>(word);\n}\n\n/** Reference to the initialized {@link Root} structure, once initialized. */\nvar ROOT: Root = changetype<Root>(0);\n\n// Memory allocator interface\n\n/** Allocates a chunk of memory. */\n@global export function __memory_allocate(size: usize): usize {\n\n  // initialize if necessary\n  var root = ROOT;\n  if (!root) {\n    let rootOffset = (HEAP_BASE + AL_MASK) & ~AL_MASK;\n    let pagesBefore = memory.size();\n    let pagesNeeded = <i32>((((rootOffset + Root.SIZE) + 0xffff) & ~0xffff) >>> 16);\n    if (pagesNeeded > pagesBefore && memory.grow(pagesNeeded - pagesBefore) < 0) unreachable();\n    ROOT = root = changetype<Root>(rootOffset);\n    root.tailRef = 0;\n    root.flMap = 0;\n    for (let fl: usize = 0; fl < FL_BITS; ++fl) {\n      root.setSLMap(fl, 0);\n      for (let sl: u32 = 0; sl < SL_SIZE; ++sl) {\n        root.setHead(fl, sl, null);\n      }\n    }\n    root.addMemory((rootOffset + Root.SIZE + AL_MASK) & ~AL_MASK, memory.size() << 16);\n  }\n\n  // search for a suitable block\n  if (size > Block.MAX_SIZE) unreachable();\n\n  // 32-bit MAX_SIZE is 1 << 30 and itself aligned, hence the following can't overflow MAX_SIZE\n  size = max<usize>((size + AL_MASK) & ~AL_MASK, Block.MIN_SIZE);\n\n  var block = root.search(size);\n  if (!block) {\n\n    // request more memory\n    let pagesBefore = memory.size();\n    let pagesNeeded = <i32>(((size + 0xffff) & ~0xffff) >>> 16);\n    let pagesWanted = max(pagesBefore, pagesNeeded); // double memory\n    if (memory.grow(pagesWanted) < 0) {\n      if (memory.grow(pagesNeeded) < 0) {\n        unreachable(); // out of memory\n      }\n    }\n    let pagesAfter = memory.size();\n    root.addMemory(<usize>pagesBefore << 16, <usize>pagesAfter << 16);\n    block = assert(root.search(size)); // must be found now\n  }\n\n  assert((block.info & ~TAGS) >= size);\n  return root.use(<Block>block, size);\n}\n\n/** Frees the chunk of memory at the specified address. */\n@global export function __memory_free(data: usize): void {\n  if (data) {\n    let root = ROOT;\n    if (root) {\n      let block = changetype<Block>(data - Block.INFO);\n      let blockInfo = block.info;\n      assert(!(blockInfo & FREE)); // must be used\n      block.info = blockInfo | FREE;\n      root.insert(changetype<Block>(data - Block.INFO));\n    }\n  }\n}\n\n@global export function __memory_reset(): void {\n  unreachable();\n}\n","import {\n  AL_MASK,\n  MAX_SIZE_32\n } from \"./allocator\";\n\n/** Size of an ArrayBuffer header. */\n@inline export const HEADER_SIZE: usize = (offsetof<ArrayBuffer>() + AL_MASK) & ~AL_MASK;\n/** Maximum byte length of an ArrayBuffer. */\n@inline export const MAX_BLENGTH: i32 = <i32>MAX_SIZE_32 - HEADER_SIZE;\n\nfunction computeSize(byteLength: i32): usize {\n  // round up to power of 2, with HEADER_SIZE=8:\n  // 0            -> 2^3  = 8\n  // 1..8         -> 2^4  = 16\n  // 9..24        -> 2^5  = 32\n  // ...\n  // MAX_LENGTH   -> 2^30 = 0x40000000 (MAX_SIZE_32)\n  return <usize>1 << <usize>(<u32>32 - clz<u32>(byteLength + HEADER_SIZE - 1));\n}\n\n// Low-level utility\n\nfunction __gc(ref: usize): void {}\n\nexport function allocateUnsafe(byteLength: i32): ArrayBuffer {\n  assert(<u32>byteLength <= <u32>MAX_BLENGTH);\n  var buffer: usize;\n  if (isManaged<ArrayBuffer>()) {\n    buffer = __gc_allocate(computeSize(byteLength), __gc); // tslint:disable-line\n  } else {\n    buffer = memory.allocate(computeSize(byteLength));\n  }\n  store<i32>(buffer, byteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n  return changetype<ArrayBuffer>(buffer);\n}\n\nexport function reallocateUnsafe(buffer: ArrayBuffer, newByteLength: i32): ArrayBuffer {\n  var oldByteLength = buffer.byteLength;\n  if (newByteLength > oldByteLength) {\n    assert(newByteLength <= MAX_BLENGTH);\n    if (newByteLength <= <i32>(computeSize(oldByteLength) - HEADER_SIZE)) { // fast path: zero out additional space\n      store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n    } else { // slow path: copy to new buffer\n      let newBuffer = allocateUnsafe(newByteLength);\n      memory.copy(\n        changetype<usize>(newBuffer) + HEADER_SIZE,\n        changetype<usize>(buffer) + HEADER_SIZE,\n        <usize>oldByteLength\n      );\n      if (!isManaged<ArrayBuffer>()) {\n        memory.free(changetype<usize>(buffer));\n      }\n      buffer = newBuffer;\n    }\n    memory.fill(\n      changetype<usize>(buffer) + HEADER_SIZE + <usize>oldByteLength,\n      0,\n      <usize>(newByteLength - oldByteLength)\n    );\n  } else if (newByteLength < oldByteLength) { // fast path: override size\n    // TBD: worth to copy and release if size is significantly less than before?\n    assert(newByteLength >= 0);\n    store<i32>(changetype<usize>(buffer), newByteLength, offsetof<ArrayBuffer>(\"byteLength\"));\n  }\n  return buffer;\n}\n\n// The helpers below use two different types in order to emit loads and stores that load respectively\n// store one type to/from memory while returning/taking the desired output/input type. This allows to\n// emit instructions like\n//\n// * `i32.load8` ^= `<i32>load<i8>(...)` that reads an i8 but returns an i32, or\n// * `i64.load32_s` ^= `<i64>load<i32>(...)`) that reads a 32-bit as a 64-bit integer\n//\n// without having to emit an additional instruction for conversion purposes. The second parameter\n// can be omitted for references and other loads and stores that simply return the exact type.\n\n@inline export function LOAD<T,TOut = T>(buffer: ArrayBuffer, index: i32, byteOffset: i32 = 0): TOut {\n  return <TOut>load<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()) + <usize>byteOffset, HEADER_SIZE);\n}\n\n@inline export function STORE<T,TIn = T>(buffer: ArrayBuffer, index: i32, value: TIn, byteOffset: i32 = 0): void {\n  store<T>(changetype<usize>(buffer) + (<usize>index << alignof<T>()) + <usize>byteOffset, value, HEADER_SIZE);\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../node_modules/assemblyscript/index.d.ts\" />\n\nimport 'allocator/tlsf';\nimport { LOAD, STORE } from 'internal/arraybuffer';\nimport { precompBase } from './precomp';\nexport { memory };\n\nconst DEBUG: bool = false;\n\n// Helpers\n\n@inline function setU8(t: Uint8Array, s: Uint8Array, o: isize = 0): void {\n    for (let i: isize = 0, len = s.length; i < len; ++i) {\n        t[i + o] = unchecked(s[i]);\n    }\n}\n\n// SHA512\n\n@inline function Sigma0(x: u64): u64 {\n    return rotr(x, 28) ^ rotr(x, 34) ^ rotr(x, 39);\n}\n\n@inline function Sigma1(x: u64): u64 {\n    return rotr(x, 14) ^ rotr(x, 18) ^ rotr(x, 41);\n}\n\n@inline function sigma0(x: u64): u64 {\n    return rotr(x, 1) ^ rotr(x, 8) ^ (x >> 7);\n}\n\n@inline function sigma1(x: u64): u64 {\n    return rotr(x, 19) ^ rotr(x, 61) ^ (x >> 6);\n}\n\n@inline function Ch(x: u64, y: u64, z: u64): u64 {\n    return (x & y) ^ (~x & z);\n}\n\n@inline function Maj(x: u64, y: u64, z: u64): u64 {\n    return (x & y) ^ (x & z) ^ (y & z);\n}\n\nfunction load64(x: Uint8Array, offset: isize): u64 {\n    return LOAD<u64>(x.buffer, 0, offset);\n}\n\nfunction store64(x: Uint8Array, offset: isize, u: u64): void {\n    STORE<u64>(x.buffer, 0, u, offset);\n}\n\nconst K: u64[] = [\n    0x428a2f98d728ae22, 0x7137449123ef65cd, 0xb5c0fbcfec4d3b2f, 0xe9b5dba58189dbbc,\n    0x3956c25bf348b538, 0x59f111f1b605d019, 0x923f82a4af194f9b, 0xab1c5ed5da6d8118,\n    0xd807aa98a3030242, 0x12835b0145706fbe, 0x243185be4ee4b28c, 0x550c7dc3d5ffb4e2,\n    0x72be5d74f27b896f, 0x80deb1fe3b1696b1, 0x9bdc06a725c71235, 0xc19bf174cf692694,\n    0xe49b69c19ef14ad2, 0xefbe4786384f25e3, 0x0fc19dc68b8cd5b5, 0x240ca1cc77ac9c65,\n    0x2de92c6f592b0275, 0x4a7484aa6ea6e483, 0x5cb0a9dcbd41fbd4, 0x76f988da831153b5,\n    0x983e5152ee66dfab, 0xa831c66d2db43210, 0xb00327c898fb213f, 0xbf597fc7beef0ee4,\n    0xc6e00bf33da88fc2, 0xd5a79147930aa725, 0x06ca6351e003826f, 0x142929670a0e6e70,\n    0x27b70a8546d22ffc, 0x2e1b21385c26c926, 0x4d2c6dfc5ac42aed, 0x53380d139d95b3df,\n    0x650a73548baf63de, 0x766a0abb3c77b2a8, 0x81c2c92e47edaee6, 0x92722c851482353b,\n    0xa2bfe8a14cf10364, 0xa81a664bbc423001, 0xc24b8b70d0f89791, 0xc76c51a30654be30,\n    0xd192e819d6ef5218, 0xd69906245565a910, 0xf40e35855771202a, 0x106aa07032bbd1b8,\n    0x19a4c116b8d2d0c8, 0x1e376c085141ab53, 0x2748774cdf8eeb99, 0x34b0bcb5e19b48a8,\n    0x391c0cb3c5c95a63, 0x4ed8aa4ae3418acb, 0x5b9cca4f7763e373, 0x682e6ff3d6b2b8a3,\n    0x748f82ee5defb2fc, 0x78a5636f43172f60, 0x84c87814a1f0ab72, 0x8cc702081a6439ec,\n    0x90befffa23631e28, 0xa4506cebde82bde9, 0xbef9a3f7b2c67915, 0xc67178f2e372532b,\n    0xca273eceea26619c, 0xd186b8c721c0c207, 0xeada7dd6cde0eb1e, 0xf57d4f7fee6ed178,\n    0x06f067aa72176fba, 0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,\n    0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc, 0x431d67c49c100d4c,\n    0x4cc5d4becb3e42b6, 0x597f299cfc657e2a, 0x5fcb6fab3ad6faec, 0x6c44198c4a475817,\n];\n\nfunction _hashblocks(st: Uint8Array, m: Uint8Array, n: isize): isize {\n    let z = new Uint64Array(8),\n        b = new Uint64Array(8),\n        a = new Uint64Array(8),\n        w = new Uint64Array(16),\n        t: u64;\n\n    for (let i = 0; i < 8; ++i) {\n        z[i] = a[i] = load64(st, i << 3);\n    }\n    let pos = 0;\n    while (n >= 128) {\n        for (let i = 0; i < 16; ++i) {\n            w[i] = load64(m, (i << 3) + pos);\n        }\n        for (let i = 0; i < 80; ++i) {\n            for (let j = 0; j < 8; ++j) {\n                b[j] = a[j];\n            }\n            t = a[7] + Sigma1(a[4]) + Ch(a[4], a[5], a[6]) + K[i] + w[i & 15];\n            b[7] = t + Sigma0(a[0]) + Maj(a[0], a[1], a[2]);\n            b[3] += t;\n            for (let j = 0; j < 8; ++j) {\n                a[(j + 1) & 7] = b[j];\n            }\n            if ((i & 15) === 15) {\n                for (let j = 0; j < 16; ++j) {\n                    w[j] += w[(j + 9) & 15] + sigma0(w[(j + 1) & 15]) + sigma1(w[(j + 14) & 15]);\n                }\n            }\n        }\n        for (let i = 0; i < 8; ++i) {\n            a[i] += z[i];\n            z[i] = a[i];\n        }\n        pos += 128;\n        n -= 128;\n    }\n    for (let i = 0; i < 8; ++i) {\n        store64(st, i << 3, z[i]);\n    }\n    return n;\n}\n\nconst iv_: u8[] = [\n    0x6a, 0x09, 0xe6, 0x67, 0xf3, 0xbc, 0xc9, 0x08, 0xbb, 0x67, 0xae, 0x85, 0x84, 0xca, 0xa7, 0x3b,\n    0x3c, 0x6e, 0xf3, 0x72, 0xfe, 0x94, 0xf8, 0x2b, 0xa5, 0x4f, 0xf5, 0x3a, 0x5f, 0x1d, 0x36, 0xf1,\n    0x51, 0x0e, 0x52, 0x7f, 0xad, 0xe6, 0x82, 0xd1, 0x9b, 0x05, 0x68, 0x8c, 0x2b, 0x3e, 0x6c, 0x1f,\n    0x1f, 0x83, 0xd9, 0xab, 0xfb, 0x41, 0xbd, 0x6b, 0x5b, 0xe0, 0xcd, 0x19, 0x13, 0x7e, 0x21, 0x79,\n];\n\nlet iv = new Uint8Array(64);\nfor (let i = 0; i < 64; ++i) {\n    iv[i] = iv_[i];\n}\n\nfunction _hashInit(): Uint8Array {\n    let st = new Uint8Array(64 + 128 + 8 * 2);\n\n    for (let i = 0; i < 64; ++i) {\n        st[i] = iv[i];\n    }\n    return st;\n}\n\nfunction _hashUpdate(st: Uint8Array, m: Uint8Array, n: isize, r: isize): isize {\n    let w = st.subarray(64);\n    let pos = 0;\n    let av = 128 - r;\n    let tc = min(n, av);\n\n    setU8(w, m.subarray(0, tc), r);\n    r += tc;\n    n -= tc;\n    pos += tc;\n    if (r === 128) {\n        _hashblocks(st, w, 128);\n        r = 0;\n    }\n    if (r === 0 && n > 0) {\n        let rb = _hashblocks(st, m.subarray(pos), n);\n        if (rb > 0) {\n            setU8(w, m.subarray(pos + n - rb), r);\n            r += rb;\n        }\n    }\n    return r;\n}\n\nfunction _hashFinal(st: Uint8Array, out: Uint8Array, t: isize, r: isize): void {\n    let w = st.subarray(64);\n    let x = new Uint8Array(256);\n\n    setU8(x, w.subarray(0, r));\n    x[r] = 128;\n    r = 256 - (isize(r < 112) << 7);\n    x[r - 9] = 0;\n    store64(x, r - 8, t << 3);\n    _hashblocks(st, x, r);\n    for (let i = 0; i < 64; ++i) {\n        out[i] = st[i];\n    }\n}\n\nfunction _hash(out: Uint8Array, m: Uint8Array, n: isize): void {\n    let st = _hashInit();\n    let r = _hashUpdate(st, m, n, 0);\n\n    _hashFinal(st, out, n, r);\n}\n\n// HMAC\n\nfunction _hmac(m: Uint8Array, k: Uint8Array): Uint8Array {\n    let b = new Uint8Array(256);\n    let ib = b.subarray(128);\n    if (k.length > 128) {\n        k = hash(k);\n    }\n    setU8(b, k);\n    for (let i = 0; i < 128; ++i) {\n        b[i] ^= 0x5c;\n    }\n    setU8(ib, k);\n    for (let i = 0; i < 128; ++i) {\n        ib[i] ^= 0x36;\n    }\n    let st = _hashInit();\n    let r = _hashUpdate(st, ib, 128, 0);\n    r = _hashUpdate(st, m, m.length, r);\n    _hashFinal(st, b, 128 + m.length, r);\n\n    return hash(b);\n}\n\n// helpers\n\nfunction verify32(x: Uint8Array, y: Uint8Array): bool {\n    let d: u8 = 0;\n\n    for (let i = 0; i < 32; ++i) {\n        d |= x[i] ^ y[i];\n    }\n    return d === 0;\n}\n\nfunction allZeros(x: Uint8Array): bool {\n    let len = x.length;\n    let c: u8 = 0;\n    for (let i = 0; i < len; ++i) {\n        c |= x[i];\n    }\n    return c === 0;\n}\n\n// mod(2^252 + 27742317777372353535851937790883648495) field arithmetic\n\ntype Scalar = Int64Array(64);\ntype ScalarPacked = Uint8Array(32);\n\n@inline function newScalar(): Scalar {\n    return new Int64Array(64);\n}\n\n@inline function newScalarPacked(): ScalarPacked {\n    return new Uint8Array(32);\n}\n\nlet _L: Int64Array = new Int64Array(32);\n_L[0] = 237;\n_L[1] = 211;\n_L[2] = 245;\n_L[3] = 92;\n_L[4] = 26;\n_L[5] = 99;\n_L[6] = 18;\n_L[7] = 88;\n_L[8] = 214;\n_L[9] = 156;\n_L[10] = 247;\n_L[11] = 162;\n_L[12] = 222;\n_L[13] = 249;\n_L[14] = 222;\n_L[15] = 20;\n_L[31] = 16;\n\nfunction scIsLtL(s: ScalarPacked): bool {\n    let c: u8 = 0, n: u8 = 1, i = 32;\n\n    do {\n        i--;\n        let l = unchecked(_L[i]) as u8;\n        let si = unchecked(s[i]);\n        c |= ((si - l) >> 8) & n;\n        n &= ((si ^ l) - 1) >> 8;\n    } while (i !== 0);\n\n    return c === 0;\n}\n\nfunction scModL(r: ScalarPacked, x: Scalar): void {\n    let carry: i64;\n\n    for (let i = 63; i >= 32; --i) {\n        carry = 0;\n        let k = i - 12;\n        let xi = x[i];\n        for (let j = i - 32; j < k; ++j) {\n            let xj = unchecked(x[j] + carry - 16 * xi * _L[j - (i - 32)]);\n            carry = (xj + 128) >> 8;\n            x[j] = xj - carry * 256;\n        }\n        x[k] += carry;\n        x[i] = 0;\n    }\n    carry = 0;\n    for (let j = 0; j < 32; ++j) {\n        let xj = unchecked(x[j] + carry - (x[31] >> 4) * _L[j]);\n        carry = xj >> 8;\n        x[j] = xj & 255;\n    }\n    for (let j = 0; j < 32; ++j) {\n        x[j] -= unchecked(carry * _L[j]);\n    }\n    for (let i = 0; i < 32; ++i) {\n        let xi = unchecked(x[i]);\n        x[i + 1] += xi >> 8;\n        r[i] = xi as u8;\n    }\n}\n\nfunction scReduce(r: ScalarPacked): void {\n    let x = newScalar();\n\n    for (let i = 0; i < 64; ++i) {\n        x[i] = r[i];\n        r[i] = 0;\n    }\n    scModL(r, x);\n}\n\nfunction scCarry(a: Scalar): void {\n    let carry: i64 = 0;\n    for (let i = 0; i < 64; ++i) {\n        let c = a[i] + carry;\n        a[i] = c & 0xff;\n        carry = (c >>> 8)\n    }\n    if (DEBUG && carry > 0) {\n        throw new Error('overflow');\n    }\n}\n\nfunction scMult(o: Scalar, a: Scalar, b: Scalar): void {\n    let r = newScalarPacked();\n    let t = newScalar();\n\n    for (let i = 0; i < 32; ++i) {\n        let ai = a[i];\n        for (let j = 0; j < 32; ++j) {\n            t[i + j] += ai * unchecked(b[j]);\n        }\n    }\n    scCarry(t);\n    scModL(r, t);\n    for (let i = 0; i < 32; ++i) {\n        o[i] = r[i];\n    }\n    for (let i = 32; i < 64; ++i) {\n        o[i] = 0;\n    }\n}\n\nfunction scSq(o: Scalar, a: Scalar): void {\n    scMult(o, a, a);\n}\n\nfunction scSqMult(y: Scalar, squarings: isize, x: Scalar): void {\n    for (let i = 0; i < squarings; ++i) {\n        scSq(y, y);\n    }\n    scMult(y, y, x);\n}\n\nfunction scInverse(s: Uint8Array): Uint8Array {\n    let res = newScalarPacked();\n    let _1 = newScalar();\n    for (let i = 0; i < 32; ++i) {\n        _1[i] = s[i];\n    }\n    let _10 = newScalar(),\n        _100 = newScalar(),\n        _11 = newScalar(),\n        _101 = newScalar(),\n        _111 = newScalar(),\n        _1001 = newScalar(),\n        _1011 = newScalar(),\n        _1111 = newScalar(),\n        y = newScalar();\n\n    scSq(_10, _1);\n    scSq(_100, _10);\n    scMult(_11, _10, _1);\n    scMult(_101, _10, _11);\n    scMult(_111, _10, _101);\n    scMult(_1001, _10, _111);\n    scMult(_1011, _10, _1001);\n    scMult(_1111, _100, _1011);\n    scMult(y, _1111, _1);\n\n    scSqMult(y, 123 + 3, _101);\n    scSqMult(y, 2 + 2, _11);\n    scSqMult(y, 1 + 4, _1111);\n    scSqMult(y, 1 + 4, _1111);\n    scSqMult(y, 4, _1001);\n    scSqMult(y, 2, _11);\n    scSqMult(y, 1 + 4, _1111);\n    scSqMult(y, 1 + 3, _101);\n    scSqMult(y, 3 + 3, _101);\n    scSqMult(y, 3, _111);\n    scSqMult(y, 1 + 4, _1111);\n    scSqMult(y, 2 + 3, _111);\n    scSqMult(y, 2 + 2, _11);\n    scSqMult(y, 1 + 4, _1011);\n    scSqMult(y, 2 + 4, _1011);\n    scSqMult(y, 6 + 4, _1001);\n    scSqMult(y, 2 + 2, _11);\n    scSqMult(y, 3 + 2, _11);\n    scSqMult(y, 3 + 2, _11);\n    scSqMult(y, 1 + 4, _1001);\n    scSqMult(y, 1 + 3, _111);\n    scSqMult(y, 2 + 4, _1111);\n    scSqMult(y, 1 + 4, _1011);\n    scSqMult(y, 3, _101);\n    scSqMult(y, 2 + 4, _1111);\n    scSqMult(y, 3, _101);\n    scSqMult(y, 1 + 2, _11);\n\n    for (let i = 0; i < 32; ++i) {\n        y[i + 1] += y[i] >> 8;\n        res[i] = y[i] as u8;\n    }\n    return res;\n}\n\n@inline function scClamp(s: ScalarPacked): void {\n    s[0] &= 248;\n    s[31] = (s[31] & 127) | 64;\n}\n\nfunction scAdd(a: Uint8Array, b: Uint8Array): void {\n    let c: u32 = 0;\n    for (let i = 0, len = a.length; i < len; i++) {\n        c += (a[i] as u32) + (b[i] as u32);\n        a[i] = c as u8;\n        c >>= 8;\n    }\n}\n\nfunction scSub(a: Uint8Array, b: Uint8Array): void {\n    let c: u32 = 0;\n    for (let i = 0, len = a.length; i < len; i++) {\n        c = (a[i] as u32) - (b[i] as u32) - c;\n        a[i] = c as u8;\n        c = (c >> 8) & 1;\n    }\n}\n\n// mod(2^255-19) field arithmetic - Doesn't use 51-bit limbs yet to keep the\n// code short and simple\n\ntype Fe25519 = Int64Array(16);\ntype Fe25519Packed = Uint8Array(32);\n\n@inline function newFe25519(): Fe25519 {\n    return new Int64Array(16);\n}\n\n@inline function newFe25519Packed(): Fe25519Packed {\n    return new Uint8Array(32);\n}\n\nfunction fe25519(init: i64[]): Fe25519 {\n    let r = newFe25519();\n\n    for (let i = 0, len = init.length; i < len; ++i) {\n        r[i] = init[i];\n    }\n    return r;\n}\n\nlet fe25519_0 = newFe25519();\nlet fe25519_1 = fe25519([1]);\n\nlet D = fe25519([\n    0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070,\n    0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203,\n]);\n\nlet D2 = fe25519([\n    0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0,\n    0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406,\n]);\n\nlet SQRTM1 = fe25519([\n    0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43,\n    0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\n\nlet SQRTADM1 = fe25519([\n    0x2e1b, 0x497b, 0xf6a0, 0x7e97, 0x54bd, 0x1b78, 0x8e0c, 0xaf9d,\n    0xd1fd, 0x31f5, 0xfcc9, 0x0f3c, 0x48ac, 0x2b83, 0x31bf, 0x3769,\n]);\n\nlet INVSQRTAMD = fe25519([\n    0x40ea, 0x805d, 0xfdaa, 0x99c8, 0x72be, 0x5a41, 0x1617, 0x9d2f,\n    0xd840, 0xfe01, 0x7b91, 0x16c2, 0xfca2, 0xcfaf, 0x8905, 0x786c,\n]);\n\nlet ONEMSQD = fe25519([\n    0xc176, 0x945f, 0x09c1, 0xe27c, 0x350f, 0xcd5e, 0xa138, 0x2c81,\n    0xdfe4, 0xbe70, 0xabdd, 0x9994, 0xe0d7, 0xb2b3, 0x72a8, 0x0290,\n]);\n\nlet SQDMONE = fe25519([\n    0x4d20, 0x44ed, 0x5aaa, 0x31ad, 0x1999, 0xb01e, 0x4a2c, 0xd29e,\n    0x4eeb, 0x529b, 0xd32f, 0x4cdc, 0x2241, 0xf66c, 0xb37a, 0x5968,\n]);\n\n@inline function fe25519Copy(r: Fe25519, a: Fe25519): void {\n    r[0] = unchecked(a[0]);\n    r[1] = unchecked(a[1]);\n    r[2] = unchecked(a[2]);\n    r[3] = unchecked(a[3]);\n    r[4] = unchecked(a[4]);\n    r[5] = unchecked(a[5]);\n    r[6] = unchecked(a[6]);\n    r[7] = unchecked(a[7]);\n    r[8] = unchecked(a[8]);\n    r[9] = unchecked(a[9]);\n    r[10] = unchecked(a[10]);\n    r[11] = unchecked(a[11]);\n    r[12] = unchecked(a[12]);\n    r[13] = unchecked(a[13]);\n    r[14] = unchecked(a[14]);\n    r[15] = unchecked(a[15]);\n}\n\n@inline function fe25519Cmov(p: Fe25519, q: Fe25519, b: i64): void {\n    let mask = ~(b - 1);\n    p[0] ^= (unchecked(p[0]) ^ unchecked(q[0])) & mask;\n    p[1] ^= (unchecked(p[1]) ^ unchecked(q[1])) & mask;\n    p[2] ^= (unchecked(p[2]) ^ unchecked(q[2])) & mask;\n    p[3] ^= (unchecked(p[3]) ^ unchecked(q[3])) & mask;\n    p[4] ^= (unchecked(p[4]) ^ unchecked(q[4])) & mask;\n    p[5] ^= (unchecked(p[5]) ^ unchecked(q[5])) & mask;\n    p[6] ^= (unchecked(p[6]) ^ unchecked(q[6])) & mask;\n    p[7] ^= (unchecked(p[7]) ^ unchecked(q[7])) & mask;\n    p[8] ^= (unchecked(p[8]) ^ unchecked(q[8])) & mask;\n    p[9] ^= (unchecked(p[9]) ^ unchecked(q[9])) & mask;\n    p[10] ^= (unchecked(p[10]) ^ unchecked(q[10])) & mask;\n    p[11] ^= (unchecked(p[11]) ^ unchecked(q[11])) & mask;\n    p[12] ^= (unchecked(p[12]) ^ unchecked(q[12])) & mask;\n    p[13] ^= (unchecked(p[13]) ^ unchecked(q[13])) & mask;\n    p[14] ^= (unchecked(p[14]) ^ unchecked(q[14])) & mask;\n    p[15] ^= (unchecked(p[15]) ^ unchecked(q[15])) & mask;\n}\n\nfunction fe25519Pack(o: Fe25519Packed, n: Fe25519): void {\n    let b: i64;\n    let m = newFe25519();\n    let t = newFe25519();\n\n    fe25519Copy(t, n);\n    fe25519Carry(t);\n    fe25519Carry(t);\n    fe25519Carry(t);\n    for (let j = 0; j < 2; ++j) {\n        m[0] = t[0] - 0xffed;\n        for (let i = 1; i < 15; ++i) {\n            let mp = m[i - 1];\n            m[i] = t[i] - 0xffff - ((mp >> 16) & 1);\n            m[i - 1] = mp & 0xffff;\n        }\n        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);\n        b = (m[15] >> 16) & 1;\n        m[14] &= 0xffff;\n        fe25519Cmov(t, m, 1 - b);\n    }\n    for (let i = 0; i < 16; ++i) {\n        let ti = t[i] as u32;\n        o[2 * i + 0] = ti & 0xff;\n        o[2 * i + 1] = ti >> 8;\n    }\n}\n\nfunction fe25519Unpack(o: Fe25519, n: Fe25519Packed): void {\n    let nb = n.buffer;\n    for (let i = 0; i < 16; ++i) {\n        o[i] = LOAD<u16, i64>(nb, i);\n    }\n    o[15] &= 0x7fff;\n}\n\nfunction fe25519Eq(a: Fe25519, b: Fe25519): bool {\n    let c = newFe25519Packed(), d = newFe25519Packed();\n\n    fe25519Pack(c, a);\n    fe25519Pack(d, b);\n\n    return verify32(c, d);\n}\n\nfunction fe25519IsNegative(a: Fe25519): bool {\n    let d = newFe25519Packed();\n\n    fe25519Pack(d, a);\n\n    return (d[0] & 1) as bool;\n}\n\nfunction fe25519Cneg(h: Fe25519, f: Fe25519, b: bool): void {\n    let negf = newFe25519();\n    fe25519Sub(negf, fe25519_0, f);\n    fe25519Copy(h, f);\n    fe25519Cmov(h, negf, b as i64);\n}\n\nfunction fe25519Abs(h: Fe25519, f: Fe25519): void {\n    fe25519Cneg(h, f, fe25519IsNegative(f));\n}\n\nfunction fe25519IsZero(a: Fe25519): bool {\n    let b = newFe25519Packed();\n\n    fe25519Pack(b, a);\n    let c: i64 = 0;\n    for (let i = 0; i < 16; i++) {\n        c |= b[i];\n    }\n    return c === 0;\n}\n\n@inline function fe25519Add(o: Fe25519, a: Fe25519, b: Fe25519): void {\n    for (let i = 0; i < 16; ++i) {\n        o[i] = a[i] + b[i];\n    }\n}\n\n@inline function fe25519Sub(o: Fe25519, a: Fe25519, b: Fe25519): void {\n    for (let i = 0; i < 16; ++i) {\n        o[i] = a[i] - b[i];\n    }\n}\n\nfunction fe25519Carry(o: Fe25519): void {\n    let c: i64;\n\n    for (let i = 0; i < 15; ++i) {\n        o[i] += (1 << 16);\n        c = o[i] >> 16;\n        o[(i + 1)] += c - 1;\n        o[i] -= c << 16;\n    }\n    o[15] += (1 << 16);\n    c = o[15] >> 16;\n    o[0] += c - 1 + 37 * (c - 1);\n    o[15] -= c << 16;\n}\n\n@inline function fe25519Reduce(o: Fe25519, a: Fe25519): void {\n    for (let i = 0; i < 15; ++i) {\n        a[i] += 38 as i64 * a[i + 16];\n    }\n    fe25519Copy(o, a);\n    fe25519Carry(o);\n    fe25519Carry(o);\n}\n\nfunction fe25519Mult(o: Fe25519, a: Fe25519, b: Fe25519): void {\n    let t = new Int64Array(31 + 1);\n\n    for (let i = 0; i < 16; ++i) {\n        let ai = a[i];\n        for (let j = 0; j < 16; ++j) {\n            t[i + j] += ai * unchecked(b[j]);\n        }\n    }\n    fe25519Reduce(o, t);\n}\n\n@inline function fe25519Sq(o: Fe25519, a: Fe25519): void {\n    fe25519Mult(o, a, a);\n}\n\nfunction fe25519Inverse(o: Fe25519, i: Fe25519): void {\n    let c = newFe25519();\n\n    fe25519Copy(c, i);\n    for (let a = 253; a >= 5; --a) {\n        fe25519Sq(c, c);\n        fe25519Mult(c, c, i);\n    }\n    fe25519Sq(c, c);\n    fe25519Sq(c, c);\n    fe25519Mult(c, c, i);\n    fe25519Sq(c, c);\n    fe25519Sq(c, c);\n    fe25519Mult(c, c, i);\n    fe25519Sq(c, c);\n    fe25519Mult(c, c, i);\n    fe25519Copy(o, c);\n}\n\nfunction fe25519Pow2523(o: Fe25519, i: Fe25519): void {\n    let c = newFe25519();\n\n    fe25519Copy(c, i);\n    for (let a = 250; a >= 2; --a) {\n        fe25519Sq(c, c);\n        fe25519Mult(c, c, i);\n    }\n    fe25519Sq(c, c);\n    fe25519Sq(c, c);\n    fe25519Mult(c, c, i);\n    fe25519Copy(o, c);\n}\n\n// Ed25519 group arithmetic\n\n@sealed @unmanaged\nclass Ge {\n    x: Fe25519;\n    y: Fe25519;\n    z: Fe25519;\n    t: Fe25519;\n\n    @inline constructor() {\n        this.x = newFe25519();\n        this.y = newFe25519();\n        this.z = newFe25519();\n        this.t = newFe25519();\n    }\n}\n\ntype GePacked = Uint8Array(32);\n\n@inline function newGe(): Ge {\n    return new Ge();\n}\n\n@inline function newGePacked(): GePacked {\n    return new Uint8Array(32);\n}\n\n@inline function geCopy(r: Ge, a: Ge): void {\n    fe25519Copy(r.x, a.x);\n    fe25519Copy(r.y, a.y);\n    fe25519Copy(r.z, a.z);\n    fe25519Copy(r.t, a.t);\n}\n\nfunction add(p: Ge, q: Ge): void {\n    let a = newFe25519(),\n        b = newFe25519(),\n        c = newFe25519(),\n        d = newFe25519(),\n        e = newFe25519(),\n        f = newFe25519(),\n        g = newFe25519(),\n        h = newFe25519(),\n        t = newFe25519();\n\n    fe25519Sub(a, p.y, p.x);\n    fe25519Sub(t, q.y, q.x);\n    fe25519Mult(a, a, t);\n    fe25519Add(b, p.x, p.y);\n    fe25519Add(t, q.x, q.y);\n    fe25519Mult(b, b, t);\n    fe25519Mult(c, p.t, q.t);\n    fe25519Mult(c, c, D2);\n    fe25519Mult(d, p.z, q.z);\n    fe25519Add(d, d, d);\n    fe25519Sub(e, b, a);\n    fe25519Sub(f, d, c);\n    fe25519Add(g, d, c);\n    fe25519Add(h, b, a);\n\n    fe25519Mult(p.x, e, f);\n    fe25519Mult(p.y, h, g);\n    fe25519Mult(p.z, g, f);\n    fe25519Mult(p.t, e, h);\n}\n\n@inline function cmov(p: Ge, q: Ge, b: i64): void {\n    fe25519Cmov(p.x, q.x, b);\n    fe25519Cmov(p.y, q.y, b);\n    fe25519Cmov(p.z, q.z, b);\n    fe25519Cmov(p.t, q.t, b);\n}\n\nfunction pack(r: GePacked, p: Ge): void {\n    let tx = newFe25519(),\n        ty = newFe25519(),\n        zi = newFe25519();\n    fe25519Inverse(zi, p.z);\n    fe25519Mult(tx, p.x, zi);\n    fe25519Mult(ty, p.y, zi);\n    fe25519Pack(r, ty);\n    r[31] ^= (fe25519IsNegative(tx) as u8) << 7;\n}\n\nfunction scalarmult(p: Ge, s: ScalarPacked, q: Ge): void {\n    let pc: Array<Ge> = [newGe(), newGe(), newGe(), newGe(), newGe(), newGe(), newGe(), newGe(),\n    newGe(), newGe(), newGe(), newGe(), newGe(), newGe(), newGe(), newGe()];\n    let t = newGe(),\n        b: u32;\n\n    fe25519Copy(pc[0].x, fe25519_0);\n    fe25519Copy(pc[0].y, fe25519_1);\n    fe25519Copy(pc[0].z, fe25519_1);\n    fe25519Copy(pc[0].t, fe25519_0);\n    geCopy(pc[1], q);\n    for (let i = 2; i < 16; ++i) {\n        geCopy(pc[i], pc[i - 1]);\n        add(pc[i], q);\n    }\n\n    geCopy(p, pc[0]);\n    for (let i = 252; i >= 0; i -= 4) {\n        b = (s[(i >>> 3)] >>> (i as u8 & 7)) & 0xf;\n        add(p, p);\n        add(p, p);\n        add(p, p);\n        add(p, p);\n        cmov(t, unchecked(pc[15]), ((b - 16) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[14]), ((b - 15) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[13]), ((b - 14) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[12]), ((b - 13) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[11]), ((b - 12) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[10]), ((b - 11) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[9]), ((b - 10) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[8]), ((b - 9) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[7]), ((b - 8) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[6]), ((b - 7) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[5]), ((b - 6) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[4]), ((b - 5) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[3]), ((b - 4) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[2]), ((b - 3) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[1]), ((b - 2) >>> 8) as u8 & 1);\n        cmov(t, unchecked(pc[0]), ((b - 1) >>> 8) as u8 & 1);\n        add(p, t);\n    }\n}\n\nfunction scalarmultBase(p: Ge, s: ScalarPacked): void {\n    let q = newGe(),\n        t = newGe(),\n        b: u8;\n\n    fe25519Copy(p.x, fe25519_0);\n    fe25519Copy(p.y, fe25519_1);\n    fe25519Copy(p.z, fe25519_1);\n    fe25519Copy(p.t, fe25519_0);\n\n    fe25519Copy(q.z, fe25519_1);\n\n    let precomp_base = precompBase();\n    for (let i = 0; i <= 255; ++i) {\n        b = (s[(i >>> 3)] >>> (i as u8 & 7)) & 1;\n        let precomp = precomp_base[i];\n        q.x = fe25519(precomp[0]);\n        q.y = fe25519(precomp[1]);\n        q.t = fe25519(precomp[2]);\n        geCopy(t, p);\n        add(t, q);\n        cmov(p, t, b);\n    }\n}\n\n// Ed25519 encoding\n\nfunction unpack(r: Ge, p: GePacked, neg: bool = false): bool {\n    let t = newFe25519(),\n        chk = newFe25519(),\n        num = newFe25519(),\n        den = newFe25519(),\n        den2 = newFe25519(),\n        den4 = newFe25519(),\n        den6 = newFe25519();\n\n    fe25519Copy(r.z, fe25519_1);\n    fe25519Unpack(r.y, p);\n    fe25519Sq(num, r.y);\n    fe25519Mult(den, num, D);\n    fe25519Sub(num, num, r.z);\n    fe25519Add(den, r.z, den);\n    fe25519Sq(den2, den);\n    fe25519Sq(den4, den2);\n    fe25519Mult(den6, den4, den2);\n    fe25519Mult(t, den6, num);\n    fe25519Mult(t, t, den);\n    fe25519Pow2523(t, t);\n    fe25519Mult(t, t, num);\n    fe25519Mult(t, t, den);\n    fe25519Mult(t, t, den);\n    fe25519Mult(r.x, t, den);\n    fe25519Sq(chk, r.x);\n    fe25519Mult(chk, chk, den);\n    if (!fe25519Eq(chk, num)) {\n        fe25519Mult(r.x, r.x, SQRTM1);\n    }\n    fe25519Sq(chk, r.x);\n    fe25519Mult(chk, chk, den);\n    if (!fe25519Eq(chk, num)) {\n        return false;\n    }\n    if ((fe25519IsNegative(r.x) as u8 === (p[31] >> 7)) === neg) {\n        fe25519Sub(r.x, fe25519_0, r.x);\n    }\n    fe25519Mult(r.t, r.x, r.y);\n\n    return true;\n}\n\n@inline function isIdentity(s: GePacked): bool {\n    return allZeros(s);\n}\n\nfunction isCanonical(s: GePacked): bool {\n    if (allZeros(s)) {\n        return false;\n    }\n    let c: u32 = (s[31] & 0x7f) ^ 0x7f;\n    for (let i = 30; i > 0; --i) {\n        c |= s[i] ^ 0xff;\n    }\n    c = (c - 1) >> 8;\n    let d = ((0xed - 1) as u32 - (s[0] as u32)) >> 8;\n\n    return !(c & d & 1);\n}\n\n// Ristretto encoding\n\nfunction ristrettoSqrtRatioM1(x: Fe25519, u: Fe25519, v: Fe25519): bool {\n    let v3 = newFe25519(), vxx = newFe25519(),\n        m_root_check = newFe25519(), p_root_check = newFe25519(), f_root_check = newFe25519(),\n        x_sqrtm1 = newFe25519();\n    fe25519Sq(v3, v);\n    fe25519Mult(v3, v3, v);\n    fe25519Sq(x, v3);\n    fe25519Mult(x, x, v);\n    fe25519Mult(x, x, u);\n\n    fe25519Pow2523(x, x);\n    fe25519Mult(x, x, v3);\n    fe25519Mult(x, x, u);\n\n    fe25519Sq(vxx, x);\n    fe25519Mult(vxx, vxx, v);\n    fe25519Sub(m_root_check, vxx, u);\n    fe25519Add(p_root_check, vxx, u);\n    fe25519Mult(f_root_check, u, SQRTM1);\n    fe25519Add(f_root_check, vxx, f_root_check);\n    let has_m_root = fe25519IsZero(m_root_check);\n    let has_p_root = fe25519IsZero(p_root_check);\n    let has_f_root = fe25519IsZero(f_root_check);\n    fe25519Mult(x_sqrtm1, x, SQRTM1);\n\n    fe25519Cmov(x, x_sqrtm1, (has_p_root | has_f_root) as i64);\n    fe25519Abs(x, x);\n\n    return has_m_root | has_p_root;\n}\n\nfunction ristrettoIsCanonical(s: GePacked): bool {\n    let c = ((s[31] & 0x7f) ^ 0x7f) as u64;\n    for (let i = 30; i > 0; i--) {\n        c |= s[i] ^ 0xff;\n    }\n    c = (c - 1) >> 8;\n    let d = (0xed as u64 - 1 as u64 - (s[0] as u64)) >> 8;\n\n    return (1 - (((c & d) | s[0]) & 1)) as bool;\n}\n\nfunction ristrettoUnpack(h: Ge, s: GePacked, neg: bool = false): bool {\n    let inv_sqrt = newFe25519(), s_ = newFe25519(), ss = newFe25519(),\n        u1 = newFe25519(), u2 = newFe25519(), u1u1 = newFe25519(), u2u2 = newFe25519(),\n        v = newFe25519(), v_u2u2 = newFe25519();\n\n    if (!ristrettoIsCanonical(s)) {\n        return false;\n    }\n    fe25519Unpack(s_, s);\n    fe25519Sq(ss, s_);\n\n    fe25519Copy(u1, fe25519_1);\n    fe25519Sub(u1, u1, ss);\n    fe25519Sq(u1u1, u1);\n\n    fe25519Copy(u2, fe25519_1);\n    fe25519Add(u2, u2, ss);\n    fe25519Sq(u2u2, u2);\n\n    fe25519Mult(v, D, u1u1);\n    fe25519Sub(v, fe25519_0, v);\n    fe25519Sub(v, v, u2u2);\n\n    fe25519Mult(v_u2u2, v, u2u2);\n\n    let was_square = ristrettoSqrtRatioM1(inv_sqrt, fe25519_1, v_u2u2);\n    let x = h.x, y = h.y, z = h.z, t = h.t;\n\n    fe25519Mult(x, inv_sqrt, u2);\n    fe25519Mult(y, inv_sqrt, x);\n    fe25519Mult(y, y, v);\n\n    fe25519Mult(x, x, s_);\n    fe25519Add(x, x, x);\n    fe25519Abs(x, x);\n    fe25519Mult(y, u1, y);\n\n    fe25519Copy(z, fe25519_1);\n    if (neg) {\n        fe25519Sub(y, fe25519_0, y);\n    }\n    fe25519Mult(t, x, y);\n\n    return !((!was_square) | (fe25519IsNegative(t) ^ neg) | fe25519IsZero(y));\n}\n\nfunction ristrettoPack(s: GePacked, h: Ge): void {\n    let den1 = newFe25519(), den2 = newFe25519(), den_inv = newFe25519(), eden = newFe25519(),\n        inv_sqrt = newFe25519(), ix = newFe25519(), iy = newFe25519(), s_ = newFe25519(),\n        t_z_inv = newFe25519(), u1 = newFe25519(), u2 = newFe25519(), u1_u2u2 = newFe25519(),\n        x_ = newFe25519(), y_ = newFe25519(), x_z_inv = newFe25519(), z_inv = newFe25519(),\n        zmy = newFe25519();\n    let x = h.x, y = h.y, z = h.z, t = h.t;\n\n    fe25519Add(u1, z, y);\n    fe25519Sub(zmy, z, y);\n    fe25519Mult(u1, u1, zmy);\n    fe25519Mult(u2, x, y);\n\n    fe25519Sq(u1_u2u2, u2);\n    fe25519Mult(u1_u2u2, u1, u1_u2u2);\n\n    ristrettoSqrtRatioM1(inv_sqrt, fe25519_1, u1_u2u2);\n    fe25519Mult(den1, inv_sqrt, u1);\n    fe25519Mult(den2, inv_sqrt, u2);\n    fe25519Mult(z_inv, den1, den2);\n    fe25519Mult(z_inv, z_inv, t);\n\n    fe25519Mult(ix, x, SQRTM1);\n    fe25519Mult(iy, y, SQRTM1);\n    fe25519Mult(eden, den1, INVSQRTAMD);\n\n    fe25519Mult(t_z_inv, t, z_inv);\n    let rotate = fe25519IsNegative(t_z_inv) as i64;\n\n    fe25519Copy(x_, x);\n    fe25519Copy(y_, y);\n    fe25519Copy(den_inv, den2);\n\n    fe25519Cmov(x_, iy, rotate);\n    fe25519Cmov(y_, ix, rotate);\n    fe25519Cmov(den_inv, eden, rotate);\n\n    fe25519Mult(x_z_inv, x_, z_inv);\n    fe25519Cneg(y_, y_, fe25519IsNegative(x_z_inv));\n\n    fe25519Sub(s_, z, y_);\n    fe25519Mult(s_, den_inv, s_);\n    fe25519Abs(s_, s_);\n    fe25519Pack(s, s_);\n}\n\n@inline function ristrettoIsIdentity(s: GePacked): bool {\n    return allZeros(s);\n}\n\nfunction ristrettoElligator(p: Ge, t: Fe25519): void {\n    let c = newFe25519(), n = newFe25519(), r = newFe25519(), rpd = newFe25519(),\n        s = newFe25519(), s_prime = newFe25519(), ss = newFe25519(),\n        u = newFe25519(), v = newFe25519(),\n        w0 = newFe25519(), w1 = newFe25519(), w2 = newFe25519(), w3 = newFe25519();\n\n    fe25519Sq(r, t);\n    fe25519Mult(r, SQRTM1, r);\n    fe25519Add(u, r, fe25519_1);\n    fe25519Mult(u, u, ONEMSQD);\n    fe25519Sub(c, fe25519_0, fe25519_1);\n    fe25519Add(rpd, r, D);\n    fe25519Mult(v, r, D);\n    fe25519Sub(v, c, v);\n    fe25519Mult(v, v, rpd);\n\n    let wasnt_square = 1 - (ristrettoSqrtRatioM1(s, u, v) as i64);\n    fe25519Mult(s_prime, s, t);\n    fe25519Abs(s_prime, s_prime);\n    fe25519Sub(s_prime, fe25519_0, s_prime);\n    fe25519Cmov(s, s_prime, wasnt_square);\n    fe25519Cmov(c, r, wasnt_square);\n\n    fe25519Sub(n, r, fe25519_1);\n    fe25519Mult(n, n, c);\n    fe25519Mult(n, n, SQDMONE);\n    fe25519Sub(n, n, v);\n\n    fe25519Add(w0, s, s);\n    fe25519Mult(w0, w0, v);\n    fe25519Mult(w1, n, SQRTADM1);\n    fe25519Sq(ss, s);\n    fe25519Sub(w2, fe25519_1, ss);\n    fe25519Add(w3, fe25519_1, ss);\n\n    fe25519Mult(p.x, w0, w3);\n    fe25519Mult(p.y, w2, w1);\n    fe25519Mult(p.z, w1, w3);\n    fe25519Mult(p.t, w0, w2);\n}\n\ntype Uniform = Uint8Array(64);\n\nfunction ristrettoFromUniform(s: GePacked, r: Uniform): void {\n    let r0 = newFe25519(), r1 = newFe25519();\n    let p0 = newGe(), p1 = newGe();\n\n    fe25519Unpack(r0, r.subarray(0, 32));\n    fe25519Unpack(r1, r.subarray(32, 64));\n    ristrettoElligator(p0, r0);\n    ristrettoElligator(p1, r1);\n    add(p0, p1);\n    ristrettoPack(s, p0);\n}\n\n// Common functions used for signatures\n\nfunction _signSyntheticRHv(hs: Uint8Array, r: isize, Z: Uint8Array, sk: Uint8Array): isize {\n    let zeros = new Uint8Array(128);\n    let empty_labelset = new Uint8Array(3);\n    let Zlen = Z.length;\n\n    if (Zlen > 128 - (32 + 3)) {\n        Z = hash(Z);\n        Zlen = Z.length;\n    }\n    empty_labelset[0] = 0x02;\n\n    r = _hashUpdate(hs, B, 32, r);\n    r = _hashUpdate(hs, empty_labelset, 3, r);\n    r = _hashUpdate(hs, Z, Zlen, r);\n    r = _hashUpdate(hs, zeros, 128 - ((32 + 3 + Zlen) & 127), r);\n    r = _hashUpdate(hs, sk, 32, r);\n    r = _hashUpdate(hs, zeros, 128 - (32 & 127), r);\n    r = _hashUpdate(hs, empty_labelset, 3, r);\n    r = _hashUpdate(hs, sk.subarray(32), 32, r);\n\n    return r;\n}\n\nlet B = newFe25519Packed();\nfor (let i = 0; i < 32; ++i) {\n    B[i] = 0x66;\n}\n\n// Ed25519\n\ntype KeyPair = Uint8Array(64);\ntype Signature = Uint8Array(64);\n\nfunction _signEdKeypairFromSeed(kp: KeyPair): void {\n    let d = new Uint8Array(64);\n    let p = newGe();\n\n    _hash(d, kp, 32);\n    scClamp(d);\n    scalarmultBase(p, d);\n    pack(kp.subarray(32), p);\n}\n\nfunction _signEdDetached(sig: Signature, m: Uint8Array, kp: KeyPair, Z: Uint8Array): void {\n    let R = newGe();\n    let az = new Uint8Array(64);\n    let nonce = new Uint8Array(64);\n    let hram = new Uint8Array(64);\n    let x = new Int64Array(64);\n    let mlen = m.length;\n    let hs = _hashInit();\n    let r: isize = 0;\n\n    _hash(az, kp, 32);\n    if (Z.length > 0) {\n        r = _signSyntheticRHv(hs, r, Z, az);\n    } else {\n        r = _hashUpdate(hs, az.subarray(32), 32, r);\n    }\n    r = _hashUpdate(hs, m, mlen, r);\n    _hashFinal(hs, nonce, 32 + mlen, r);\n    setU8(sig, kp.subarray(32), 32);\n\n    scReduce(nonce);\n    scalarmultBase(R, nonce);\n    pack(sig, R);\n\n    hs = _hashInit();\n    r = _hashUpdate(hs, sig, 64, 0);\n    r = _hashUpdate(hs, m, mlen, r);\n    _hashFinal(hs, hram, 64 + mlen, r);\n    scReduce(hram);\n    scClamp(az);\n    for (let i = 0; i < 32; ++i) {\n        x[i] = nonce[i];\n    }\n    for (let i = 0; i < 32; ++i) {\n        for (let j = 0; j < 32; ++j) {\n            x[i + j] += unchecked((hram[i] as i64) * (az[j] as i64));\n        }\n    }\n    scModL(sig.subarray(32), x);\n}\n\nfunction _signEdVerifyDetached(sig: Signature, m: Uint8Array, pk: GePacked): bool {\n    if (!isCanonical(pk) || isIdentity(pk) || !scIsLtL(sig.subarray(32))) {\n        return false;\n    }\n    let A = newGe();\n    if (!unpack(A, pk, true)) {\n        return false;\n    }\n    let h = new Uint8Array(64);\n    let hs = _hashInit();\n    let r = _hashUpdate(hs, sig, 32, 0);\n    r = _hashUpdate(hs, pk, 32, r);\n    r = _hashUpdate(hs, m, m.length, r);\n    _hashFinal(hs, h, 32 + 32 + m.length, r);\n    scReduce(h);\n\n    let R = newGe();\n    let rcheck = newFe25519Packed();\n    scalarmult(R, h, A);\n    scalarmultBase(A, sig.subarray(32));\n    add(R, A);\n    pack(rcheck, R);\n\n    return verify32(rcheck, sig.subarray(0, 32));\n}\n\n// Signatures over Ristretto\n\nfunction _signKeypairFromSeed(kp: KeyPair): void {\n    let d = new Uint8Array(64);\n    let p = newGe();\n\n    _hash(d, kp, 32);\n    scalarmultBase(p, d);\n    ristrettoPack(kp.subarray(32), p);\n}\n\nfunction _signDetached(sig: Signature, m: Uint8Array, kp: KeyPair, Z: Uint8Array): void {\n    let R = newGe();\n    let az = new Uint8Array(64);\n    let nonce = new Uint8Array(64);\n    let hram = new Uint8Array(64);\n    let x = new Int64Array(64);\n    let mlen = m.length;\n    let hs = _hashInit();\n    let r: isize = 0;\n\n    _hash(az, kp, 32);\n    if (Z.length > 0) {\n        r = _signSyntheticRHv(hs, r, Z, az);\n    } else {\n        r = _hashUpdate(hs, az.subarray(32), 32, r);\n    }\n    r = _hashUpdate(hs, m, mlen, r);\n    _hashFinal(hs, nonce, 32 + mlen, r);\n    setU8(sig, kp.subarray(32), 32);\n\n    scReduce(nonce);\n    scalarmultBase(R, nonce);\n    ristrettoPack(sig, R);\n\n    hs = _hashInit();\n    r = _hashUpdate(hs, sig, 64, 0);\n    r = _hashUpdate(hs, m, mlen, r);\n    _hashFinal(hs, hram, 64 + mlen, r);\n    scReduce(hram);\n    for (let i = 0; i < 32; ++i) {\n        x[i] = nonce[i];\n    }\n    for (let i = 0; i < 32; ++i) {\n        for (let j = 0; j < 32; ++j) {\n            x[i + j] += unchecked((hram[i] as i64) * (az[j] as i64));\n        }\n    }\n    scModL(sig.subarray(32), x);\n}\n\nfunction _signVerifyDetached(sig: Signature, m: Uint8Array, pk: GePacked): bool {\n    if (ristrettoIsIdentity(pk) || !scIsLtL(sig.subarray(32))) {\n        return false;\n    }\n    let A = newGe();\n    if (!ristrettoUnpack(A, pk, true)) {\n        return false;\n    }\n    let h = new Uint8Array(64);\n    let hs = _hashInit();\n    let r = _hashUpdate(hs, sig, 32, 0);\n    r = _hashUpdate(hs, pk, 32, r);\n    r = _hashUpdate(hs, m, m.length, r);\n    _hashFinal(hs, h, 32 + 32 + m.length, r);\n    scReduce(h);\n\n    let R = newGe();\n    let rcheck = newFe25519Packed();\n    scalarmult(R, h, A);\n    scalarmultBase(A, sig.subarray(32));\n    add(R, A);\n\n    ristrettoPack(rcheck, R);\n\n    return verify32(rcheck, sig.subarray(0, 32));\n}\n\n// Exported API\n\n/**\n * Signature size, in bytes\n */\n@global export const SIGN_BYTES: isize = 64;\n\n/**\n * Public key size, in bytes\n */\n@global export const SIGN_PUBLICKEYBYTES: isize = 32;\n\n/**\n * Secret key size, in bytes\n */\n@global export const SIGN_SECRETKEYBYTES: isize = 32;\n\n/**\n * Key pair size, in bytes\n */\n@global export const SIGN_KEYPAIRBYTES: isize = 64;\n\n/**\n * Seed size, in bytes\n */\n@global export const SIGN_SEEDBYTES: isize = 32;\n\n/**\n * Recommended random bytes size, in bytes\n */\n@global export const SIGN_RANDBYTES: isize = 32;\n\n/**\n * Ed25519 signature size, in bytes\n */\n@global export const SIGN_ED_BYTES: isize = 64;\n\n/**\n * Ed25519 public key size, in bytes\n */\n@global export const SIGN_ED_PUBLICKEYBYTES: isize = 32;\n\n/**\n * Ed25519 secret key size, in bytes\n */\n@global export const SIGN_ED_SECRETKEYBYTES: isize = 32;\n\n/**\n * Ed25519 key pair size, in bytes\n */\n@global export const SIGN_ED_KEYPAIRBYTES: isize = 64;\n\n/**\n * Ed25519 seed size, in bytes\n */\n@global export const SIGN_ED_SEEDBYTES: isize = 32;\n\n/**\n * Non-deterministic Ed25519 recommended random bytes size, in bytes\n */\n@global export const SIGN_ED_RANDBYTES: isize = 32;\n\n/**\n * Hash function output size, in bytes\n */\n@global export const HASH_BYTES: isize = 64;\n\n/**\n * HMAC output size, in bytes\n */\n@global export const HMAC_BYTES: isize = 64;\n\n/**\n * Size of an encoded scalar, in bytes\n */\n@global export const FA_SCALARBYTES: isize = 32;\n\n/**\n * Size of an encoded point, in bytes\n */\n@global export const FA_POINTBYTES: isize = 32;\n\n/**\n * Fill an array with zeros\n * @param x Array to clear\n */\n@global export function memzero(x: Uint8Array): void {\n    for (let i = 0, j = x.length; i < j; ++i) {\n        x[i] = 0;\n    }\n}\n\n/**\n * Check two arrays for equality\n * @param x First array\n * @param y Second array\n * @returns true if `x === y`\n */\n@global export function equals(x: Uint8Array, y: Uint8Array): bool {\n    let len = x.length;\n    let d: u8 = 0;\n\n    if (len === 0 || len !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < len; ++i) {\n        d |= x[i] ^ y[i];\n    }\n    return d === 0;\n}\n\n/**\n * Sign a message and returns its signature.\n * @param m Message to sign\n * @param kp Key pair (`SIGN_KEYPAIRBYTES` long)\n * @param Z Random bytes. This can be an empty array to produce deterministic\n *     signatures\n * @returns Signature\n */\n@global export function sign(m: Uint8Array, kp: Uint8Array, Z: Uint8Array): Uint8Array {\n    let sig = new Uint8Array(SIGN_BYTES);\n    _signDetached(sig, m, kp, Z);\n\n    return sig;\n}\n\n/**\n * Verify a signature\n * @param m Message\n * @param sig Signature\n * @param pk Public key\n * @returns `true` on success\n */\n@global export function signVerify(sig: Uint8Array, m: Uint8Array, pk: Uint8Array): bool {\n    if (sig.length !== SIGN_BYTES) {\n        throw new Error('bad signature size');\n    }\n    if (pk.length !== SIGN_PUBLICKEYBYTES) {\n        throw new Error('bad public key size');\n    }\n    return _signVerifyDetached(sig, m, pk);\n}\n\n/**\n * Create a new key pair from a seed\n * @param seed Seed (`SIGN_SEEDBYTES` long)\n * @returns Key pair\n */\n@global export function signKeypairFromSeed(seed: Uint8Array): Uint8Array {\n    if (seed.length !== SIGN_SEEDBYTES) {\n        throw new Error('bad seed size');\n    }\n    let kp = new Uint8Array(SIGN_KEYPAIRBYTES);\n    for (let i = 0; i < 32; ++i) {\n        kp[i] = seed[i];\n    }\n    _signKeypairFromSeed(kp);\n\n    return kp;\n}\n\n/**\n * Return the public key from a key pair\n * @param kp Key pair\n * @returns Public key\n */\n@global export function signPublicKey(kp: Uint8Array): Uint8Array {\n    const len = SIGN_PUBLICKEYBYTES;\n    let pk = new Uint8Array(len);\n\n    for (let i = 0; i < len; ++i) {\n        pk[i] = kp[i + 32];\n    }\n    return pk;\n}\n\n/**\n * Return the secret key from a key pair\n * @param kp Key pair\n * @returns Secret key\n */\n@global export function signSecretKey(kp: Uint8Array): Uint8Array {\n    const len = SIGN_SECRETKEYBYTES;\n    let sk = new Uint8Array(len);\n\n    for (let i = 0; i < len; ++i) {\n        sk[i] = kp[i];\n    }\n    return sk;\n}\n\n/**\n * Sign a message using Ed25519 and returns its signature.\n * @param m Message to sign\n * @param kp Key pair (`SIGN_ED_KEYPAIRBYTES` long)\n * @param Z Random bytes. This can be an empty array to produce deterministic\n *     signatures\n * @returns Signature\n */\n@global export function signEd(m: Uint8Array, kp: Uint8Array, Z: Uint8Array): Uint8Array {\n    let sig = new Uint8Array(SIGN_ED_BYTES);\n    _signEdDetached(sig, m, kp, Z);\n\n    return sig;\n}\n\n/**\n * Verify a signature using Ed25519\n * @param m Message\n * @param sig Signature\n * @param pk Public key\n * @returns `true` on success\n */\n@global export function signEdVerify(sig: Uint8Array, m: Uint8Array, pk: Uint8Array): bool {\n    if (sig.length !== SIGN_ED_BYTES) {\n        throw new Error('bad signature size');\n    }\n    if (pk.length !== SIGN_ED_PUBLICKEYBYTES) {\n        throw new Error('bad public key size');\n    }\n    return _signEdVerifyDetached(sig, m, pk);\n}\n\n/**\n * Create a new Ed25519 key pair from a seed\n * @param seed Seed (`SIGN_ED_SEEDBYTES` long)\n * @returns Key pair\n */\n@global export function signEdKeypairFromSeed(seed: Uint8Array): Uint8Array {\n    if (seed.length !== SIGN_ED_SEEDBYTES) {\n        throw new Error('bad seed size');\n    }\n    let kp = new Uint8Array(SIGN_ED_KEYPAIRBYTES);\n    for (let i = 0; i < 32; ++i) {\n        kp[i] = seed[i];\n    }\n    _signEdKeypairFromSeed(kp);\n\n    return kp;\n}\n\n/**\n * Return the public key from an Ed25519 key pair\n * @param kp Key pair\n * @returns Public key\n */\n@global export function signEdPublicKey(kp: Uint8Array): Uint8Array {\n    const len = SIGN_ED_PUBLICKEYBYTES;\n    let pk = new Uint8Array(len);\n\n    for (let i = 0; i < len; ++i) {\n        pk[i] = kp[i + 32];\n    }\n    return pk;\n}\n\n/**\n * Return the secret key from an Ed25519ED_ key pair\n * @param kp Key pair\n * @returns Secret key\n */\n@global export function signEdSecretKey(kp: Uint8Array): Uint8Array {\n    const len = SIGN_ED_SECRETKEYBYTES;\n    let sk = new Uint8Array(len);\n\n    for (let i = 0; i < len; ++i) {\n        sk[i] = kp[i];\n    }\n    return sk;\n}\n\n/**\n * Initialize a multipart hash computation\n * @returns A hash function state\n */\n@global export function hashInit(): Uint8Array {\n    return _hashInit();\n}\n\n/**\n * Absorb data to be hashed\n * @param st Hash function state\n * @param m (partial) message\n */\n@global export function hashUpdate(st: Uint8Array, m: Uint8Array): void {\n    let r = load64(st, 64 + 128);\n    let t = load64(st, 64 + 128 + 8);\n    let n = m.length;\n\n    t += n;\n    r = _hashUpdate(st, m, n, r as isize);\n    store64(st, 64 + 128, r as u64);\n    store64(st, 64 + 128 + 8, t as u64);\n}\n\n/**\n * Finalize a hash computation\n * @param st Hash function state\n * @returns Hash\n */\n@global export function hashFinal(st: Uint8Array): Uint8Array {\n    let h = new Uint8Array(HASH_BYTES);\n    let r = load64(st, 64 + 128);\n    let t = load64(st, 64 + 128 + 8);\n\n    _hashFinal(st, h, t as isize, r as isize);\n\n    return h;\n}\n\n/**\n * Compute a hash for a single-part message\n * @param m Message\n * @returns Hash\n */\n@global export function hash(m: Uint8Array): Uint8Array {\n    let st = hashInit();\n\n    hashUpdate(st, m);\n\n    return hashFinal(st);\n}\n\n/**\n * HMAC-SHA-512\n * @param m Message\n * @param k Key\n * @returns `HMAC-SHA-512(m, k)`\n */\n@global export function hmac(m: Uint8Array, k: Uint8Array): Uint8Array {\n    return _hmac(m, k);\n}\n\n/**\n * Compute the multiplicative inverse of a scalar\n * @param s Scalar\n * @returns `s^-1`\n */\n@global export function faScalarInverse(s: Uint8Array): Uint8Array {\n    return scInverse(s);\n}\n\n/**\n * Compute s mod the order of the prime order group\n *\n * @param s Scalar (between 32 and 64 bytes)\n * @returns `s` reduced mod `L`\n */\n@global export function faScalarReduce(s: Uint8Array): Uint8Array {\n    let s_: Uniform = new Uint8Array(64);\n    if (s.length < 32 || s.length > 64) {\n        throw new Error('faScalarReduce() argument should be between 32 and 64 bytes long');\n    }\n    setU8(s_, s);\n    scReduce(s_);\n    let r = newScalarPacked();\n    for (let i = 0; i < 32; ++i) {\n        r[i] = s_[i];\n    }\n    return r;\n}\n\n/**\n * Multiply `s` by the group cofactor\n *\n * @param s Scalar (32 bytes)\n * @returns `s * 8`\n */\n@global export function faScalarCofactorMult(s: Uint8Array): Uint8Array {\n    if (s.length !== 32) {\n        throw new Error('faScalarCofactorMult() argument should be 32 bytes long');\n    }\n    if ((s[31] & 224) !== 0) {\n        throw new Error(\"faScalarCofactorMult() would overflow\");\n    }\n    let r = newScalarPacked(), t: u8 = 0;\n    for (let i = 0; i < 32; i++) {\n        let si = s[i];\n        r[i] = (si << 3) | t;\n        t = (si >>> 5);\n    }\n    return r;\n}\n\n/**\n * Compute the additive inverse of a scalar (mod L)\n * @param s Scalar\n * @returns `-s`\n */\n@global export function faScalarNegate(s: Uint8Array): Uint8Array {\n    let t = newScalarPacked(), t_ = newScalarPacked(), s_ = newScalarPacked();\n\n    for (let i = 0; i < 32; i++) {\n        t_[32 + i] = _L[i] as u8;\n    }\n    setU8(s_, s);\n    scSub(t_, s_);\n    scReduce(t_);\n    setU8(t, t_.subarray(0, 32));\n\n    return t;\n}\n\n/**\n * Compute the complement of a scalar (mod L)\n * @param s Scalar\n * @returns `1-s`\n */\n@global export function faScalarComplement(s: Uint8Array): Uint8Array {\n    let t = newScalarPacked(), t_ = newScalarPacked(), s_ = newScalarPacked();\n    t_[0] = 1;\n    for (let i = 0; i < 32; i++) {\n        t_[32 + i] = _L[i] as u8;\n    }\n    setU8(s_, s);\n    scSub(t_, s_);\n    scReduce(t_);\n    setU8(t, t_.subarray(0, 32));\n\n    return t;\n}\n\n/**\n * Compute `x + y (mod L)`\n * @param x Scalar\n * @param y Scalar\n * @returns `x + y (mod L)`\n */\n@global export function faScalarAdd(x: Uint8Array, y: Uint8Array): Uint8Array {\n    let x_ = newScalarPacked(), y_ = newScalarPacked();\n    setU8(x_, x);\n    setU8(y_, y);\n    scAdd(x_, y_);\n\n    return faScalarReduce(x_);\n}\n\n/**\n * Compute `x - y (mod L)`\n * @param x Scalar\n * @param y Scalar\n * @returns `x - y (mod L)`\n */\n@global export function faScalarSub(x: Uint8Array, y: Uint8Array): Uint8Array {\n    let yn = faScalarNegate(y);\n\n    return faScalarAdd(x, yn);\n}\n\n/**\n * Compute `x * y (mod L)`\n * @param x Scalar\n * @param y Scalar\n * @returns `x * y (mod L)`\n */\n@global export function faScalarMult(x: Uint8Array, y: Uint8Array): Uint8Array {\n    let x_ = newScalar(), y_ = newScalar();\n    let o = newScalar(), o_ = newScalarPacked();\n\n    for (let i = 0; i < 32; i++) {\n        x_[i] = x[i] as i64;\n    }\n    for (let i = 0; i < 32; i++) {\n        y_[i] = y[i] as i64;\n    }\n    scMult(o, x_, y_);\n    for (let i = 0; i < 32; i++) {\n        o_[i] = o[i] as u8;\n    }\n    return o_;\n}\n\n/**\n * Multiply a point `q` by a scalar `s`\n * @param q Compressed EC point\n * @param s Scalar\n * @returns Compressed EC point `q * s`\n */\n@global export function faEdPointMult(s: Uint8Array, q: Uint8Array): Uint8Array {\n    let p_ = newGe();\n    let q_ = newGe();\n    if (!unpack(q_, q, false) || !faEdPointValidate(q)) {\n        return null;\n    }\n    scalarmult(p_, s, q_);\n    let p = newGePacked();\n    pack(p, p_);\n    if (isIdentity(p)) {\n        return null;\n    }\n    return p;\n}\n\n/**\n * Multiply the base point by a scalar `s`\n * @param s Scalar\n * @returns Compressed EC point `B * s`\n */\n@global export function faEdBasePointMult(s: Uint8Array): Uint8Array {\n    if (allZeros(s)) {\n        return null;\n    }\n    let p = newGePacked();\n    let p_ = newGe();\n    scalarmultBase(p_, s);\n    pack(p, p_);\n\n    return p;\n}\n\n/**\n * Multiply a point `q` by a scalar `s` after clamping `s`\n * @param q Compressed EC point\n * @param s Scalar\n * @returns Compressed EC point `q * clamp(s)`\n */\n@global export function faEdPointMultClamp(s: Uint8Array, q: Uint8Array): Uint8Array {\n    let s_ = newScalarPacked();\n    setU8(s_, s);\n    scClamp(s_);\n\n    return faEdPointMult(s, q);\n}\n\n/**\n * Multiply the base point by a clamped scalar `s`\n * @param s Scalar\n * @returns Compressed EC point `B * clamp(s)`\n */\n@global export function faEdBasePointMultClamp(s: Uint8Array): Uint8Array {\n    let s_ = newScalarPacked();\n    setU8(s_, s);\n    scClamp(s_);\n\n    return faEdBasePointMult(s);\n}\n\n/**\n * Verify that the point is on the main subgroup\n * @param q Compressed EC point\n * @returns `true` if verification succeeds\n */\n@global export function faEdPointValidate(q: Uint8Array): bool {\n    let l = newGePacked();\n    let p_ = newGe();\n    let q_ = newGe();\n\n    for (let i = 0; i < 32; ++i) {\n        l[i] = _L[i] as u8;\n    }\n    if (!unpack(q_, q, false)) {\n        return false;\n    }\n    scalarmult(p_, l, q_);\n\n    let c: i64 = 0;\n    let x = p_.x;\n    for (let i = 0; i < 16; ++i) {\n        c |= x[i];\n    }\n    return c === 0;\n}\n\n/**\n * Point addition\n * @param p Compressed EC point\n * @param q Compressed EC point\n * @returns `p` + `q`\n */\n@global export function faEdPointAdd(p: Uint8Array, q: Uint8Array): Uint8Array {\n    let o = newGePacked();\n    let p_ = newGe();\n    let q_ = newGe();\n    if (!unpack(p_, p, false) || !unpack(q_, q, false)) {\n        return null;\n    }\n    add(p_, q_);\n    pack(o, p_);\n\n    return o;\n}\n\n/**\n * Point substraction\n * @param p Compressed EC point\n * @param q Compressed EC point\n * @returns `p` - `q`\n */\n@global export function faEdPointSub(p: Uint8Array, q: Uint8Array): Uint8Array {\n    let o = newGePacked();\n    let p_ = newGe();\n    let q_ = newGe();\n    if (!unpack(p_, p, false) || !unpack(q_, q, true)) {\n        return null;\n    }\n    add(p_, q_);\n    pack(o, p_);\n\n    return o;\n}\n\n/**\n * Multiply a point `q` by a scalar `s`\n * @param q Ristretto-compressed EC point\n * @param s Scalar\n * @returns Compressed EC point `q * s`\n */\n@global export function faPointMult(s: Uint8Array, q: Uint8Array): Uint8Array {\n    let p_ = newGe();\n    let q_ = newGe();\n    if (!ristrettoUnpack(q_, q)) {\n        return null;\n    }\n    scalarmult(p_, s, q_);\n    let p = newGePacked();\n    ristrettoPack(p, p_);\n    if (ristrettoIsIdentity(p)) {\n        return null;\n    }\n    return p;\n}\n\n/**\n * Multiply the base point by a scalar `s`\n * @param s Scalar\n * @returns Ristretto-compressed EC point `B * s`\n */\n@global export function faBasePointMult(s: Uint8Array): Uint8Array {\n    if (allZeros(s)) {\n        return null;\n    }\n    let p = newGePacked();\n    let p_ = newGe();\n    scalarmultBase(p_, s);\n    ristrettoPack(p, p_);\n\n    return p;\n}\n\n/**\n * Verify that the point is on the main subgroup\n * @param q Ristretto-compressed EC point\n * @returns `true` if verification succeeds\n */\n@global export function faPointValidate(q: Uint8Array): bool {\n    let q_ = newGe();\n\n    return (!allZeros(q)) & ristrettoUnpack(q_, q);\n}\n\n/**\n * Point addition\n * @param p Risterto-compressed EC point\n * @param q Risterto-compressed EC point\n * @returns `p` + `q`\n */\n@global export function faPointAdd(p: Uint8Array, q: Uint8Array): Uint8Array {\n    let o = newGePacked();\n    let p_ = newGe();\n    let q_ = newGe();\n    if (!ristrettoUnpack(p_, p) || !ristrettoUnpack(q_, q, false)) {\n        return null;\n    }\n    add(p_, q_);\n    ristrettoPack(o, p_);\n\n    return o;\n}\n\n/**\n * Point substraction\n * @param p Ristretto-compressed EC point\n * @param q Ristretto-compressed EC point\n * @returns `p` - `q`\n */\n@global export function faPointSub(p: Uint8Array, q: Uint8Array): Uint8Array {\n    let o = newGePacked();\n    let p_ = newGe();\n    let q_ = newGe();\n    if (!ristrettoUnpack(p_, p) || !ristrettoUnpack(q_, q, true)) {\n        return null;\n    }\n    add(p_, q_);\n    ristrettoPack(o, p_);\n\n    return o;\n}\n\n/**\n * Hash-to-point\n * @param r 512 bit hash\n * @returns Ristretto-compressed EC point\n */\n@global export function faPointFromUniform(r: Uint8Array): Uint8Array {\n    let p = newGePacked();\n\n    ristrettoFromUniform(p, r);\n\n    return p;\n}\n","import { MAX_SIZE_32 } from \"./allocator\";\nimport { String } from \"../string\";\n\n/** Size of a String header. */\n@inline export const HEADER_SIZE = (offsetof<String>() + 1) & ~1; // 2 byte aligned\n/** Maximum length of a String. */\n@inline export const MAX_LENGTH = (<i32>MAX_SIZE_32 - HEADER_SIZE) >>> 1;\n\n// Low-level utility\n\nfunction __gc(ref: usize): void {}\n\nexport function allocateUnsafe(length: i32): String {\n  assert(length > 0 && length <= MAX_LENGTH);\n  var buffer: usize;\n  if (isManaged<String>()) {\n    buffer = __gc_allocate(HEADER_SIZE + (<usize>length << 1), __gc);  // tslint:disable-line\n  } else {\n    buffer = memory.allocate(HEADER_SIZE + (<usize>length << 1));\n  }\n  store<i32>(buffer, length);\n  return changetype<String>(buffer);\n}\n\n@inline\nexport function freeUnsafe(buffer: String): void {\n  if (!isManaged<String>()) {\n    assert(buffer);\n    memory.free(changetype<usize>(buffer));\n  }\n}\n\nexport function copyUnsafe(dest: String, destOffset: usize, src: String, srcOffset: usize, len: usize): void {\n  memory.copy(\n    changetype<usize>(dest) + (destOffset << 1) + HEADER_SIZE,\n    changetype<usize>(src)  + (srcOffset  << 1) + HEADER_SIZE,\n    len << 1\n  );\n}\n\nexport function compareUnsafe(str1: String, offset1: usize, str2: String, offset2: usize, len: usize): i32 {\n  var cmp: i32 = 0;\n  var ptr1 = changetype<usize>(str1) + (offset1 << 1);\n  var ptr2 = changetype<usize>(str2) + (offset2 << 1);\n  while (len && !(cmp = <i32>load<u16>(ptr1, HEADER_SIZE) - <i32>load<u16>(ptr2, HEADER_SIZE))) {\n    --len, ptr1 += 2, ptr2 += 2;\n  }\n  return cmp;\n}\n\nexport function repeatUnsafe(dest: String, destOffset: usize, src: String, count: i32): void {\n  var length = src.length;\n  if (ASC_SHRINK_LEVEL > 1) {\n    let strLen = length << 1;\n    let to   = changetype<usize>(dest) + HEADER_SIZE + (destOffset << 1);\n    let from = changetype<usize>(src)  + HEADER_SIZE;\n    for (let i = 0, len = strLen * count; i < len; i += strLen) {\n      memory.copy(to + i, from, strLen);\n    }\n  } else {\n    switch (length) {\n      case 0: break;\n      case 1: {\n        let cc =  load<u16>(changetype<usize>(src), HEADER_SIZE);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u16>(out + (i << 1), cc, HEADER_SIZE);\n        }\n        break;\n      }\n      case 2: {\n        let cc  = load<u32>(changetype<usize>(src), HEADER_SIZE);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u32>(out + (i << 2), cc, HEADER_SIZE);\n        }\n        break;\n      }\n      case 3: {\n        let cc1 = load<u32>(changetype<usize>(src), HEADER_SIZE + 0);\n        let cc2 = load<u16>(changetype<usize>(src), HEADER_SIZE + 4);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u32>(out + (i << 2), cc1, HEADER_SIZE + 0);\n          store<u16>(out + (i << 1), cc2, HEADER_SIZE + 4);\n        }\n        break;\n      }\n      case 4: {\n        let cc = load<u64>(changetype<usize>(src), HEADER_SIZE);\n        let out = changetype<usize>(dest) + (destOffset << 1);\n        for (let i = 0; i < count; ++i) {\n          store<u64>(out + (i << 3), cc, HEADER_SIZE);\n        }\n        break;\n      }\n      default: {\n        let strLen = length << 1;\n        let to   = changetype<usize>(dest) + HEADER_SIZE + (destOffset << 1);\n        let from = changetype<usize>(src)  + HEADER_SIZE;\n        for (let i = 0, len = strLen * count; i < len; i += strLen) {\n          memory.copy(to + i, from, strLen);\n        }\n        break;\n      }\n    }\n  }\n}\n\n// Helpers\n\n@inline export const enum CharCode {\n  PLUS = 0x2B,\n  MINUS = 0x2D,\n  DOT = 0x2E,\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n  A = 0x41,\n  B = 0x42,\n  E = 0x45,\n  N = 0x4E,\n  O = 0x4F,\n  X = 0x58,\n  Z = 0x5a,\n  a = 0x61,\n  b = 0x62,\n  e = 0x65,\n  n = 0x6E,\n  o = 0x6F,\n  x = 0x78,\n  z = 0x7A\n}\n\nexport function isWhiteSpaceOrLineTerminator(c: u16): bool {\n  switch (c) {\n    case 9:    // <TAB>\n    case 10:   // <LF>\n    case 13:   // <CR>\n    case 11:   // <VT>\n    case 12:   // <FF>\n    case 32:   // <SP>\n    case 160:  // <NBSP>\n    case 8232: // <LS>\n    case 8233: // <PS>\n    case 65279: return true; // <ZWNBSP>\n    default: return false;\n  }\n}\n\n/** Parses a string to an integer (usually), using the specified radix. */\nexport function parse<T>(str: String, radix: i32 = 0): T {\n  var len: i32 = str.length;\n  if (!len) return <T>NaN;\n\n  var ptr = changetype<usize>(str) /* + HEAD -> offset */;\n  var code = <i32>load<u16>(ptr, HEADER_SIZE);\n\n  // determine sign\n  var sign: T;\n  if (code == CharCode.MINUS) {\n    if (!--len) return <T>NaN;\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\n    sign = -1;\n  } else if (code == CharCode.PLUS) {\n    if (!--len) return <T>NaN;\n    code = <i32>load<u16>(ptr += 2, HEADER_SIZE);\n    sign = 1;\n  } else {\n    sign = 1;\n  }\n\n  // determine radix\n  if (!radix) {\n    if (code == CharCode._0 && len > 2) {\n      switch (<i32>load<u16>(ptr + 2, HEADER_SIZE)) {\n        case CharCode.B:\n        case CharCode.b: {\n          ptr += 4; len -= 2;\n          radix = 2;\n          break;\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          ptr += 4; len -= 2;\n          radix = 8;\n          break;\n        }\n        case CharCode.X:\n        case CharCode.x: {\n          ptr += 4; len -= 2;\n          radix = 16;\n          break;\n        }\n        default: radix = 10;\n      }\n    } else radix = 10;\n  } else if (radix < 2 || radix > 36) {\n    return <T>NaN;\n  }\n\n  // calculate value\n  var num: T = 0;\n  while (len--) {\n    code = <i32>load<u16>(ptr, HEADER_SIZE);\n    if (code >= CharCode._0 && code <= CharCode._9) {\n      code -= CharCode._0;\n    } else if (code >= CharCode.A && code <= CharCode.Z) {\n      code -= CharCode.A - 10;\n    } else if (code >= CharCode.a && code <= CharCode.z) {\n      code -= CharCode.a - 10;\n    } else break;\n    if (code >= radix) break;\n    num = (num * radix) + code;\n    ptr += 2;\n  }\n  return sign * num;\n}\n","import {\n  HEADER_SIZE as AB_HEADER_SIZE,\n  MAX_BLENGTH as AB_MAX_BLENGTH,\n  allocateUnsafe,\n  LOAD,\n  STORE\n} from \"./arraybuffer\";\n\nimport {\n  SORT as SORT_IMPL\n} from \"./sort\";\n\n/** Typed array base class. Not a global object. */\nexport abstract class TypedArray<T> {\n  [key: number]: T; // compatibility only\n\n  readonly buffer: ArrayBuffer;\n  readonly byteOffset: i32;\n  readonly byteLength: i32;\n\n  constructor(length: i32) {\n    const MAX_LENGTH = <u32>AB_MAX_BLENGTH / sizeof<T>();\n    if (<u32>length > MAX_LENGTH) throw new RangeError(\"Invalid typed array length\");\n    var byteLength = length << alignof<T>();\n    var buffer = allocateUnsafe(byteLength);\n    memory.fill(changetype<usize>(buffer) + AB_HEADER_SIZE, 0, <usize>byteLength);\n    this.buffer = buffer;\n    this.byteOffset = 0;\n    this.byteLength = byteLength;\n  }\n\n  @inline\n  get length(): i32 {\n    return this.byteLength >>> alignof<T>();\n  }\n\n  @operator(\"[]\")\n  protected __get(index: i32): T {\n    if (<u32>index >= <u32>(this.byteLength >>> alignof<T>())) throw new Error(\"Index out of bounds\");\n    return LOAD<T>(this.buffer, index, this.byteOffset);\n  }\n\n  @inline @operator(\"{}\")\n  protected __unchecked_get(index: i32): T {\n    return LOAD<T>(this.buffer, index, this.byteOffset);\n  }\n\n  @operator(\"[]=\")\n  protected __set(index: i32, value: native<T>): void {\n    if (<u32>index >= <u32>(this.byteLength >>> alignof<T>())) throw new Error(\"Index out of bounds\");\n    STORE<T,native<T>>(this.buffer, index, value, this.byteOffset);\n  }\n\n  @inline @operator(\"{}=\")\n  protected __unchecked_set(index: i32, value: native<T>): void {\n    STORE<T,native<T>>(this.buffer, index, value, this.byteOffset);\n  }\n\n  // copyWithin(target: i32, start: i32, end: i32 = this.length): this\n}\n\n@inline\nexport function FILL<TArray extends TypedArray<T>, T extends number>(\n  array: TArray,\n  value: native<T>,\n  start: i32,\n  end: i32\n): TArray {\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  var len = array.length;\n  start = start < 0 ? max(len + start, 0) : min(start, len);\n  end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n  if (sizeof<T>() == 1) {\n    if (start < end) {\n      memory.fill(\n        changetype<usize>(buffer) + start + byteOffset + AB_HEADER_SIZE,\n        <u8>value,\n        <usize>(end - start)\n      );\n    }\n  } else {\n    for (; start < end; ++start) {\n      STORE<T,native<T>>(buffer, start, value, byteOffset);\n    }\n  }\n  return array;\n}\n\n@inline\nexport function SORT<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  comparator: (a: T, b: T) => i32\n): TArray {\n  var byteOffset = array.byteOffset;\n  var length = array.length;\n  if (length <= 1) return array;\n  var buffer = array.buffer;\n  if (length == 2) {\n    let a = LOAD<T>(buffer, 1, byteOffset);\n    let b = LOAD<T>(buffer, 0, byteOffset);\n    if (comparator(a, b) < 0) {\n      STORE<T>(buffer, 1, b, byteOffset);\n      STORE<T>(buffer, 0, a, byteOffset);\n    }\n    return array;\n  }\n  SORT_IMPL<T>(buffer, byteOffset, length, comparator);\n  return array;\n}\n\n@inline\nexport function SUBARRAY<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  begin: i32,\n  end: i32\n): TArray {\n  var length = <i32>array.length;\n  if (begin < 0) begin = max(length + begin, 0);\n  else begin = min(begin, length);\n  if (end < 0) end = max(length + end, begin);\n  else end = max(min(end, length), begin);\n  var slice = memory.allocate(offsetof<TArray>());\n  store<usize>(slice, array.buffer, offsetof<TArray>(\"buffer\"));\n  store<i32>(slice, <i32>array.byteOffset + (begin << alignof<T>()), offsetof<TArray>(\"byteOffset\"));\n  store<i32>(slice, (end - begin) << alignof<T>(), offsetof<TArray>(\"byteLength\"));\n  return changetype<TArray>(slice);\n}\n\n@inline\nexport function REDUCE<TArray extends TypedArray<T>, T, TRet>(\n  array: TArray,\n  callbackfn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = 0; i < length; i++) {\n    initialValue = callbackfn(\n      initialValue,\n      LOAD<T>(buffer, i, byteOffset),\n      i,\n      array,\n    );\n  }\n  return initialValue;\n}\n\n@inline\nexport function REDUCE_RIGHT<TArray extends TypedArray<T>, T, TRet>(\n  array: TArray,\n  callbackfn: (accumulator: TRet, value: T, index: i32, array: TArray) => TRet,\n  initialValue: TRet\n): TRet {\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = array.length - 1; i >= 0; i--) {\n    initialValue = callbackfn(\n      initialValue,\n      LOAD<T>(buffer, i, byteOffset),\n      i,\n      array,\n    );\n  }\n  return initialValue;\n}\n\n@inline\nexport function MAP<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, self: TArray) => T,\n): TArray {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  var result = instantiate<TArray>(length);\n  var resultBuffer = result.buffer;\n  for (let i = 0; i < length; i++) {\n    STORE<T, native<T>>(resultBuffer, i, <native<T>>callbackfn(LOAD<T>(buffer, i, byteOffset), i, array));\n  }\n\n  return result;\n}\n\n@inline\nexport function FIND_INDEX<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, array: TArray) => bool,\n): i32 {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = 0; i < length; i++) {\n    if (callbackfn(LOAD<T>(buffer, i, byteOffset), i, array)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\n@inline\nexport function SOME<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = 0; i < length; i++) {\n    if (callbackfn(LOAD<T>(buffer, i, byteOffset), i, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n@inline\nexport function EVERY<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, array: TArray) => bool,\n): bool {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = 0; i < length; i++) {\n    if (callbackfn(LOAD<T>(buffer, i, byteOffset), i, array)) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\n@inline\nexport function FOREACH<TArray extends TypedArray<T>, T>(\n  array: TArray,\n  callbackfn: (value: T, index: i32, array: TArray) => void,\n): void {\n  var length = array.length;\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n  for (let i = 0; i < length; i++) {\n    callbackfn(LOAD<T>(buffer, i, byteOffset), i, array);\n  }\n}\n\n@inline\nexport function REVERSE<TArray extends TypedArray<T>, T>(array: TArray): TArray {\n  var buffer = array.buffer;\n  var byteOffset = array.byteOffset;\n\n  for (let front = 0, back = array.length - 1; front < back; ++front, --back) {\n    let temp = LOAD<T>(buffer, front, byteOffset);\n    STORE<T>(buffer, front, LOAD<T>(buffer, back, byteOffset), byteOffset);\n    STORE<T>(buffer, back, temp, byteOffset);\n  }\n  return array;\n}\n","import { memcmp, memmove, memset } from \"./internal/memory\";\n\n@builtin export declare const HEAP_BASE: usize; // tslint:disable-line\n\n/* tslint:disable */\n\nexport namespace memory {\n\n  @builtin export declare function size(): i32;\n\n  @builtin export declare function grow(pages: i32): i32;\n\n  @builtin @inline\n  export function fill(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n    memset(dest, c, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  @builtin @inline\n  export function copy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n    memmove(dest, src, n); // fallback if \"bulk-memory\" isn't enabled\n  }\n\n  @inline export function compare(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n    return memcmp(vl, vr, n);\n  }\n\n  // Passive segments\n\n  // export function init(segmentIndex: u32, srcOffset: usize, dstOffset: usize, n: usize): void {\n  //   __memory_init(segmentIndex, srcOffset, dstOffset);\n  // }\n\n  // export function drop(segmentIndex: u32): void {\n  //   __memory_drop(segmentIndex);\n  // }\n\n  // Allocator\n\n  @inline export function allocate(size: usize): usize {\n    if (isDefined(__memory_allocate)) return __memory_allocate(size);\n    WARNING(\"Calling 'memory.allocate' requires a memory manager to be present.\");\n    return <usize>unreachable();\n  }\n\n  @inline export function free(ptr: usize): void {\n    if (isDefined(__memory_free)) { __memory_free(ptr); return; }\n    WARNING(\"Calling 'memory.free' requires a memory manager to be present.\");\n    unreachable();\n  }\n\n  @inline export function reset(): void {\n    if (isDefined(__memory_reset)) { __memory_reset(); return; }\n    unreachable();\n  }\n}\n","// this function will go away once `memory.copy` becomes an intrinsic\nexport function memcpy(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memcpy.c\n  var w: u32, x: u32;\n\n  // copy 1 byte each until src is aligned to 4 bytes\n  while (n && (src & 3)) {\n    store<u8>(dest++, load<u8>(src++));\n    n--;\n  }\n\n  // if dst is aligned to 4 bytes as well, copy 4 bytes each\n  if ((dest & 3) == 0) {\n    while (n >= 16) {\n      store<u32>(dest     , load<u32>(src     ));\n      store<u32>(dest +  4, load<u32>(src +  4));\n      store<u32>(dest +  8, load<u32>(src +  8));\n      store<u32>(dest + 12, load<u32>(src + 12));\n      src += 16; dest += 16; n -= 16;\n    }\n    if (n & 8) {\n      store<u32>(dest    , load<u32>(src    ));\n      store<u32>(dest + 4, load<u32>(src + 4));\n      dest += 8; src += 8;\n    }\n    if (n & 4) {\n      store<u32>(dest, load<u32>(src));\n      dest += 4; src += 4;\n    }\n    if (n & 2) { // drop to 2 bytes each\n      store<u16>(dest, load<u16>(src));\n      dest += 2; src += 2;\n    }\n    if (n & 1) { // drop to 1 byte\n      store<u8>(dest++, load<u8>(src++));\n    }\n    return;\n  }\n\n  // if dst is not aligned to 4 bytes, use alternating shifts to copy 4 bytes each\n  // doing shifts if faster when copying enough bytes (here: 32 or more)\n  if (n >= 32) {\n    switch (dest & 3) {\n      // known to be != 0\n      case 1: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 3;\n        while (n >= 17) {\n          x = load<u32>(src + 1);\n          store<u32>(dest, w >> 24 | x << 8);\n          w = load<u32>(src + 5);\n          store<u32>(dest + 4, x >> 24 | w << 8);\n          x = load<u32>(src + 9);\n          store<u32>(dest + 8, w >> 24 | x << 8);\n          w = load<u32>(src + 13);\n          store<u32>(dest + 12, x >> 24 | w << 8);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 2: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        store<u8>(dest++, load<u8>(src++));\n        n -= 2;\n        while (n >= 18) {\n          x = load<u32>(src + 2);\n          store<u32>(dest, w >> 16 | x << 16);\n          w = load<u32>(src + 6);\n          store<u32>(dest + 4, x >> 16 | w << 16);\n          x = load<u32>(src + 10);\n          store<u32>(dest + 8, w >> 16 | x << 16);\n          w = load<u32>(src + 14);\n          store<u32>(dest + 12, x >> 16 | w << 16);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n      case 3: {\n        w = load<u32>(src);\n        store<u8>(dest++, load<u8>(src++));\n        n -= 1;\n        while (n >= 19) {\n          x = load<u32>(src + 3);\n          store<u32>(dest, w >> 8 | x << 24);\n          w = load<u32>(src + 7);\n          store<u32>(dest + 4, x >> 8 | w << 24);\n          x = load<u32>(src + 11);\n          store<u32>(dest + 8, w >> 8 | x << 24);\n          w = load<u32>(src + 15);\n          store<u32>(dest + 12, x >> 8 | w << 24);\n          src += 16; dest += 16; n -= 16;\n        }\n        break;\n      }\n    }\n  }\n\n  // copy remaining bytes one by one\n  if (n & 16) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 8) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 4) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 2) {\n    store<u8>(dest++, load<u8>(src++));\n    store<u8>(dest++, load<u8>(src++));\n  }\n  if (n & 1) {\n    store<u8>(dest++, load<u8>(src++));\n  }\n}\n\n// this function will go away once `memory.copy` becomes an intrinsic\nexport function memmove(dest: usize, src: usize, n: usize): void { // see: musl/src/string/memmove.c\n  if (dest === src) return;\n  if (src + n <= dest || dest + n <= src) {\n    memcpy(dest, src, n);\n    return;\n  }\n  if (dest < src) {\n    if ((src & 7) == (dest & 7)) {\n      while (dest & 7) {\n        if (!n) return;\n        --n;\n        store<u8>(dest++, load<u8>(src++));\n      }\n      while (n >= 8) {\n        store<u64>(dest, load<u64>(src));\n        n    -= 8;\n        dest += 8;\n        src  += 8;\n      }\n    }\n    while (n) {\n      store<u8>(dest++, load<u8>(src++));\n      --n;\n    }\n  } else {\n    if ((src & 7) == (dest & 7)) {\n      while ((dest + n) & 7) {\n        if (!n) return;\n        store<u8>(dest + --n, load<u8>(src + n));\n      }\n      while (n >= 8) {\n        n -= 8;\n        store<u64>(dest + n, load<u64>(src + n));\n      }\n    }\n    while (n) {\n      store<u8>(dest + --n, load<u8>(src + n));\n    }\n  }\n}\n\n// this function will go away once `memory.fill` becomes an intrinsic\nexport function memset(dest: usize, c: u8, n: usize): void { // see: musl/src/string/memset\n\n  // fill head and tail with minimal branching\n  if (!n) return;\n  store<u8>(dest, c);\n  store<u8>(dest + n - 1, c);\n  if (n <= 2) return;\n\n  store<u8>(dest + 1, c);\n  store<u8>(dest + 2, c);\n  store<u8>(dest + n - 2, c);\n  store<u8>(dest + n - 3, c);\n  if (n <= 6) return;\n  store<u8>(dest + 3, c);\n  store<u8>(dest + n - 4, c);\n  if (n <= 8) return;\n\n  // advance pointer to align it at 4-byte boundary\n  var k: usize = -dest & 3;\n  dest += k;\n  n -= k;\n  n &= -4;\n\n  var c32: u32 = <u32>-1 / 255 * c;\n\n  // fill head/tail up to 28 bytes each in preparation\n  store<u32>(dest, c32);\n  store<u32>(dest + n - 4, c32);\n  if (n <= 8) return;\n  store<u32>(dest + 4, c32);\n  store<u32>(dest + 8, c32);\n  store<u32>(dest + n - 12, c32);\n  store<u32>(dest + n - 8, c32);\n  if (n <= 24) return;\n  store<u32>(dest + 12, c32);\n  store<u32>(dest + 16, c32);\n  store<u32>(dest + 20, c32);\n  store<u32>(dest + 24, c32);\n  store<u32>(dest + n - 28, c32);\n  store<u32>(dest + n - 24, c32);\n  store<u32>(dest + n - 20, c32);\n  store<u32>(dest + n - 16, c32);\n\n  // align to a multiple of 8\n  k = 24 + (dest & 4);\n  dest += k;\n  n -= k;\n\n  // copy 32 bytes each\n  var c64: u64 = <u64>c32 | (<u64>c32 << 32);\n  while (n >= 32) {\n    store<u64>(dest, c64);\n    store<u64>(dest + 8, c64);\n    store<u64>(dest + 16, c64);\n    store<u64>(dest + 24, c64);\n    n -= 32;\n    dest += 32;\n  }\n}\n\nexport function memcmp(vl: usize, vr: usize, n: usize): i32 { // see: musl/src/string/memcmp.c\n  if (vl == vr) return 0;\n  while (n != 0 && load<u8>(vl) == load<u8>(vr)) {\n    n--; vl++; vr++;\n  }\n  return n ? <i32>load<u8>(vl) - <i32>load<u8>(vr) : 0;\n}\n","import {\n  CharCode,\n  allocateUnsafe as allocateUnsafeString,\n  freeUnsafe as freeUnsafeString,\n  HEADER_SIZE as STRING_HEADER_SIZE\n} from \"./string\";\n\nimport {\n  LOAD\n} from \"./arraybuffer\";\n\n@inline export const MAX_DOUBLE_LENGTH = 28;\n\n@lazy @inline const POWERS10: u32[] = [\n  1,\n  10,\n  100,\n  1000,\n  10000,\n  100000,\n  1000000,\n  10000000,\n  100000000,\n  1000000000\n];\n\n/*\n  Lookup table for pairwise char codes in range [0-99]\n\n  \"00\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\",\n  \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\n  \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\",\n  \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\",\n  \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\",\n  \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\",\n  \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\",\n  \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\",\n  \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\",\n  \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"\n*/\n@lazy @inline const DIGITS: u32[] = [\n  0x00300030, 0x00310030, 0x00320030, 0x00330030, 0x00340030,\n  0x00350030, 0x00360030, 0x00370030, 0x00380030, 0x00390030,\n  0x00300031, 0x00310031, 0x00320031, 0x00330031, 0x00340031,\n  0x00350031, 0x00360031, 0x00370031, 0x00380031, 0x00390031,\n  0x00300032, 0x00310032, 0x00320032, 0x00330032, 0x00340032,\n  0x00350032, 0x00360032, 0x00370032, 0x00380032, 0x00390032,\n  0x00300033, 0x00310033, 0x00320033, 0x00330033, 0x00340033,\n  0x00350033, 0x00360033, 0x00370033, 0x00380033, 0x00390033,\n  0x00300034, 0x00310034, 0x00320034, 0x00330034, 0x00340034,\n  0x00350034, 0x00360034, 0x00370034, 0x00380034, 0x00390034,\n  0x00300035, 0x00310035, 0x00320035, 0x00330035, 0x00340035,\n  0x00350035, 0x00360035, 0x00370035, 0x00380035, 0x00390035,\n  0x00300036, 0x00310036, 0x00320036, 0x00330036, 0x00340036,\n  0x00350036, 0x00360036, 0x00370036, 0x00380036, 0x00390036,\n  0x00300037, 0x00310037, 0x00320037, 0x00330037, 0x00340037,\n  0x00350037, 0x00360037, 0x00370037, 0x00380037, 0x00390037,\n  0x00300038, 0x00310038, 0x00320038, 0x00330038, 0x00340038,\n  0x00350038, 0x00360038, 0x00370038, 0x00380038, 0x00390038,\n  0x00300039, 0x00310039, 0x00320039, 0x00330039, 0x00340039,\n  0x00350039, 0x00360039, 0x00370039, 0x00380039, 0x00390039\n];\n\n@lazy @inline const EXP_POWERS: i16[] = [\n  -1220, -1193, -1166, -1140, -1113, -1087, -1060, -1034, -1007,  -980,\n   -954,  -927,  -901,  -874,  -847,  -821,  -794,  -768,  -741,  -715,\n   -688,  -661,  -635,  -608,  -582,  -555,  -529,  -502,  -475,  -449,\n   -422,  -396,  -369,  -343,  -316,  -289,  -263,  -236,  -210,  -183,\n   -157,  -130,  -103,   -77,   -50,   -24,     3,    30,    56,    83,\n    109,   136,   162,   189,   216,   242,   269,   295,   322,   348,\n    375,   402,   428,   455,   481,   508,   534,   561,   588,   614,\n    641,   667,   694,   720,   747,   774,   800,   827,   853,   880,\n    907,   933,   960,   986,  1013,  1039,  1066\n];\n\n// 1e-348, 1e-340, ..., 1e340\n@lazy @inline const FRC_POWERS: u64[] = [\n  0xFA8FD5A0081C0288, 0xBAAEE17FA23EBF76, 0x8B16FB203055AC76, 0xCF42894A5DCE35EA,\n  0x9A6BB0AA55653B2D, 0xE61ACF033D1A45DF, 0xAB70FE17C79AC6CA, 0xFF77B1FCBEBCDC4F,\n  0xBE5691EF416BD60C, 0x8DD01FAD907FFC3C, 0xD3515C2831559A83, 0x9D71AC8FADA6C9B5,\n  0xEA9C227723EE8BCB, 0xAECC49914078536D, 0x823C12795DB6CE57, 0xC21094364DFB5637,\n  0x9096EA6F3848984F, 0xD77485CB25823AC7, 0xA086CFCD97BF97F4, 0xEF340A98172AACE5,\n  0xB23867FB2A35B28E, 0x84C8D4DFD2C63F3B, 0xC5DD44271AD3CDBA, 0x936B9FCEBB25C996,\n  0xDBAC6C247D62A584, 0xA3AB66580D5FDAF6, 0xF3E2F893DEC3F126, 0xB5B5ADA8AAFF80B8,\n  0x87625F056C7C4A8B, 0xC9BCFF6034C13053, 0x964E858C91BA2655, 0xDFF9772470297EBD,\n  0xA6DFBD9FB8E5B88F, 0xF8A95FCF88747D94, 0xB94470938FA89BCF, 0x8A08F0F8BF0F156B,\n  0xCDB02555653131B6, 0x993FE2C6D07B7FAC, 0xE45C10C42A2B3B06, 0xAA242499697392D3,\n  0xFD87B5F28300CA0E, 0xBCE5086492111AEB, 0x8CBCCC096F5088CC, 0xD1B71758E219652C,\n  0x9C40000000000000, 0xE8D4A51000000000, 0xAD78EBC5AC620000, 0x813F3978F8940984,\n  0xC097CE7BC90715B3, 0x8F7E32CE7BEA5C70, 0xD5D238A4ABE98068, 0x9F4F2726179A2245,\n  0xED63A231D4C4FB27, 0xB0DE65388CC8ADA8, 0x83C7088E1AAB65DB, 0xC45D1DF942711D9A,\n  0x924D692CA61BE758, 0xDA01EE641A708DEA, 0xA26DA3999AEF774A, 0xF209787BB47D6B85,\n  0xB454E4A179DD1877, 0x865B86925B9BC5C2, 0xC83553C5C8965D3D, 0x952AB45CFA97A0B3,\n  0xDE469FBD99A05FE3, 0xA59BC234DB398C25, 0xF6C69A72A3989F5C, 0xB7DCBF5354E9BECE,\n  0x88FCF317F22241E2, 0xCC20CE9BD35C78A5, 0x98165AF37B2153DF, 0xE2A0B5DC971F303A,\n  0xA8D9D1535CE3B396, 0xFB9B7CD9A4A7443C, 0xBB764C4CA7A44410, 0x8BAB8EEFB6409C1A,\n  0xD01FEF10A657842C, 0x9B10A4E5E9913129, 0xE7109BFBA19C0C9D, 0xAC2820D9623BF429,\n  0x80444B5E7AA7CF85, 0xBF21E44003ACDD2D, 0x8E679C2F5E44FF8F, 0xD433179D9C8CB841,\n  0x9E19DB92B4E31BA9, 0xEB96BF6EBADF77D9, 0xAF87023B9BF0EE6B\n];\n\n// Count number of decimals for u32 values\n// In our case input value always non-zero so we can simplify some parts\nexport function decimalCount32(value: u32): u32 {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    let l: u32 = 32 - clz<u32>(value); // log2\n    let t = l * 1233 >>> 12; // log10\n\n    let lutbuf = <ArrayBuffer>POWERS10.buffer_;\n    let power  = LOAD<u32>(lutbuf, t);\n    t -= <u32>(value < power);\n    return t + 1;\n  } else {\n    if (value < 100000) {\n      if (value < 100) {\n        return select<u32>(1, 2, value < 10);\n      } else {\n        let m = select<u32>(4, 5, value < 10000);\n        return select<u32>(3, m, value < 1000);\n      }\n    } else {\n      if (value < 10000000) {\n        return select<u32>(6, 7, value < 1000000);\n      } else {\n        let m = select<u32>(9, 10, value < 1000000000);\n        return select<u32>(8, m, value < 100000000);\n      }\n    }\n  }\n}\n\n// Count number of decimals for u64 values\n// In our case input value always greater than 2^32-1 so we can skip some parts\nexport function decimalCount64(value: u64): u32 {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    let l: u32 = 64 - <u32>clz<u64>(value); // log2\n    let t = l * 1233 >>> 12; // log10\n\n    let lutbuf = <ArrayBuffer>POWERS10.buffer_;\n    let power  = LOAD<u32,u64>(lutbuf, t - 10);\n    t -= <u32>(value < 10000000000 * power);\n    return t + 1;\n  } else {\n    if (value < 1000000000000000) {\n      if (value < 1000000000000) {\n        return select<u32>(11, 12, value < 100000000000);\n      } else {\n        let m = select<u32>(14, 15, value < 100000000000000);\n        return select<u32>(13, m, value < 10000000000000);\n      }\n    } else {\n      if (value < 100000000000000000) {\n        return select<u32>(16, 17, value < 10000000000000000);\n      } else {\n        let m = select<u32>(19, 20, value < 10000000000000000000);\n        return select<u32>(18, m, value < 1000000000000000000);\n      }\n    }\n  }\n}\n\nfunction utoa32_lut(buffer: usize, num: u32, offset: usize): void {\n  var lutbuf = <ArrayBuffer>DIGITS.buffer_;\n\n  while (num >= 10000) {\n    // in most VMs i32/u32 div and modulo by constant can be shared and simplificate\n    let t = num / 10000;\n    let r = num % 10000;\n    num = t;\n\n    let d1 = r / 100;\n    let d2 = r % 100;\n\n    let digits1 = LOAD<u32,u64>(lutbuf, d1);\n    let digits2 = LOAD<u32,u64>(lutbuf, d2);\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32), STRING_HEADER_SIZE);\n  }\n\n  if (num >= 100) {\n    let t  = num / 100;\n    let d1 = num % 100;\n    num = t;\n    offset -= 2;\n    let digits = LOAD<u32>(lutbuf, d1);\n    store<u32>(buffer + (offset << 1), digits, STRING_HEADER_SIZE);\n  }\n\n  if (num >= 10) {\n    offset -= 2;\n    let digits = LOAD<u32>(lutbuf, num);\n    store<u32>(buffer + (offset << 1), digits, STRING_HEADER_SIZE);\n  } else {\n    offset -= 1;\n    let digit = CharCode._0 + num;\n    store<u16>(buffer + (offset << 1), digit, STRING_HEADER_SIZE);\n  }\n}\n\nfunction utoa64_lut(buffer: usize, num: u64, offset: usize): void {\n  var lutbuf = <ArrayBuffer>DIGITS.buffer_;\n\n  while (num >= 100000000) {\n    let t = num / 100000000;\n    let r = <usize>(num - t * 100000000);\n    num = t;\n\n    let b = r / 10000;\n    let c = r % 10000;\n\n    let b1 = b / 100;\n    let b2 = b % 100;\n    let c1 = c / 100;\n    let c2 = c % 100;\n\n    let digits1 = LOAD<u32,u64>(lutbuf, c1);\n    let digits2 = LOAD<u32,u64>(lutbuf, c2);\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32), STRING_HEADER_SIZE);\n\n    digits1 = LOAD<u32,u64>(lutbuf, b1);\n    digits2 = LOAD<u32,u64>(lutbuf, b2);\n\n    offset -= 4;\n    store<u64>(buffer + (offset << 1), digits1 | (digits2 << 32), STRING_HEADER_SIZE);\n  }\n\n  utoa32_lut(buffer, <u32>num, offset);\n}\n\nfunction utoa_simple<T>(buffer: usize, num: T, offset: usize): void {\n  do {\n    let t = num / 10;\n    let r = <u32>(num % 10);\n    num = t;\n    offset -= 1;\n    store<u16>(buffer + (offset << 1), CharCode._0 + r, STRING_HEADER_SIZE);\n  } while (num);\n}\n\n@inline\nexport function utoa32_core(buffer: usize, num: u32, offset: u32): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_simple(buffer, num, offset);\n  } else {\n    utoa32_lut(buffer, num, offset);\n  }\n}\n\n@inline\nexport function utoa64_core(buffer: usize, num: u64, offset: u32): void {\n  if (ASC_SHRINK_LEVEL >= 1) {\n    utoa_simple(buffer, num, offset);\n  } else {\n    utoa64_lut(buffer, num, offset);\n  }\n}\n\nexport function utoa32(value: u32): String {\n  if (!value) return \"0\";\n\n  var decimals = decimalCount32(value);\n  var buffer   = allocateUnsafeString(decimals);\n\n  utoa32_core(changetype<usize>(buffer), value, decimals);\n  return buffer;\n}\n\nexport function itoa32(value: i32): String {\n  if (!value) return \"0\";\n\n  var sign = value < 0;\n  if (sign) value = -value;\n\n  var decimals = decimalCount32(value) + <u32>sign;\n  var buffer   = allocateUnsafeString(decimals);\n\n  utoa32_core(changetype<usize>(buffer), value, decimals);\n  if (sign) store<u16>(changetype<usize>(buffer), CharCode.MINUS, STRING_HEADER_SIZE);\n\n  return buffer;\n}\n\nexport function utoa64(value: u64): String {\n  if (!value) return \"0\";\n\n  var buffer: String;\n  if (value <= u32.MAX_VALUE) {\n    let val32    = <u32>value;\n    let decimals = decimalCount32(val32);\n    buffer = allocateUnsafeString(decimals);\n    utoa32_core(changetype<usize>(buffer), val32, decimals);\n  } else {\n    let decimals = decimalCount64(value);\n    buffer = allocateUnsafeString(decimals);\n    utoa64_core(changetype<usize>(buffer), value, decimals);\n  }\n  return buffer;\n}\n\nexport function itoa64(value: i64): String {\n  if (!value) return \"0\";\n\n  var sign = value < 0;\n  if (sign) value = -value;\n\n  var buffer: String;\n  if (<u64>value <= <u64>u32.MAX_VALUE) {\n    let val32    = <u32>value;\n    let decimals = decimalCount32(val32) + <u32>sign;\n    buffer = allocateUnsafeString(decimals);\n    utoa32_core(changetype<usize>(buffer), val32, decimals);\n  } else {\n    let decimals = decimalCount64(value) + <u32>sign;\n    buffer = allocateUnsafeString(decimals);\n    utoa64_core(changetype<usize>(buffer), value, decimals);\n  }\n  if (sign) store<u16>(changetype<usize>(buffer), CharCode.MINUS, STRING_HEADER_SIZE);\n\n  return buffer;\n}\n\nexport function itoa<T>(value: T): String {\n  if (!isInteger<T>()) {\n    assert(false); // unexpecteble non-integer generic type\n  } else {\n    if (isSigned<T>()) {\n      if (sizeof<T>() <= 4) {\n        return itoa32(<i32>value);\n      } else {\n        return itoa64(<i64>value);\n      }\n    } else {\n      if (sizeof<T>() <= 4) {\n        return utoa32(<u32>value);\n      } else {\n        return utoa64(<u64>value);\n      }\n    }\n  }\n}\n\n@lazy var _K: i32 = 0;\n// @lazy var _frc: u64 = 0;\n@lazy var _exp: i32 = 0;\n@lazy var _frc_minus: u64 = 0;\n@lazy var _frc_plus:  u64 = 0;\n@lazy var _frc_pow: u64 = 0;\n@lazy var _exp_pow: i32 = 0;\n\n@inline\nfunction umul64f(u: u64, v: u64): u64 {\n  var u0 = u & 0xFFFFFFFF;\n  var v0 = v & 0xFFFFFFFF;\n\n  var u1 = u >> 32;\n  var v1 = v >> 32;\n\n  var l = u0 * v0;\n  var t = u1 * v0 + (l >> 32);\n  var w = u0 * v1 + (t & 0xFFFFFFFF);\n\n  w += 0x7FFFFFFF; // rounding\n\n  t >>= 32;\n  w >>= 32;\n\n  return u1 * v1 + t + w;\n}\n\n@inline\nfunction umul64e(e1: i32, e2: i32): i32 {\n  return e1 + e2 + 64; // where 64 is significand size\n}\n\n@inline\nfunction normalizedBoundaries(f: u64, e: i32): void {\n  var frc = (f << 1) + 1;\n  var exp = e - 1;\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var m = 1 + <i32>(f == 0x0010000000000000);\n\n  _frc_plus  = frc;\n  _frc_minus = ((f << m) - 1) << e - m - exp;\n  _exp = exp;\n}\n\n@inline\nfunction grisuRound(buffer: usize, len: i32, delta: u64, rest: u64, ten_kappa: u64, wp_w: u64): void {\n  var lastp = buffer + ((len - 1) << 1);\n  var digit = load<u16>(lastp, STRING_HEADER_SIZE);\n  while (\n    rest < wp_w &&\n    delta - rest >= ten_kappa && (\n      rest + ten_kappa < wp_w ||\n      wp_w - rest > rest + ten_kappa - wp_w\n    )\n  ) {\n    --digit;\n    rest += ten_kappa;\n  }\n  store<u16>(lastp, digit, STRING_HEADER_SIZE);\n}\n\n@inline\nfunction getCachedPower(minExp: i32): void {\n  const c = reinterpret<f64>(0x3FD34413509F79FE); // 1 / lg(10) = 0.30102999566398114\n  var dk = (-61 - minExp) * c + 347;\t            // dk must be positive, so can do ceiling in positive\n  var k = <i32>dk;\n      k += <i32>(k != dk); // conversion with ceil\n\n  var index = (k >> 3) + 1;\n  _K = 348 - (index << 3);\t// decimal exponent no need lookup table\n  var frcPowers = <ArrayBuffer>FRC_POWERS.buffer_;\n  var expPowers = <ArrayBuffer>EXP_POWERS.buffer_;\n  _frc_pow = LOAD<u64>(frcPowers, index);\n  _exp_pow = LOAD<i16,i32>(expPowers, index);\n}\n\n@inline\nfunction grisu2(value: f64, buffer: usize, sign: i32): i32 {\n\n  // frexp routine\n  var uv  = reinterpret<u64>(value);\n  var exp = <i32>((uv & 0x7FF0000000000000) >>> 52);\n  var sid = uv & 0x000FFFFFFFFFFFFF;\n  var frc = (<u64>(exp != 0) << 52) + sid;\n      exp = select<i32>(exp, 1, exp != 0) - (0x3FF + 52);\n\n  normalizedBoundaries(frc, exp);\n  getCachedPower(_exp);\n\n  // normalize\n  var off = <i32>clz<u64>(frc);\n  frc <<= off;\n  exp  -= off;\n\n  var frc_pow = _frc_pow;\n  var exp_pow = _exp_pow;\n\n  var w_frc = umul64f(frc, frc_pow);\n  var w_exp = umul64e(exp, exp_pow);\n\n  var wp_frc = umul64f(_frc_plus, frc_pow) - 1;\n  var wp_exp = umul64e(_exp,      exp_pow);\n\n  var wm_frc = umul64f(_frc_minus, frc_pow) + 1;\n  var delta  = wp_frc - wm_frc;\n\n  return genDigits(buffer, w_frc, w_exp, wp_frc, wp_exp, delta, sign);\n}\n\nfunction genDigits(buffer: usize, w_frc: u64, w_exp: i32, mp_frc: u64, mp_exp: i32, delta: u64, sign: i32): i32 {\n  var one_exp = -mp_exp;\n  var one_frc = (<u64>1) << one_exp;\n  var mask    = one_frc - 1;\n\n  var wp_w_frc = mp_frc - w_frc;\n  var wp_w_exp = mp_exp;\n\n  var p1 = <u32>(mp_frc >> one_exp);\n  var p2 = mp_frc & mask;\n\n  var kappa = <i32>decimalCount32(p1);\n  var len = sign;\n\n  var powers10 = <ArrayBuffer>POWERS10.buffer_;\n\n  while (kappa > 0) {\n    let d: u32;\n    switch (kappa) {\n      case 10: { d = p1 / 1000000000; p1 %= 1000000000; break; }\n      case  9: { d = p1 /  100000000; p1 %=  100000000; break; }\n      case  8: { d = p1 /   10000000; p1 %=   10000000; break; }\n      case  7: { d = p1 /    1000000; p1 %=    1000000; break; }\n      case  6: { d = p1 /     100000; p1 %=     100000; break; }\n      case  5: { d = p1 /      10000; p1 %=      10000; break; }\n      case  4: { d = p1 /       1000; p1 %=       1000; break; }\n      case  3: { d = p1 /        100; p1 %=        100; break; }\n      case  2: { d = p1 /         10; p1 %=         10; break; }\n      case  1: { d = p1;              p1 =           0; break; }\n      default: { d = 0; break; }\n    }\n\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d, STRING_HEADER_SIZE);\n\n    --kappa;\n    let tmp = ((<u64>p1) << one_exp) + p2;\n    if (tmp <= delta) {\n      _K += kappa;\n      grisuRound(buffer, len, delta, tmp, LOAD<u32,u64>(powers10, kappa) << one_exp, wp_w_frc);\n      return len;\n    }\n  }\n\n  while (1) {\n    p2    *= 10;\n    delta *= 10;\n\n    let d = p2 >> one_exp;\n    if (d | len) store<u16>(buffer + (len++ << 1), CharCode._0 + <u16>d, STRING_HEADER_SIZE);\n\n    p2 &= mask;\n    --kappa;\n    if (p2 < delta) {\n      _K += kappa;\n      wp_w_frc *= LOAD<u32,u64>(powers10, -kappa);\n      grisuRound(buffer, len, delta, p2, one_frc, wp_w_frc);\n      return len;\n    }\n  }\n\n  return len;\n}\n\n@inline\nfunction genExponent(buffer: usize, k: i32): i32 {\n  var sign = k < 0;\n  if (sign) k = -k;\n  var decimals = decimalCount32(k) + 1;\n  utoa32_core(buffer, k, decimals);\n  store<u16>(buffer, <u16>select<u32>(CharCode.MINUS, CharCode.PLUS, sign), STRING_HEADER_SIZE);\n  return decimals;\n}\n\nfunction prettify(buffer: usize, length: i32, k: i32): i32 {\n  if (!k) {\n    store<u32>(buffer + (length << 1), CharCode.DOT | (CharCode._0 << 16), STRING_HEADER_SIZE);\n    return length + 2;\n  }\n\n  var kk = length + k;\n  if (length <= kk && kk <= 21) {\n    // 1234e7 -> 12340000000\n    for (let i = length; i < kk; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0, STRING_HEADER_SIZE);\n    }\n    store<u32>(buffer + (kk << 1), CharCode.DOT | (CharCode._0 << 16), STRING_HEADER_SIZE);\n    return kk + 2;\n  } else if (kk > 0 && kk <= 21) {\n    // 1234e-2 -> 12.34\n    let ptr = buffer + (kk << 1);\n    memory.copy(\n      ptr + STRING_HEADER_SIZE + 2,\n      ptr + STRING_HEADER_SIZE,\n      -k << 1\n    );\n    store<u16>(buffer + (kk << 1), CharCode.DOT, STRING_HEADER_SIZE);\n    return length + 1;\n  } else if (-6 < kk && kk <= 0) {\n    // 1234e-6 -> 0.001234\n    let offset = 2 - kk;\n    memory.copy(\n      buffer + STRING_HEADER_SIZE + (offset << 1),\n      buffer + STRING_HEADER_SIZE,\n      length << 1\n    );\n    store<u32>(buffer, CharCode._0 | (CharCode.DOT << 16), STRING_HEADER_SIZE);\n    for (let i = 2; i < offset; ++i) {\n      store<u16>(buffer + (i << 1), CharCode._0, STRING_HEADER_SIZE);\n    }\n    return length + offset;\n  } else if (length == 1) {\n    // 1e30\n    store<u16>(buffer, CharCode.e, STRING_HEADER_SIZE + 2);\n    length = genExponent(buffer + 4, kk - 1);\n    return length + 2;\n  } else {\n    let len = length << 1;\n    memory.copy(\n      buffer + STRING_HEADER_SIZE + 4,\n      buffer + STRING_HEADER_SIZE + 2,\n      len - 2\n    );\n    store<u16>(buffer,       CharCode.DOT, STRING_HEADER_SIZE + 2);\n    store<u16>(buffer + len, CharCode.e,   STRING_HEADER_SIZE + 2);\n    length += genExponent(buffer + len + 4, kk - 1);\n    return length + 2;\n  }\n}\n\nexport function dtoa_core(buffer: usize, value: f64): i32 {\n  var sign = <i32>(value < 0);\n  if (sign) {\n    value = -value;\n    store<u16>(buffer, CharCode.MINUS, STRING_HEADER_SIZE);\n  }\n  // assert(value > 0 && value <= 1.7976931348623157e308);\n  var len = grisu2(value, buffer, sign);\n      len = prettify(buffer + (sign << 1), len - sign, _K);\n  return len + sign;\n}\n\nexport function dtoa(value: f64): String {\n  if (value == 0) return \"0.0\";\n  if (!isFinite(value)) {\n    if (isNaN(value)) return \"NaN\";\n    return select<String>(\"-Infinity\", \"Infinity\", value < 0);\n  }\n  var buffer = allocateUnsafeString(MAX_DOUBLE_LENGTH);\n  var length = dtoa_core(changetype<usize>(buffer), value);\n  var result = buffer.substring(0, length);\n  freeUnsafeString(buffer);\n  return result;\n}\n\nexport function itoa_stream<T>(buffer: usize, offset: usize, value: T): u32 {\n  buffer += (offset << 1);\n  if (!value) {\n    store<u16>(buffer, CharCode._0, STRING_HEADER_SIZE);\n    return 1;\n  }\n  var decimals: u32 = 0;\n  if (isSigned<T>()) {\n    let sign = value < 0;\n    if (sign) value = -value;\n    if (sizeof<T>() <= 4) {\n      decimals = decimalCount32(value) + <u32>sign;\n      utoa32_core(buffer, value, decimals);\n    } else {\n      if (<u64>value <= <u64>u32.MAX_VALUE) {\n        let val32 = <u32>value;\n        decimals = decimalCount32(val32) + <u32>sign;\n        utoa32_core(buffer, val32, decimals);\n      } else {\n        decimals = decimalCount64(value) + <u32>sign;\n        utoa64_core(buffer, value, decimals);\n      }\n    }\n    if (sign) store<u16>(buffer, CharCode.MINUS, STRING_HEADER_SIZE);\n  } else {\n    if (sizeof<T>() <= 4) {\n      decimals = decimalCount32(value);\n      utoa32_core(buffer, value, decimals);\n    } else {\n      if (<u64>value <= <u64>u32.MAX_VALUE) {\n        let val32 = <u32>value;\n        decimals = decimalCount32(val32);\n        utoa32_core(buffer, val32, decimals);\n      } else {\n        decimals = decimalCount64(value);\n        utoa64_core(buffer, value, decimals);\n      }\n    }\n  }\n  return decimals;\n}\n\nexport function dtoa_stream(buffer: usize, offset: usize, value: f64): u32 {\n  buffer += (offset << 1);\n  if (value == 0.0) {\n    store<u16>(buffer, CharCode._0,  STRING_HEADER_SIZE + 0);\n    store<u16>(buffer, CharCode.DOT, STRING_HEADER_SIZE + 2);\n    store<u16>(buffer, CharCode._0,  STRING_HEADER_SIZE + 4);\n    return 3;\n  }\n  if (!isFinite(value)) {\n    if (isNaN(value)) {\n      store<u16>(buffer, CharCode.N, STRING_HEADER_SIZE + 0);\n      store<u16>(buffer, CharCode.a, STRING_HEADER_SIZE + 2);\n      store<u16>(buffer, CharCode.N, STRING_HEADER_SIZE + 4);\n      return 3;\n    } else {\n      let sign = <i32>(value < 0);\n      let len  = 8 + sign;\n      let source = changetype<usize>(select<String>(\"-Infinity\", \"Infinity\", sign));\n      memory.copy(buffer + STRING_HEADER_SIZE, source + STRING_HEADER_SIZE, len << 1);\n      return len;\n    }\n  }\n  return dtoa_core(buffer, value);\n}\n","/* tslint:disable */\n\n@builtin @inline export const NaN: f64 = 0 / 0;\n@builtin @inline export const Infinity: f64 = 1 / 0;\n\n@builtin export declare function isInteger<T>(value?: T): bool;\n@builtin export declare function isFloat<T>(value?: T): bool;\n@builtin export declare function isSigned<T>(value?: T): bool;\n@builtin export declare function isReference<T>(value?: T): bool;\n@builtin export declare function isString<T>(value?: T): bool;\n@builtin export declare function isArray<T>(value?: T): bool;\n@builtin export declare function isArrayLike<T>(value?: T): bool;\n@builtin export declare function isFunction<T>(value?: T): bool;\n@builtin export declare function isNullable<T>(value?: T): bool;\n@builtin export declare function isDefined(expression: void): bool;\n@builtin export declare function isConstant(expression: void): bool;\n@builtin export declare function isManaged<T>(value?: T): bool;\n@inline export function isNaN<T>(value: T): bool { return value != value; }\n@inline export function isFinite<T>(value: T): bool { return value - value == 0; }\n\n@builtin export declare function clz<T>(value: T): T;\n@builtin export declare function ctz<T>(value: T): T;\n@builtin export declare function popcnt<T>(value: T): T;\n@builtin export declare function rotl<T>(value: T, shift: T): T;\n@builtin export declare function rotr<T>(value: T, shift: T): T;\n@builtin export declare function abs<T>(value: T): T;\n@builtin export declare function max<T>(left: T, right: T): T;\n@builtin export declare function min<T>(left: T, right: T): T;\n@builtin export declare function ceil<T>(value: T): T;\n@builtin export declare function floor<T>(value: T): T;\n@builtin export declare function copysign<T>(left: T, right: T): T;\n@builtin export declare function nearest<T>(value: T): T;\n@builtin export declare function reinterpret<T>(value: void): T;\n@builtin export declare function sqrt<T>(value: T): T;\n@builtin export declare function trunc<T>(value: T): T;\n@builtin export declare function load<T>(offset: usize, immOffset?: usize, immAlign?: usize): T;\n@builtin export declare function store<T>(offset: usize, value: void, immOffset?: usize, immAlign?: usize): void;\n@builtin export declare function sizeof<T>(): usize; // | u32 / u64\n@builtin export declare function alignof<T>(): usize; // | u32 / u64\n@builtin export declare function offsetof<T>(fieldName?: string): usize; // | u32 / u64\n@builtin export declare function select<T>(ifTrue: T, ifFalse: T, condition: bool): T;\n@builtin export declare function unreachable(): void;\n@builtin export declare function changetype<T>(value: void): T;\n@builtin export declare function assert<T>(isTrueish: T, message?: string): T;\n@builtin export declare function unchecked<T>(expr: T): T;\n@builtin export declare function call_indirect<T>(target: void, ...args: void[]): T;\n@builtin export declare function instantiate<T>(...args: void[]): T;\n\nexport namespace atomic {\n  @builtin export declare function load<T>(offset: usize, immOffset?: usize): T;\n  @builtin export declare function store<T>(offset: usize, value: T, immOffset?: usize): void;\n  @builtin export declare function add<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function sub<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function and<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function or<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function xor<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function xchg<T>(ptr: usize, value: T, immOffset?: usize): T;\n  @builtin export declare function cmpxchg<T>(ptr: usize, expected: T, replacement: T, immOffset?: usize): T;\n  @builtin export declare function wait<T>(ptr: usize, expected: T, timeout: i64): AtomicWaitResult;\n  @builtin export declare function notify<T>(ptr: usize, count: i32): i32;\n}\n\n@lazy export const enum AtomicWaitResult {\n  OK = 0,\n  NOT_EQUAL = 1,\n  TIMED_OUT = 2\n}\n\n@builtin export declare function i8(value: void): i8;\nexport namespace i8 {\n  @lazy export const MIN_VALUE: i8 = -128;\n  @lazy export const MAX_VALUE: i8 =  127;\n}\n\n@builtin export declare function i16(value: void): i16;\nexport namespace i16 {\n  @lazy export const MIN_VALUE: i16 = -32768;\n  @lazy export const MAX_VALUE: i16 =  32767;\n}\n\n@builtin export declare function i32(value: void): i32;\nexport namespace i32 {\n  @lazy export const MIN_VALUE: i32 = -2147483648;\n  @lazy export const MAX_VALUE: i32 =  2147483647;\n  @builtin export declare function clz(value: i32): i32;\n  @builtin export declare function ctz(value: i32): i32;\n  @builtin export declare function popcnt(value: i32): i32;\n  @builtin export declare function rotl(value: i32, shift: i32): i32;\n  @builtin export declare function rotr(value: i32, shift: i32): i32;\n  @builtin export declare function reinterpret_f32(value: f32): i32;\n  @builtin export declare function load8_s(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n  @builtin export declare function load8_u(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n  @builtin export declare function load16_s(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n  @builtin export declare function load16_u(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n  @builtin export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): i32;\n  @builtin export declare function store8(offset: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function store16(offset: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function store(offset: usize, value: i32, immOffset?: usize, immAlign?: usize): void;\n  \n  export namespace atomic {\n    @builtin export declare function load8_u(offset: usize, immOffset?: usize): i32;\n    @builtin export declare function load16_u(offset: usize, immOffset?: usize): i32;\n    @builtin export declare function load(offset: usize, immOffset?: usize): i32;\n    @builtin export declare function store8(offset: usize, value: i32, immOffset?: usize): void;\n    @builtin export declare function store16(offset: usize, value: i32, immOffset?: usize): void;\n    @builtin export declare function store(offset: usize, value: i32, immOffset?: usize): void;\n    @builtin export declare function wait(ptr: usize, expected: i32, timeout: i64): AtomicWaitResult;\n    @builtin export declare function notify(ptr: usize, count: i32): i32;\n\n    export namespace rmw8 {\n      @builtin export declare function add_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function sub_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function and_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function or_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xor_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xchg_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function cmpxchg_u(offset: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n    export namespace rmw16 {\n      @builtin export declare function add_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function sub_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function and_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function or_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xor_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xchg_u(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function cmpxchg_u(offset: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n    export namespace rmw {\n      @builtin export declare function add(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function sub(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function and(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function or(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xor(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function xchg(offset: usize, value: i32, immOffset?: usize): i32;\n      @builtin export declare function cmpxchg(offset: usize, expected: i32, replacement: i32, immOffset?: usize): i32;\n    }\n  }\n}\n\n@builtin export declare function i64(value: void): i64;\nexport namespace i64 {\n  @lazy export const MIN_VALUE: i64 = -9223372036854775808;\n  @lazy export const MAX_VALUE: i64 =  9223372036854775807;\n  @builtin export declare function clz(value: i64): i64;\n  @builtin export declare function ctz(value: i64): i64;\n  @builtin export declare function load8_s(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load8_u(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load16_s(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load16_u(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load32_s(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load32_u(offset: usize, immOffset?: usize, immAlign?: usize): i64;\n  @builtin export declare function load(offset: usize, immOffset?: usize): i64;\n  @builtin export declare function popcnt(value: i64): i64;\n  @builtin export declare function rotl(value: i64, shift: i64): i64;\n  @builtin export declare function rotr(value: i64, shift: i64): i64;\n  @builtin export declare function reinterpret_f64(value: f64): i64;\n  @builtin export declare function store8(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function store16(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function store32(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function store(offset: usize, value: i64, immOffset?: usize, immAlign?: usize): void;\n\n  export namespace atomic {\n    @builtin export declare function load8_u(offset: usize, immOffset?: usize): i64;\n    @builtin export declare function load16_u(offset: usize, immOffset?: usize): i64;\n    @builtin export declare function load32_u(offset: usize, immOffset?: usize): i64;\n    @builtin export declare function load(offset: usize, immOffset?: usize): i64;\n    @builtin export declare function store8(offset: usize, value: i64, immOffset?: usize): void;\n    @builtin export declare function store16(offset: usize, value: i64, immOffset?: usize): void;\n    @builtin export declare function store32(offset: usize, value: i64, immOffset?: usize): void;\n    @builtin export declare function store(offset: usize, value: i64, immOffset?: usize): void;\n    @builtin export declare function wait(ptr: usize, expected: i64, timeout: i64): AtomicWaitResult;\n    @builtin export declare function notify(ptr: usize, count: i32): i32;\n\n    export namespace rmw8 {\n      @builtin export declare function add_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function sub_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function and_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function or_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xor_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xchg_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function cmpxchg_u(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n    export namespace rmw16 {\n      @builtin export declare function add_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function sub_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function and_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function or_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xor_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xchg_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function cmpxchg_u(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n    export namespace rmw32 {\n      @builtin export declare function add_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function sub_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function and_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function or_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xor_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xchg_u(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function cmpxchg_u(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n    export namespace rmw {\n      @builtin export declare function add(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function sub(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function and(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function or(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xor(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function xchg(offset: usize, value: i64, immOffset?: usize): i64;\n      @builtin export declare function cmpxchg(offset: usize, expected: i64, replacement: i64, immOffset?: usize): i64;\n    }\n  }\n}\n\n@builtin export declare function isize(value: void): isize;\nexport namespace isize {\n  @lazy export const MIN_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? -2147483648\n    : <isize>-9223372036854775808;\n  @lazy export const MAX_VALUE: isize = sizeof<i32>() == sizeof<isize>()\n    ? 2147483647\n    : <isize>9223372036854775807;\n}\n\n@builtin export declare function u8(value: void): u8;\nexport namespace u8 {\n  @lazy export const MIN_VALUE: u8 = 0;\n  @lazy export const MAX_VALUE: u8 = 255;\n}\n\n@builtin export declare function u16(value: void): u16;\nexport namespace u16 {\n  @lazy export const MIN_VALUE: u16 = 0;\n  @lazy export const MAX_VALUE: u16 = 65535;\n}\n\n@builtin export declare function u32(value: void): u32;\nexport namespace u32 {\n  @lazy export const MIN_VALUE: u32 = 0;\n  @lazy export const MAX_VALUE: u32 = 4294967295;\n}\n\n@builtin export declare function u64(value: void): u64;\nexport namespace u64 {\n  @lazy export const MIN_VALUE: u64 = 0;\n  @lazy export const MAX_VALUE: u64 = 18446744073709551615;\n}\n\n@builtin export declare function usize(value: void): usize;\nexport namespace usize {\n  @lazy export const MIN_VALUE: usize = 0;\n  @lazy export const MAX_VALUE: usize = sizeof<u32>() == sizeof<usize>()\n    ? 4294967295\n    : <usize>18446744073709551615;\n}\n\n@builtin export declare function bool(value: void): bool;\nexport namespace bool {\n  @lazy export const MIN_VALUE: bool = false;\n  @lazy export const MAX_VALUE: bool = true;\n}\n\n@builtin export declare function f32(value: void): f32;\nexport namespace f32 {\n  @lazy export const EPSILON = reinterpret<f32>(0x34000000); // 0x1p-23f\n  @lazy export const MIN_VALUE = reinterpret<f32>(0x00000001); // 0x0.000001p+0f\n  @lazy export const MAX_VALUE = reinterpret<f32>(0x7F7FFFFF); // 0x1.fffffep+127f\n  @lazy export const MIN_NORMAL_VALUE = reinterpret<f32>(0x00800000); // 0x1p-126f\n  @lazy export const MIN_SAFE_INTEGER: f32 = -16777215;\n  @lazy export const MAX_SAFE_INTEGER: f32 =  16777215;\n  @builtin export declare function abs(value: f32): f32;\n  @builtin export declare function ceil(value: f32): f32;\n  @builtin export declare function copysign(x: f32, y: f32): f32;\n  @builtin export declare function floor(value: f32): f32;\n  @builtin export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): f32;\n  @builtin export declare function max(left: f32, right: f32): f32;\n  @builtin export declare function min(left: f32, right: f32): f32;\n  @builtin export declare function nearest(value: f32): f32;\n  @builtin export declare function reinterpret_i32(value: i32): f32;\n  @builtin export declare function sqrt(value: f32): f32;\n  @builtin export declare function store(offset: usize, value: f32, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function trunc(value: f32): f32;\n}\n\n@builtin export declare function f64(value: void): f64;\nexport namespace f64 {\n  @lazy export const EPSILON = reinterpret<f64>(0x3CB0000000000000); // 0x1p-52\n  @lazy export const MIN_VALUE = reinterpret<f64>(0x0000000000000001); // 0x0.0000000000001p+0\n  @lazy export const MAX_VALUE = reinterpret<f64>(0x7FEFFFFFFFFFFFFF); // 0x1.fffffffffffffp+1023\n  @lazy export const MIN_NORMAL_VALUE = reinterpret<f64>(0x0010000000000000); // 0x1p-1022\n  @lazy export const MIN_SAFE_INTEGER: f64 = -9007199254740991;\n  @lazy export const MAX_SAFE_INTEGER: f64 =  9007199254740991;\n  @builtin export declare function abs(value: f64): f64;\n  @builtin export declare function ceil(value: f64): f64;\n  @builtin export declare function copysign(x: f64, y: f64): f64;\n  @builtin export declare function floor(value: f64): f64;\n  @builtin export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): f64;\n  @builtin export declare function max(left: f64, right: f64): f64;\n  @builtin export declare function min(left: f64, right: f64): f64;\n  @builtin export declare function nearest(value: f64): f64;\n  @builtin export declare function reinterpret_i64(value: i64): f64;\n  @builtin export declare function sqrt(value: f64): f64;\n  @builtin export declare function store(offset: usize, value: f64, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function trunc(value: f64): f64;\n}\n\n@builtin export declare function v128(a: i8, b: i8, c: i8, d: i8, e: i8, f: i8, g: i8, h: i8, i: i8, j: i8, k: i8, l: i8, m: i8, n: i8, o: i8, p: i8): v128;\nexport namespace v128 {\n  @builtin export declare function splat<T>(x: T): v128;\n  @builtin export declare function extract_lane<T>(x: v128, idx: u8): T;\n  @builtin export declare function replace_lane<T>(x: v128, idx: u8, value: T): v128;\n  @builtin export declare function shuffle<T>(a: v128, b: v128, ...lanes: u8[]): v128;\n  @builtin export declare function load(offset: usize, immOffset?: usize, immAlign?: usize): v128;\n  @builtin export declare function store(offset: usize, value: v128, immOffset?: usize, immAlign?: usize): void;\n  @builtin export declare function add<T>(a: v128, b: v128): v128;\n  @builtin export declare function sub<T>(a: v128, b: v128): v128;\n  @builtin export declare function mul<T>(a: v128, b: v128): v128; // except i64\n  @builtin export declare function div<T>(a: v128, b: v128): v128; // f32, f64 only\n  @builtin export declare function neg<T>(a: v128): v128;\n  @builtin export declare function add_saturate<T>(a: v128, b: v128): v128;\n  @builtin export declare function sub_saturate<T>(a: v128, b: v128): v128;\n  @builtin export declare function shl<T>(a: v128, b: i32): v128;\n  @builtin export declare function shr<T>(a: v128, b: i32): v128;\n  @builtin export declare function and(a: v128, b: v128): v128;\n  @builtin export declare function or(a: v128, b: v128): v128;\n  @builtin export declare function xor(a: v128, b: v128): v128;\n  @builtin export declare function not(a: v128): v128;\n  @builtin export declare function bitselect(v1: v128, v2: v128, c: v128): v128;\n  @builtin export declare function any_true<T>(a: v128): bool;\n  @builtin export declare function all_true<T>(a: v128): bool;\n  @builtin export declare function min<T>(a: v128, b: v128): v128; // f32, f64 only\n  @builtin export declare function max<T>(a: v128, b: v128): v128; // f32, f64 only\n  @builtin export declare function abs<T>(a: v128): v128; // f32, f64 only\n  @builtin export declare function sqrt<T>(a: v128): v128; // f32, f64 only\n  @builtin export declare function eq<T>(a: v128, b: v128): v128;\n  @builtin export declare function ne<T>(a: v128, b: v128): v128;\n  @builtin export declare function lt<T>(a: v128, b: v128): v128;\n  @builtin export declare function le<T>(a: v128, b: v128): v128;\n  @builtin export declare function gt<T>(a: v128, b: v128): v128;\n  @builtin export declare function ge<T>(a: v128, b: v128): v128;\n  @builtin export declare function convert<T>(a: v128): v128;\n  @builtin export declare function trunc<T>(a: v128): v128;\n}\n\n@builtin export declare function i8x16(a: i8, b: i8, c: i8, d: i8, e: i8, f: i8, g: i8, h: i8, i: i8, j: i8, k: i8, l: i8, m: i8, n: i8, o: i8, p: i8): v128;\nexport namespace i8x16 {\n  @builtin export declare function splat(x: i8): v128;\n  @builtin export declare function extract_lane_s(x: v128, idx: u8): i8;\n  @builtin export declare function extract_lane_u(x: v128, idx: u8): u8;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: i8): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function add_saturate_s(a: v128, b: v128): v128;\n  @builtin export declare function add_saturate_u(a: v128, b: v128): v128;\n  @builtin export declare function sub_saturate_s(a: v128, b: v128): v128;\n  @builtin export declare function sub_saturate_u(a: v128, b: v128): v128;\n  @builtin export declare function shl(a: v128, b: i32): v128;\n  @builtin export declare function shr_s(a: v128, b: i32): v128;\n  @builtin export declare function shr_u(a: v128, b: i32): v128;\n  @builtin export declare function any_true(a: v128): bool;\n  @builtin export declare function all_true(a: v128): bool;\n  @builtin export declare function eq(a: v128, b: v128): v128;\n  @builtin export declare function ne(a: v128, b: v128): v128;\n  @builtin export declare function lt_s(a: v128, b: v128): v128;\n  @builtin export declare function lt_u(a: v128, b: v128): v128;\n  @builtin export declare function le_s(a: v128, b: v128): v128;\n  @builtin export declare function le_u(a: v128, b: v128): v128;\n  @builtin export declare function gt_s(a: v128, b: v128): v128;\n  @builtin export declare function gt_u(a: v128, b: v128): v128;\n  @builtin export declare function ge_s(a: v128, b: v128): v128;\n  @builtin export declare function ge_u(a: v128, b: v128): v128;\n}\n\n@builtin export declare function i16x8(a: i16, b: i16, c: i16, d: i16, e: i16, f: i16, g: i16, h: i16): v128;\nexport namespace i16x8 {\n  @builtin export declare function splat(x: i16): v128;\n  @builtin export declare function extract_lane_s(x: v128, idx: u8): i16;\n  @builtin export declare function extract_lane_u(x: v128, idx: u8): u16;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: i16): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function add_saturate_s(a: v128, b: v128): v128;\n  @builtin export declare function add_saturate_u(a: v128, b: v128): v128;\n  @builtin export declare function sub_saturate_s(a: v128, b: v128): v128;\n  @builtin export declare function sub_saturate_u(a: v128, b: v128): v128;\n  @builtin export declare function shl(a: v128, b: i32): v128;\n  @builtin export declare function shr_s(a: v128, b: i32): v128;\n  @builtin export declare function shr_u(a: v128, b: i32): v128;\n  @builtin export declare function any_true(a: v128): bool;\n  @builtin export declare function all_true(a: v128): bool;\n  @builtin export declare function eq(a: v128, b: v128): v128;\n  @builtin export declare function ne(a: v128, b: v128): v128;\n  @builtin export declare function lt_s(a: v128, b: v128): v128;\n  @builtin export declare function lt_u(a: v128, b: v128): v128;\n  @builtin export declare function le_s(a: v128, b: v128): v128;\n  @builtin export declare function le_u(a: v128, b: v128): v128;\n  @builtin export declare function gt_s(a: v128, b: v128): v128;\n  @builtin export declare function gt_u(a: v128, b: v128): v128;\n  @builtin export declare function ge_s(a: v128, b: v128): v128;\n  @builtin export declare function ge_u(a: v128, b: v128): v128;\n}\n\n@builtin export declare function i32x4(a: i32, b: i32, c: i32, d: i32): v128;\nexport namespace i32x4 {\n  @builtin export declare function splat(x: i32): v128;\n  @builtin export declare function extract_lane(x: v128, idx: u8): i32;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: i32): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function shl(a: v128, b: i32): v128;\n  @builtin export declare function shr_s(a: v128, b: i32): v128;\n  @builtin export declare function shr_u(a: v128, b: i32): v128;\n  @builtin export declare function any_true(a: v128): bool;\n  @builtin export declare function all_true(a: v128): bool;\n  @builtin export declare function eq(a: v128, b: v128): v128;\n  @builtin export declare function ne(a: v128, b: v128): v128;\n  @builtin export declare function lt_s(a: v128, b: v128): v128;\n  @builtin export declare function lt_u(a: v128, b: v128): v128;\n  @builtin export declare function le_s(a: v128, b: v128): v128;\n  @builtin export declare function le_u(a: v128, b: v128): v128;\n  @builtin export declare function gt_s(a: v128, b: v128): v128;\n  @builtin export declare function gt_u(a: v128, b: v128): v128;\n  @builtin export declare function ge_s(a: v128, b: v128): v128;\n  @builtin export declare function ge_u(a: v128, b: v128): v128;\n  @builtin export declare function trunc_s_f32x4_sat(a: v128): v128;\n  @builtin export declare function trunc_u_f32x4_sat(a: v128): v128;\n}\n\n@builtin export declare function i64x2(a: i64, b: i64): v128;\nexport namespace i64x2 {\n  @builtin export declare function splat(x: i64): v128;\n  @builtin export declare function extract_lane(x: v128, idx: u8): i64;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: i64): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function shl(a: v128, b: i32): v128;\n  @builtin export declare function shr_s(a: v128, b: i32): v128;\n  @builtin export declare function shr_u(a: v128, b: i32): v128;\n  @builtin export declare function any_true(a: v128): bool;\n  @builtin export declare function all_true(a: v128): bool;\n  @builtin export declare function trunc_s_f64x2_sat(a: v128): v128;\n  @builtin export declare function trunc_u_f64x2_sat(a: v128): v128;\n}\n\n@builtin export declare function f32x4(a: f32, b: f32, c: f32, d: f32): v128;\nexport namespace f32x4 {\n  @builtin export declare function splat(x: f32): v128;\n  @builtin export declare function extract_lane(x: v128, idx: u8): f32;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: f32): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function div(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function min(a: v128, b: v128): v128;\n  @builtin export declare function max(a: v128, b: v128): v128;\n  @builtin export declare function abs(a: v128): v128;\n  @builtin export declare function sqrt(a: v128): v128;\n  @builtin export declare function eq(a: v128, b: v128): v128;\n  @builtin export declare function ne(a: v128, b: v128): v128;\n  @builtin export declare function lt(a: v128, b: v128): v128;\n  @builtin export declare function le(a: v128, b: v128): v128;\n  @builtin export declare function gt(a: v128, b: v128): v128;\n  @builtin export declare function ge(a: v128, b: v128): v128;\n  @builtin export declare function convert_s_i32x4(a: v128): v128;\n  @builtin export declare function convert_u_i32x4(a: v128): v128;\n}\n\n@builtin export declare function f64x2(a: f64, b: f64): v128;\nexport namespace f64x2 {\n  @builtin export declare function splat(x: f64): v128;\n  @builtin export declare function extract_lane(x: v128, idx: u8): f64;\n  @builtin export declare function replace_lane(x: v128, idx: u8, value: f64): v128;\n  @builtin export declare function add(a: v128, b: v128): v128;\n  @builtin export declare function sub(a: v128, b: v128): v128;\n  @builtin export declare function mul(a: v128, b: v128): v128;\n  @builtin export declare function div(a: v128, b: v128): v128;\n  @builtin export declare function neg(a: v128): v128;\n  @builtin export declare function min(a: v128, b: v128): v128;\n  @builtin export declare function max(a: v128, b: v128): v128;\n  @builtin export declare function abs(a: v128): v128;\n  @builtin export declare function sqrt(a: v128): v128;\n  @builtin export declare function eq(a: v128, b: v128): v128;\n  @builtin export declare function ne(a: v128, b: v128): v128;\n  @builtin export declare function lt(a: v128, b: v128): v128;\n  @builtin export declare function le(a: v128, b: v128): v128;\n  @builtin export declare function gt(a: v128, b: v128): v128;\n  @builtin export declare function ge(a: v128, b: v128): v128;\n  @builtin export declare function convert_s_i64x2(a: v128): v128;\n  @builtin export declare function convert_u_i64x2(a: v128): v128;\n}\n\nexport namespace v8x16 {\n  @builtin export declare function shuffle(a: v128, b: v128, l0: u8, l1: u8, l2: u8, l3: u8, l4: u8, l5: u8, l6: u8, l7: u8, l8: u8, l9: u8, l10: u8, l11: u8, l12: u8, l13: u8, l14: u8, l15: u8): v128;\n}\n\n@builtin export declare function start(): void;\n","import {\n  MAX_BLENGTH,\n  HEADER_SIZE,\n  allocateUnsafe,\n  reallocateUnsafe,\n  LOAD,\n  STORE\n} from \"./internal/arraybuffer\";\n\nimport {\n  allocateUnsafe as allocateUnsafeString,\n  freeUnsafe as freeUnsafeString,\n  copyUnsafe as copyUnsafeString\n} from \"./internal/string\";\n\nimport {\n  COMPARATOR,\n  SORT\n} from \"./internal/sort\";\n\nimport {\n  itoa,\n  dtoa,\n  itoa_stream,\n  dtoa_stream,\n  MAX_DOUBLE_LENGTH\n} from \"./internal/number\";\n\nimport {\n  isArray as builtin_isArray\n} from \"./builtins\";\n\nexport class Array<T> {\n  [key: number]: T; // compatibility only\n\n  /* @internal */ buffer_: ArrayBuffer;\n  /* @internal */ length_: i32;\n\n  @inline static isArray<U>(value: U): bool {\n    return builtin_isArray(value) && value !== null;\n  }\n\n  constructor(length: i32 = 0) {\n    const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n    if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\n    var byteLength = length << alignof<T>();\n    var buffer = allocateUnsafe(byteLength);\n    this.buffer_ = buffer;\n    this.length_ = length;\n    memory.fill(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      0,\n      <usize>byteLength\n    );\n  }\n\n  @inline\n  get length(): i32 {\n    return this.length_;\n  }\n\n  set length(length: i32) {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    if (<u32>length > <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length > <u32>MAX_LENGTH) throw new RangeError(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, length << alignof<T>());\n      this.buffer_ = buffer;\n    }\n    this.length_ = length;\n  }\n\n  every(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (!callbackfn(LOAD<T>(this.buffer_, index), index, this)) return false;\n    }\n    return true;\n  }\n\n  findIndex(predicate: (element: T, index: i32, array: Array<T>) => bool): i32 {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (predicate(LOAD<T>(this.buffer_, index), index, this)) return index;\n    }\n    return -1;\n  }\n\n  @operator(\"[]\")\n  private __get(index: i32): T {\n    var buffer = this.buffer_;\n    return <u32>index < <u32>(buffer.byteLength >>> alignof<T>())\n      ? LOAD<T>(buffer, index)\n      : <T>unreachable();\n  }\n\n  @operator(\"{}\")\n  private __unchecked_get(index: i32): T {\n    return LOAD<T>(this.buffer_, index);\n  }\n\n  @operator(\"[]=\")\n  private __set(index: i32, value: T): void {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    if (<u32>index >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>index >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, (index + 1) << alignof<T>());\n      this.buffer_ = buffer;\n      this.length_ = index + 1;\n    }\n    STORE<T>(buffer, index, value);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n  }\n\n  @operator(\"{}=\")\n  private __unchecked_set(index: i32, value: T): void {\n    STORE<T>(this.buffer_, index, value);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(value)); // tslint:disable-line\n  }\n\n  fill(value: T, start: i32 = 0, end: i32 = i32.MAX_VALUE): this {\n    var buffer = this.buffer_;\n    var len    = this.length_;\n\n    start = start < 0 ? max(len + start, 0) : min(start, len);\n    end   = end   < 0 ? max(len + end,   0) : min(end,   len);\n\n    if (sizeof<T>() == 1) {\n      if (start < end) {\n        memory.fill(\n          changetype<usize>(buffer) + start + HEADER_SIZE,\n          <u8>value,\n          <usize>(end - start)\n        );\n      }\n    } else {\n      for (; start < end; ++start) {\n        STORE<T>(buffer, start, value);\n      }\n    }\n    return this;\n  }\n\n  @inline\n  includes(searchElement: T, fromIndex: i32 = 0): bool {\n    return this.indexOf(searchElement, fromIndex) >= 0;\n  }\n\n  indexOf(searchElement: T, fromIndex: i32 = 0): i32 {\n    var length = this.length_;\n    if (length == 0 || fromIndex >= length) return -1;\n    if (fromIndex < 0) fromIndex = max(length + fromIndex, 0);\n    var buffer = this.buffer_;\n    while (fromIndex < length) {\n      if (LOAD<T>(buffer, fromIndex) == searchElement) return fromIndex;\n      ++fromIndex;\n    }\n    return -1;\n  }\n\n  lastIndexOf(searchElement: T, fromIndex: i32 = this.length_): i32 {\n    var length = this.length_;\n    if (length == 0) return -1;\n    if (fromIndex < 0) fromIndex = length + fromIndex; // no need to clamp\n    else if (fromIndex >= length) fromIndex = length - 1;\n    var buffer = this.buffer_;\n    while (fromIndex >= 0) {                           // ^\n      if (LOAD<T>(buffer, fromIndex) == searchElement) return fromIndex;\n      --fromIndex;\n    }\n    return -1;\n  }\n\n  push(element: T): i32 {\n    var length = this.length_;\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    var newLength = length + 1; // safe only if length is checked\n    if (<u32>length >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\n      this.buffer_ = buffer;\n    }\n    this.length_ = newLength;\n    STORE<T>(buffer, length, element);\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\n    return newLength;\n  }\n\n  concat(items: Array<T>): Array<T> {\n    var thisLen = this.length_;\n    var otherLen = select(0, items.length_, items === null);\n    var outLen = thisLen + otherLen;\n    var out = new Array<T>(outLen);\n\n    if (thisLen) {\n      memory.copy(\n        changetype<usize>(out.buffer_)  + HEADER_SIZE,\n        changetype<usize>(this.buffer_) + HEADER_SIZE,\n        <usize>thisLen << alignof<T>()\n      );\n    }\n    if (otherLen) {\n      memory.copy(\n        changetype<usize>(out.buffer_)   + HEADER_SIZE + (<usize>thisLen << alignof<T>()),\n        changetype<usize>(items.buffer_) + HEADER_SIZE,\n        <usize>otherLen << alignof<T>()\n      );\n    }\n    return out;\n  }\n\n  copyWithin(target: i32, start: i32, end: i32 = i32.MAX_VALUE): this {\n    var buffer = this.buffer_;\n    var len = this.length_;\n\n        end   = min<i32>(end, len);\n    var to    = target < 0 ? max(len + target, 0) : min(target, len);\n    var from  = start < 0 ? max(len + start, 0) : min(start, len);\n    var last  = end < 0 ? max(len + end, 0) : min(end, len);\n    var count = min(last - from, len - to);\n\n    if (from < to && to < (from + count)) {\n      from += count - 1;\n      to   += count - 1;\n      while (count) {\n        STORE<T>(buffer, to, LOAD<T>(buffer, from));\n        --from, --to, --count;\n      }\n    } else {\n      memory.copy(\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>to << alignof<T>()),\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>from << alignof<T>()),\n        <usize>count << alignof<T>()\n      );\n    }\n    return this;\n  }\n\n  pop(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(\"Array is empty\");\n    var element = LOAD<T>(this.buffer_, --length);\n    this.length_ = length;\n    return element;\n  }\n\n  forEach(callbackfn: (value: T, index: i32, array: Array<T>) => void): void {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      callbackfn(LOAD<T>(this.buffer_, index), index, this);\n    }\n  }\n\n  map<U>(callbackfn: (value: T, index: i32, array: Array<T>) => U): Array<U> {\n    var length = this.length_;\n    var result = new Array<U>(length);\n    var buffer = result.buffer_;\n    for (let index = 0; index < min(length, this.length_); ++index) {\n      STORE<U>(buffer, index, callbackfn(LOAD<T>(this.buffer_, index), index, this));\n    }\n    return result;\n  }\n\n  filter(callbackfn: (value: T, index: i32, array: Array<T>) => bool): Array<T> {\n    var result = new Array<T>();\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      let value = LOAD<T>(this.buffer_, index);\n      if (callbackfn(value, index, this)) result.push(value);\n    }\n    return result;\n  }\n\n  reduce<U>(\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      accum = callbackfn(accum, LOAD<T>(this.buffer_, index), index, this);\n    }\n    return accum;\n  }\n\n  reduceRight<U>(\n    callbackfn: (previousValue: U, currentValue: T, currentIndex: i32, array: Array<T>) => U,\n    initialValue: U\n  ): U {\n    var accum = initialValue;\n    for (let index = this.length_ - 1; index >= 0; --index) {\n      accum = callbackfn(accum, LOAD<T>(this.buffer_, index), index, this);\n    }\n    return accum;\n  }\n\n  shift(): T {\n    var length = this.length_;\n    if (length < 1) throw new RangeError(\"Array is empty\");\n    var buffer = this.buffer_;\n    var element = LOAD<T>(buffer, 0);\n    var lastIndex = length - 1;\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE,\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\n      <usize>lastIndex << alignof<T>()\n    );\n    STORE<T>(buffer, lastIndex, <T>null);\n    this.length_ = lastIndex;\n    return element;\n  }\n\n  some(callbackfn: (element: T, index: i32, array: Array<T>) => bool): bool {\n    for (let index = 0, length = this.length_; index < min(length, this.length_); ++index) {\n      if (callbackfn(LOAD<T>(this.buffer_, index), index, this)) return true;\n    }\n    return false;\n  }\n\n  unshift(element: T): i32 {\n    var buffer = this.buffer_;\n    var capacity = buffer.byteLength >>> alignof<T>();\n    var length = this.length_;\n    var newLength = length + 1; // safe only if length is checked\n    if (<u32>length >= <u32>capacity) {\n      const MAX_LENGTH = MAX_BLENGTH >>> alignof<T>();\n      if (<u32>length >= <u32>MAX_LENGTH) throw new Error(\"Invalid array length\");\n      buffer = reallocateUnsafe(buffer, newLength << alignof<T>());\n      capacity = buffer.byteLength >>> alignof<T>();\n      this.buffer_ = buffer;\n    }\n    memory.copy(\n      changetype<usize>(buffer) + HEADER_SIZE + sizeof<T>(),\n      changetype<usize>(buffer) + HEADER_SIZE,\n      <usize>(capacity - 1) << alignof<T>()\n    );\n    STORE<T>(buffer, 0, element);\n    this.length_ = newLength;\n    if (isManaged<T>()) __gc_link(changetype<usize>(this), changetype<usize>(element)); // tslint:disable-line\n    return newLength;\n  }\n\n  slice(begin: i32 = 0, end: i32 = i32.MAX_VALUE): Array<T> {\n    var len = this.length_;\n    begin = begin < 0 ? max(begin + len, 0) : min(begin, len);\n    end = end < 0 ? max(end + len, 0) : min(end, len);\n    len = max(end - begin, 0);\n    var sliced = new Array<T>(len);\n    if (len) {\n      memory.copy(\n        changetype<usize>(sliced.buffer_) + HEADER_SIZE,\n        changetype<usize>(this.buffer_) + HEADER_SIZE + (<usize>begin << alignof<T>()),\n        <usize>len << alignof<T>()\n      );\n    }\n    return sliced;\n  }\n\n  splice(start: i32, deleteCount: i32 = i32.MAX_VALUE): Array<T> {\n    var length  = this.length_;\n    start       = start < 0 ? max<i32>(length + start, 0) : min<i32>(start, length);\n    deleteCount = max<i32>(min<i32>(deleteCount, length - start), 0);\n    var buffer  = this.buffer_;\n    var spliced = new Array<T>(deleteCount);\n    var source  = changetype<usize>(buffer) + HEADER_SIZE + (<usize>start << alignof<T>());\n    memory.copy(\n      changetype<usize>(spliced.buffer_) + HEADER_SIZE,\n      source,\n      <usize>deleteCount << alignof<T>()\n    );\n    var offset = start + deleteCount;\n    if (length != offset) {\n      memory.copy(\n        source,\n        changetype<usize>(buffer) + HEADER_SIZE + (<usize>offset << alignof<T>()),\n        <usize>(length - offset) << alignof<T>()\n      );\n    }\n    this.length_ = length - deleteCount;\n    return spliced;\n  }\n\n  reverse(): Array<T> {\n    var buffer = this.buffer_;\n    for (let front = 0, back = this.length_ - 1; front < back; ++front, --back) {\n      let temp = LOAD<T>(buffer, front);\n      STORE<T>(buffer, front, LOAD<T>(buffer, back));\n      STORE<T>(buffer, back, temp);\n    }\n    return this;\n  }\n\n  sort(comparator: (a: T, b: T) => i32 = COMPARATOR<T>()): this {\n    // TODO remove this when flow will allow trackcing null\n    assert(comparator); // The comparison function must be a function\n\n    var length = this.length_;\n    if (length <= 1) return this;\n    var buffer = this.buffer_;\n    if (length == 2) {\n      let a = LOAD<T>(buffer, 1); // a = arr[1]\n      let b = LOAD<T>(buffer, 0); // b = arr[0]\n      if (comparator(a, b) < 0) {\n        STORE<T>(buffer, 1, b);   // arr[1] = b;\n        STORE<T>(buffer, 0, a);   // arr[0] = a;\n      }\n      return this;\n    }\n    SORT<T>(buffer, 0, length, comparator);\n    return this;\n  }\n\n  join(separator: string = \",\"): string {\n    var lastIndex = this.length_ - 1;\n    if (lastIndex < 0) return \"\";\n    var result = \"\";\n    var value: T;\n    var buffer = this.buffer_;\n    var sepLen = separator.length;\n    var hasSeparator = sepLen != 0;\n    if (value instanceof bool) {\n      if (!lastIndex) return select<string>(\"true\", \"false\", LOAD<T,bool>(buffer, 0));\n\n      let valueLen = 5; // max possible length of element len(\"false\")\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T,bool>(buffer, i);\n        valueLen = 4 + <i32>(!value);\n        copyUnsafeString(result, offset, select<string>(\"true\", \"false\", value), 0, valueLen);\n        offset += valueLen;\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, changetype<String>(separator), 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T,bool>(buffer, lastIndex);\n      valueLen = 4 + <i32>(!value);\n      copyUnsafeString(result, offset, select<string>(\"true\", \"false\", value), 0, valueLen);\n      offset += valueLen;\n\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isInteger<T>()) {\n      if (!lastIndex) return changetype<string>(itoa<T>(LOAD<T>(buffer, 0)));\n\n      const valueLen = (sizeof<T>() <= 4 ? 10 : 20) + <i32>isSigned<T>();\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T>(buffer, lastIndex);\n      offset += itoa_stream<T>(changetype<usize>(result), offset, value);\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isFloat<T>()) {\n      if (!lastIndex) return changetype<string>(dtoa(LOAD<T,f64>(buffer, 0)));\n\n      const valueLen = MAX_DOUBLE_LENGTH;\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T,f64>(buffer, i);\n        offset += dtoa_stream(changetype<usize>(result), offset, value);\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<T,f64>(buffer, lastIndex);\n      offset += dtoa_stream(changetype<usize>(result), offset, value);\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else if (isString<T>()) {\n      if (!lastIndex) return LOAD<string>(buffer, 0);\n\n      let estLen = 0;\n      for (let i = 0, len = lastIndex + 1; i < len; ++i) {\n        estLen += LOAD<string>(buffer, i).length;\n      }\n      let offset = 0;\n      let result = allocateUnsafeString(estLen + sepLen * lastIndex);\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<string>(buffer, i);\n        if (value) {\n          let valueLen = value.length;                          // tslint:disable-line:no-unsafe-any\n          copyUnsafeString(result, offset, value, 0, valueLen); // tslint:disable-line:no-unsafe-any\n          offset += valueLen;                                   // tslint:disable-line:no-unsafe-any\n        }\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, separator, 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      value = LOAD<string>(buffer, lastIndex);\n      if (value) {\n        let valueLen = value.length;                          // tslint:disable-line:no-unsafe-any\n        copyUnsafeString(result, offset, value, 0, valueLen); // tslint:disable-line:no-unsafe-any\n      }\n      return result;\n    } else if (isArray<T>()) {\n      if (!lastIndex) {\n        value = LOAD<T>(buffer, 0);\n        return value ? value.join(separator) : \"\"; // tslint:disable-line:no-unsafe-any\n      }\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        if (value) result += value.join(separator); // tslint:disable-line:no-unsafe-any\n        if (hasSeparator) result += separator;\n      }\n      value = LOAD<T>(buffer, lastIndex);\n      if (value) result += value.join(separator); // tslint:disable-line:no-unsafe-any\n      return result;\n    } else if (isReference<T>()) { // References\n      if (!lastIndex) return \"[object Object]\";\n      const valueLen = 15; // max possible length of element len(\"[object Object]\")\n      let estLen = (valueLen + sepLen) * lastIndex + valueLen;\n      let result = allocateUnsafeString(estLen);\n      let offset = 0;\n      for (let i = 0; i < lastIndex; ++i) {\n        value = LOAD<T>(buffer, i);\n        if (value) {\n          copyUnsafeString(result, offset, changetype<String>(\"[object Object]\"), 0, valueLen);\n          offset += valueLen;\n        }\n        if (hasSeparator) {\n          copyUnsafeString(result, offset, changetype<String>(separator), 0, sepLen);\n          offset += sepLen;\n        }\n      }\n      if (LOAD<T>(buffer, lastIndex)) {\n        copyUnsafeString(result, offset, changetype<String>(\"[object Object]\"), 0, valueLen);\n        offset += valueLen;\n      }\n      let out = result;\n      if (estLen > offset) {\n        out = result.substring(0, offset);\n        freeUnsafeString(result);\n      }\n      return out;\n    } else {\n      assert(false); // Unsupported generic typename\n    }\n  }\n\n  @inline\n  toString(): string {\n    return this.join();\n  }\n\n  private __gc(): void {\n    var buffer = this.buffer_;\n    __gc_mark(changetype<usize>(buffer)); // tslint:disable-line\n    if (isManaged<T>()) {\n      let offset: usize = 0;\n      let end = <usize>this.length_ << alignof<usize>();\n      while (offset < end) {\n        __gc_mark(load<usize>(changetype<usize>(buffer) + offset, HEADER_SIZE)); // tslint:disable-line\n        offset += sizeof<usize>();\n      }\n    }\n  }\n}\n","import {\n  TypedArray,\n  FILL,\n  SORT,\n  SUBARRAY,\n  REDUCE,\n  REDUCE_RIGHT,\n  MAP,\n  FIND_INDEX,\n  SOME,\n  EVERY,\n  FOREACH,\n  REVERSE,\n} from \"./internal/typedarray\";\n\nimport {\n  COMPARATOR\n} from \"./internal/sort\";\n\nfunction clampToByte(value: i32): i32 {\n  return ~(value >> 31) & (((255 - value) >> 31) | value); // & 255\n}\n\nexport class Int8Array extends TypedArray<i8> {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<i8>();\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int8Array {\n    return FILL<Int8Array, i8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i8, b: i8) => i32 = COMPARATOR<i8>()): Int8Array {\n    return SORT<Int8Array, i8>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int8Array {\n    return SUBARRAY<Int8Array, i8>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int8Array, i8, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: i8, index: i32, array: Int8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int8Array, i8, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: i8, index: i32, self: Int8Array) => i8): Int8Array {\n    return MAP<Int8Array, i8>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: i8, index: i32, self: Int8Array) => bool): i32 {\n    return FIND_INDEX<Int8Array, i8>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: i8, index: i32, self: Int8Array) => bool): bool {\n    return SOME<Int8Array, i8>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: i8, index: i32, self: Int8Array) => bool): bool {\n    return EVERY<Int8Array, i8>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: i8, index: i32, self: Int8Array) => void): void {\n    FOREACH<Int8Array, i8>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i8>(this);\n  }\n}\n\nexport class Uint8Array extends TypedArray<u8> {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<u8>();\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8Array {\n    return FILL<Uint8Array, u8>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8Array {\n    return SORT<Uint8Array, u8>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint8Array {\n    return SUBARRAY<Uint8Array, u8>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8Array, u8, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: u8, index: i32, array: Uint8Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8Array, u8, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: u8, index: i32, self: Uint8Array) => u8): Uint8Array {\n    return MAP<Uint8Array, u8>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: u8, index: i32, self: Uint8Array) => bool): i32 {\n    return FIND_INDEX<Uint8Array, u8>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: u8, index: i32, self: Uint8Array) => bool): bool {\n    return SOME<Uint8Array, u8>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: u8, index: i32, self: Uint8Array) => bool): bool {\n    return EVERY<Uint8Array, u8>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: u8, index: i32, self: Uint8Array) => void): void {\n    FOREACH<Uint8Array, u8>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u8>(this);\n  }\n}\n\nexport class Uint8ClampedArray extends Uint8Array {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<u8>();\n\n  @inline @operator(\"[]=\")\n  protected __set(index: i32, value: i32): void {\n    super.__set(index, clampToByte(value));\n  }\n\n  @inline @operator(\"{}=\")\n  protected __unchecked_set(index: i32, value: i32): void {\n    super.__unchecked_set(index, clampToByte(value));\n  }\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint8ClampedArray {\n    return changetype<Uint8ClampedArray>(super.fill(value, start, end)); // safe because '.fill' reuses 'this'\n  }\n\n  sort(comparator: (a: u8, b: u8) => i32 = COMPARATOR<u8>()): Uint8ClampedArray {\n    return changetype<Uint8ClampedArray>(super.sort(comparator)); // safe because '.sort' reuses 'this'\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint8ClampedArray {\n    return SUBARRAY<Uint8ClampedArray, u8>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: u8, index: i32, array: Uint8ClampedArray) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint8ClampedArray, u8, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: u8, index: i32, array: Uint8ClampedArray) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint8ClampedArray, u8, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: u8, index: i32, self: Uint8ClampedArray) => u8): Uint8ClampedArray {\n    return MAP<Uint8ClampedArray, u8>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): i32 {\n    return FIND_INDEX<Uint8ClampedArray, u8>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): bool {\n    return SOME<Uint8ClampedArray, u8>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: u8, index: i32, self: Uint8ClampedArray) => bool): bool {\n    return EVERY<Uint8ClampedArray, u8>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: u8, index: i32, self: Uint8ClampedArray) => void): void {\n    FOREACH<Uint8ClampedArray, u8>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u8>(this);\n  }\n}\n\nexport class Int16Array extends TypedArray<i16> {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<i16>();\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int16Array {\n    return FILL<Int16Array, i16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i16, b: i16) => i32 = COMPARATOR<i16>()): Int16Array {\n    return SORT<Int16Array, i16>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int16Array {\n    return SUBARRAY<Int16Array, i16>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int16Array, i16, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: i16, index: i32, array: Int16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int16Array, i16, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: i16, index: i32, self: Int16Array) => i16): Int16Array {\n    return MAP<Int16Array, i16>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: i16, index: i32, self: Int16Array) => bool): i32 {\n    return FIND_INDEX<Int16Array, i16>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: i16, index: i32, self: Int16Array) => bool): bool {\n    return SOME<Int16Array, i16>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: i16, index: i32, self: Int16Array) => bool): bool {\n    return EVERY<Int16Array, i16>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: i16, index: i32, self: Int16Array) => void): void {\n    FOREACH<Int16Array, i16>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i16>(this);\n  }\n}\n\nexport class Uint16Array extends TypedArray<u16> {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<u16>();\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint16Array {\n    return FILL<Uint16Array, u16>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u16, b: u16) => i32 = COMPARATOR<u16>()): Uint16Array {\n    return SORT<Uint16Array, u16>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint16Array {\n    return SUBARRAY<Uint16Array, u16>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint16Array, u16, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: u16, index: i32, array: Uint16Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint16Array, u16, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: u16, index: i32, self: Uint16Array) => u16): Uint16Array {\n    return MAP<Uint16Array, u16>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: u16, index: i32, self: Uint16Array) => bool): i32 {\n    return FIND_INDEX<Uint16Array, u16>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: u16, index: i32, self: Uint16Array) => bool): bool {\n    return SOME<Uint16Array, u16>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: u16, index: i32, self: Uint16Array) => bool): bool {\n    return EVERY<Uint16Array, u16>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: u16, index: i32, self: Uint16Array) => void): void {\n    FOREACH<Uint16Array, u16>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u16>(this);\n  }\n}\n\nexport class Int32Array extends TypedArray<i32> {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<i32>();\n\n  fill(value: i32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int32Array {\n    return FILL<Int32Array, i32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i32, b: i32) => i32 = COMPARATOR<i32>()): Int32Array {\n    return SORT<Int32Array, i32>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int32Array {\n    return SUBARRAY<Int32Array, i32>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int32Array, i32, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: i32, index: i32, array: Int32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int32Array, i32, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: i32, index: i32, self: Int32Array) => i32): Int32Array {\n    return MAP<Int32Array, i32>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: i32, index: i32, self: Int32Array) => bool): i32 {\n    return FIND_INDEX<Int32Array, i32>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: i32, index: i32, self: Int32Array) => bool): bool {\n    return SOME<Int32Array, i32>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: i32, index: i32, self: Int32Array) => bool): bool {\n    return EVERY<Int32Array, i32>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: i32, index: i32, self: Int32Array) => void): void {\n    FOREACH<Int32Array, i32>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i32>(this);\n  }\n}\n\nexport class Uint32Array extends TypedArray<u32> {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<u32>();\n\n  fill(value: u32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint32Array {\n    return FILL<Uint32Array, u32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u32, b: u32) => i32 = COMPARATOR<u32>()): Uint32Array {\n    return SORT<Uint32Array, u32>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint32Array {\n    return SUBARRAY<Uint32Array, u32>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint32Array, u32, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: u32, index: i32, array: Uint32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint32Array, u32, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: u32, index: i32, self: Uint32Array) => u32): Uint32Array {\n    return MAP<Uint32Array, u32>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: u32, index: i32, self: Uint32Array) => bool): i32 {\n    return FIND_INDEX<Uint32Array, u32>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: u32, index: i32, self: Uint32Array) => bool): bool {\n    return SOME<Uint32Array, u32>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: u32, index: i32, self: Uint32Array) => bool): bool {\n    return EVERY<Uint32Array, u32>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: u32, index: i32, self: Uint32Array) => void): void {\n    FOREACH<Uint32Array, u32>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u32>(this);\n  }\n}\n\nexport class Int64Array extends TypedArray<i64> {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<i64>();\n\n  fill(value: i64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Int64Array {\n    return FILL<Int64Array, i64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: i64, b: i64) => i32 = COMPARATOR<i64>()): Int64Array {\n    return SORT<Int64Array, i64>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Int64Array {\n    return SUBARRAY<Int64Array, i64>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Int64Array, i64, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: i64, index: i32, array: Int64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Int64Array, i64, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: i64, index: i32, self: Int64Array) => i64): Int64Array {\n    return MAP<Int64Array, i64>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: i64, index: i32, self: Int64Array) => bool): i32 {\n    return FIND_INDEX<Int64Array, i64>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: i64, index: i32, self: Int64Array) => bool): bool {\n    return SOME<Int64Array, i64>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: i64, index: i32, self: Int64Array) => bool): bool {\n    return EVERY<Int64Array, i64>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: i64, index: i32, self: Int64Array) => void): void {\n    FOREACH<Int64Array, i64>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, i64>(this);\n  }\n}\n\nexport class Uint64Array extends TypedArray<u64> {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<u64>();\n\n  fill(value: u64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Uint64Array {\n    return FILL<Uint64Array, u64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: u64, b: u64) => i32 = COMPARATOR<u64>()): Uint64Array {\n    return SORT<Uint64Array, u64>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Uint64Array {\n    return SUBARRAY<Uint64Array, u64>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Uint64Array, u64, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: u64, index: i32, array: Uint64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Uint64Array, u64, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: u64, index: i32, self: Uint64Array) => u64): Uint64Array {\n    return MAP<Uint64Array, u64>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: u64, index: i32, self: Uint64Array) => bool): i32 {\n    return FIND_INDEX<Uint64Array, u64>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: u64, index: i32, self: Uint64Array) => bool): bool {\n    return SOME<Uint64Array, u64>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: u64, index: i32, self: Uint64Array) => bool): bool {\n    return EVERY<Uint64Array, u64>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: u64, index: i32, self: Uint64Array) => void): void {\n    FOREACH<Uint64Array, u64>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, u64>(this);\n  }\n}\n\nexport class Float32Array extends TypedArray<f32> {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<f32>();\n\n  fill(value: f32, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float32Array {\n    return FILL<Float32Array, f32>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f32, b: f32) => i32 = COMPARATOR<f32>()): Float32Array {\n    return SORT<Float32Array, f32>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Float32Array {\n    return SUBARRAY<Float32Array, f32>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float32Array, f32, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: f32, index: i32, array: Float32Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float32Array, f32, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: f32, index: i32, self: Float32Array) => f32): Float32Array {\n    return MAP<Float32Array, f32>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: f32, index: i32, self: Float32Array) => bool): i32 {\n    return FIND_INDEX<Float32Array, f32>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: f32, index: i32, self: Float32Array) => bool): bool {\n    return SOME<Float32Array, f32>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: f32, index: i32, self: Float32Array) => bool): bool {\n    return EVERY<Float32Array, f32>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: f32, index: i32, self: Float32Array) => void): void {\n    FOREACH<Float32Array, f32>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, f32>(this);\n  }\n}\n\nexport class Float64Array extends TypedArray<f64> {\n  @lazy static readonly BYTES_PER_ELEMENT: usize = sizeof<f64>();\n\n  fill(value: f64, start: i32 = 0, end: i32 = i32.MAX_VALUE): Float64Array {\n    return FILL<Float64Array, f64>(this, value, start, end);\n  }\n\n  sort(comparator: (a: f64, b: f64) => i32 = COMPARATOR<f64>()): Float64Array {\n    return SORT<Float64Array, f64>(this, comparator);\n  }\n\n  subarray(begin: i32 = 0, end: i32 = 0x7fffffff): Float64Array {\n    return SUBARRAY<Float64Array, f64>(this, begin, end);\n  }\n\n  reduce<T>(\n    callbackfn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE<Float64Array, f64, T>(this, callbackfn, initialValue);\n  }\n\n  reduceRight<T>(\n    callbackfn: (accumulator: T, value: f64, index: i32, array: Float64Array) => T,\n    initialValue: T,\n  ): T {\n    return REDUCE_RIGHT<Float64Array, f64, T>(this, callbackfn, initialValue);\n  }\n\n  map(callbackfn: (value: f64, index: i32, self: Float64Array) => f64): Float64Array {\n    return MAP<Float64Array, f64>(this, callbackfn);\n  }\n\n  findIndex(callbackfn: (value: f64, index: i32, self: Float64Array) => bool): i32 {\n    return FIND_INDEX<Float64Array, f64>(this, callbackfn);\n  }\n\n  some(callbackfn: (value: f64, index: i32, self: Float64Array) => bool): bool {\n    return SOME<Float64Array, f64>(this, callbackfn);\n  }\n\n  every(callbackfn: (value: f64, index: i32, self: Float64Array) => bool): bool {\n    return EVERY<Float64Array, f64>(this, callbackfn);\n  }\n\n  forEach(callbackfn: (value: f64, index: i32, self: Float64Array) => void): void {\n    FOREACH<Float64Array, f64>(this, callbackfn);\n  }\n\n  reverse(): this {\n    return REVERSE<this, f64>(this);\n  }\n}\n","\n@inline export function precompBase(): i64[][][] {\n    const table: i64[][][] = [\n        [\n            [ 54554, 36645, 11616, 51542, 42930, 38181, 51040, 26924, 56412, 64982, 57905, 49316, 21502, 52590, 14035, 8553 ],\n            [ 26200, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214, 26214 ],\n            //\n            [ 56720, 42423, 35507, 28126, 21237, 30545, 40832, 8432, 58237, 25771, 20110, 26346, 30309, 55179, 24335, 59271 ]\n        ],\n        [\n            [ 52750, 10307, 41294, 33733, 42079, 5591, 36421, 2061, 59308, 6195, 15229, 15620, 1132, 40794, 14412, 13995 ],\n            [ 41910, 27384, 18094, 3679, 20822, 25656, 3921, 38713, 8022, 51618, 24296, 7586, 10690, 2339, 52723, 41568 ],\n            //\n            [ 46062, 28009, 16213, 46874, 9218, 49655, 44233, 23929, 46099, 29443, 24328, 7653, 26844, 2863, 42885, 42136 ]\n        ],\n        [\n            [ 63600, 50377, 42583, 18746, 5447, 37838, 40641, 6771, 8441, 31285, 54456, 33573, 61766, 22223, 43227, 8253 ],\n            [ 4380, 51762, 43873, 57144, 4080, 59951, 10290, 19698, 29036, 32981, 47237, 18190, 38369, 51989, 59431, 51152 ],\n            //\n            [ 4952, 29322, 8950, 24463, 1994, 46813, 58142, 29077, 10592, 50812, 47722, 29204, 9740, 55411, 15576, 8824 ]\n        ],\n        [\n            [ 33992, 2213, 64956, 15239, 35737, 32873, 50811, 60218, 53139, 63566, 11612, 17030, 29110, 38871, 57695, 26434 ],\n            [ 47540, 64567, 23465, 7727, 58515, 25118, 15612, 33144, 62351, 26250, 28425, 28333, 29561, 51685, 1536, 8659 ],\n            //\n            [ 20908, 54298, 62490, 28606, 11253, 13388, 52845, 17904, 55699, 14515, 49819, 5640, 60129, 60919, 23020, 44111 ]\n        ],\n        [\n            [ 63992, 27688, 22893, 22962, 9076, 59327, 36147, 2391, 40081, 2084, 11029, 47330, 15086, 10213, 34310, 9124 ],\n            [ 10200, 49511, 43831, 55418, 39975, 36359, 4607, 45162, 28280, 15021, 3886, 40856, 50034, 33407, 38642, 61590 ],\n            //\n            [ 39894, 52991, 39453, 25679, 37738, 6417, 14828, 45000, 58457, 5428, 35435, 23071, 27457, 40810, 16704, 4598 ]\n        ],\n        [\n            [ 20262, 38782, 16630, 20445, 21244, 63864, 12688, 58883, 22141, 2873, 22045, 34178, 6905, 5954, 27753, 14799 ],\n            [ 53846, 14854, 14671, 63789, 16440, 19596, 1511, 46098, 35704, 49400, 37868, 31454, 52843, 57644, 43278, 50228 ],\n            //\n            [ 50828, 23010, 29823, 9153, 42677, 30392, 22209, 29006, 42389, 27975, 33876, 54179, 27757, 4724, 4473, 60920 ]\n        ],\n        [\n            [ 41976, 45116, 31247, 61777, 54904, 27353, 18173, 47336, 31144, 34589, 37113, 40178, 10515, 3064, 25632, 34298 ],\n            [ 2342, 6106, 38319, 64470, 6506, 28173, 4702, 39409, 43596, 28584, 34425, 29428, 40, 63782, 40682, 15641 ],\n            //\n            [ 3944, 47739, 43476, 15935, 21186, 56698, 22506, 24090, 55604, 42349, 48578, 53726, 36065, 29700, 9907, 12817 ]\n        ],\n        [\n            [ 56692, 61647, 18779, 23970, 31296, 9763, 31396, 35459, 35767, 6866, 60095, 9218, 24328, 43387, 48817, 47005 ],\n            [ 34556, 2123, 59374, 64928, 17697, 13321, 25025, 9010, 39932, 18517, 39251, 25591, 39376, 462, 40928, 10475 ],\n            //\n            [ 35526, 3568, 53256, 5218, 15536, 828, 61499, 29526, 61023, 38006, 59815, 49772, 25327, 29839, 19130, 15992 ]\n        ],\n        [\n            [ 42326, 3266, 48349, 8376, 22381, 46433, 30971, 54453, 21577, 9872, 52161, 59113, 60607, 19997, 2029, 24190 ],\n            [ 63156, 22124, 8241, 3604, 55720, 49447, 15770, 32027, 9742, 33235, 60330, 27637, 633, 20977, 30044, 36693 ],\n            //\n            [ 41598, 10327, 26108, 23283, 57311, 13298, 44422, 40525, 41389, 2382, 19542, 17076, 22138, 7853, 44588, 25576 ]\n        ],\n        [\n            [ 13322, 33485, 13116, 21513, 25042, 12345, 64923, 8687, 54310, 64112, 63982, 13105, 33907, 46032, 49025, 12012 ],\n            [ 37864, 139, 63332, 47260, 57460, 18918, 19784, 18509, 6582, 16545, 55735, 16690, 33404, 41271, 56365, 21714 ],\n            //\n            [ 1338, 9366, 8894, 14925, 32441, 11747, 6203, 43473, 7374, 29766, 22314, 61756, 33742, 31382, 16863, 29993 ]\n        ],\n        [\n            [ 11112, 23370, 51157, 37201, 57629, 19242, 18372, 48369, 45946, 51403, 31926, 37036, 64773, 63987, 14930, 27409 ],\n            [ 49450, 62247, 17241, 37013, 38597, 62841, 38388, 10597, 39942, 1361, 55832, 11960, 32377, 22889, 369, 39659 ],\n            //\n            [ 16300, 19258, 50153, 37387, 62746, 26256, 26326, 28857, 58231, 58289, 34904, 21952, 50906, 59079, 25510, 26315 ]\n        ],\n        [\n            [ 6116, 48403, 48379, 60626, 45893, 12565, 45033, 33922, 10301, 64710, 62737, 46401, 54155, 30226, 59218, 48154 ],\n            [ 13902, 1809, 5538, 20768, 10948, 25283, 24203, 42623, 63759, 34117, 4460, 46982, 58750, 63959, 37315, 1308 ],\n            //\n            [ 8580, 48846, 45158, 11079, 38433, 11260, 60501, 27105, 5712, 1194, 15647, 34914, 34108, 64978, 5176, 3498 ]\n        ],\n        [\n            [ 55018, 10718, 58, 697, 52057, 50214, 39354, 38833, 36399, 37376, 20262, 60242, 6983, 35721, 49188, 32019 ],\n            [ 8386, 32859, 32934, 38176, 59843, 36511, 40583, 40478, 51066, 30156, 42348, 37361, 43034, 11265, 30379, 55721 ],\n            //\n            [ 36772, 27382, 56296, 39731, 14492, 6461, 5927, 56892, 444, 13947, 48468, 13731, 26038, 37755, 62787, 26993 ]\n        ],\n        [\n            [ 51678, 12721, 5648, 13738, 27156, 46548, 33332, 53873, 23882, 8090, 9811, 58684, 36238, 32563, 43519, 6101 ],\n            [ 44918, 42230, 54628, 57360, 44317, 17647, 55997, 44163, 43130, 7408, 63751, 17347, 16236, 54199, 8839, 62210 ],\n            //\n            [ 7036, 46730, 65276, 64045, 47944, 50833, 52026, 26155, 21244, 44819, 47818, 34757, 27224, 63025, 3282, 12537 ]\n        ],\n        [\n            [ 19338, 14567, 55996, 45250, 57733, 65098, 17453, 52100, 27424, 48941, 39953, 48855, 16083, 48991, 48232, 1960 ],\n            [ 35054, 8744, 30826, 10666, 51203, 38260, 15875, 48604, 4871, 41640, 11552, 6323, 17008, 31485, 55236, 62025 ],\n            //\n            [ 23792, 37497, 2596, 49614, 48440, 45494, 51938, 11073, 51932, 18607, 55430, 39617, 29420, 5531, 11331, 39792 ]\n        ],\n        [\n            [ 65282, 11058, 37724, 12884, 22504, 6740, 13195, 25952, 26579, 49572, 50214, 13476, 39711, 43431, 55796, 23375 ],\n            [ 36166, 13232, 9812, 26715, 48095, 60613, 63938, 23100, 49463, 10126, 43591, 23113, 64504, 1128, 53539, 16619 ],\n            //\n            [ 14348, 21170, 29488, 49471, 3877, 967, 61979, 17214, 45646, 3836, 26838, 44986, 30187, 12903, 6055, 48933 ]\n        ],\n        [\n            [ 42322, 33809, 26506, 40605, 17617, 31336, 57652, 41887, 52564, 51719, 8057, 12116, 28691, 61006, 64162, 56807 ],\n            [ 60470, 63572, 58574, 57221, 28662, 36893, 48136, 49384, 11666, 27459, 43410, 43918, 11786, 7708, 9060, 11423 ],\n            //\n            [ 19086, 35389, 11287, 38707, 3413, 19045, 18212, 47017, 35947, 7162, 31858, 60560, 2180, 27492, 49457, 40501 ]\n        ],\n        [\n            [ 20244, 29392, 4529, 10004, 37909, 33096, 29822, 13016, 53717, 10257, 25440, 12854, 46391, 7187, 14240, 62691 ],\n            [ 9694, 4430, 26518, 7398, 45762, 57939, 34266, 45806, 22943, 47859, 64189, 28367, 56057, 45988, 36610, 34916 ],\n            //\n            [ 4540, 46259, 11399, 17877, 52698, 40707, 28491, 63784, 35142, 7036, 10421, 45115, 31510, 34381, 27199, 53255 ]\n        ],\n        [\n            [ 37940, 25842, 18260, 1847, 35392, 47648, 21834, 16343, 47687, 8997, 45076, 59436, 43093, 61350, 48465, 27247 ],\n            [ 54878, 30230, 1714, 31210, 50421, 21187, 24958, 57809, 28845, 7544, 4374, 31992, 64555, 40789, 63570, 38645 ],\n            //\n            [ 14786, 49352, 29224, 33626, 37739, 40310, 49011, 59304, 47468, 26283, 31186, 60773, 2882, 42697, 65070, 25918 ]\n        ],\n        [\n            [ 38452, 63130, 57541, 788, 3620, 44364, 39582, 9072, 45718, 12017, 50077, 39730, 42324, 56947, 45448, 9278 ],\n            [ 58102, 8012, 45659, 33455, 53157, 4225, 61188, 41691, 9420, 32434, 31243, 491, 21208, 20980, 10633, 14201 ],\n            //\n            [ 16280, 30555, 2206, 9953, 20655, 58819, 45285, 42692, 30757, 15343, 28862, 43812, 4174, 52634, 64115, 18424 ]\n        ],\n        [\n            [ 46554, 35994, 56730, 62503, 18303, 21209, 52647, 42341, 8753, 42733, 23395, 19072, 19885, 49133, 18926, 34483 ],\n            [ 25848, 24715, 59792, 17630, 47479, 13831, 49714, 62800, 57189, 19528, 43575, 43880, 8090, 65342, 37513, 1952 ],\n            //\n            [ 54982, 35440, 25892, 51635, 13371, 24036, 57195, 53756, 23671, 22909, 7812, 20524, 38678, 59173, 15865, 474 ]\n        ],\n        [\n            [ 20330, 6556, 19136, 60465, 43769, 45803, 39958, 26275, 53599, 60884, 37560, 43804, 60122, 22489, 19679, 51242 ],\n            [ 45112, 28238, 15121, 48465, 64874, 9700, 24485, 16145, 37528, 5201, 24518, 2876, 63400, 33218, 56899, 62353 ],\n            //\n            [ 30088, 57684, 26038, 63893, 60294, 944, 27501, 58790, 6562, 24172, 52717, 8699, 5806, 56991, 47735, 25567 ]\n        ],\n        [\n            [ 36668, 13215, 7978, 13123, 26767, 8191, 29501, 49003, 52328, 4989, 9324, 52299, 9293, 65037, 34526, 15277 ],\n            [ 20838, 385, 29660, 57427, 39790, 26858, 23615, 33812, 36179, 49227, 40863, 11145, 47756, 64134, 52722, 44515 ],\n            //\n            [ 22944, 16863, 44006, 29328, 55673, 2778, 5886, 56245, 5816, 14114, 31557, 64378, 12712, 41617, 30133, 58142 ]\n        ],\n        [\n            [ 48724, 52085, 45061, 46932, 9959, 19078, 6652, 10191, 54342, 38434, 4442, 54760, 60699, 50545, 51293, 17839 ],\n            [ 31552, 22391, 40521, 14720, 60963, 2945, 53026, 31451, 5167, 22456, 41359, 7737, 64631, 42507, 35519, 27660 ],\n            //\n            [ 14974, 9004, 10480, 60856, 58736, 30600, 24702, 2720, 5285, 62485, 2926, 2184, 6, 58638, 63484, 41871 ]\n        ],\n        [\n            [ 14948, 55508, 53031, 41448, 40306, 56778, 38413, 31194, 22253, 5442, 51040, 27420, 12326, 27382, 26517, 35571 ],\n            [ 2226, 11172, 48431, 33073, 42538, 58550, 37120, 15834, 45234, 52886, 53898, 28813, 54195, 308, 36240, 41232 ],\n            //\n            [ 51100, 50693, 37074, 52161, 28484, 15107, 58321, 43995, 59098, 56450, 24060, 358, 48086, 36221, 2491, 53089 ]\n        ],\n        [\n            [ 3360, 47847, 1871, 36319, 32234, 50592, 45526, 58800, 6999, 62811, 4933, 25620, 60250, 64604, 340, 43894 ],\n            [ 3074, 44994, 13974, 19198, 21730, 27168, 45803, 25247, 52951, 16290, 4384, 14132, 17120, 28653, 6905, 32200 ],\n            //\n            [ 8928, 62459, 3155, 8582, 53424, 9131, 51878, 41831, 44874, 35436, 62818, 57601, 2598, 35202, 10063, 2560 ]\n        ],\n        [\n            [ 56152, 40027, 37574, 9148, 50607, 30136, 17144, 55034, 33974, 25492, 37784, 30792, 52536, 6331, 49972, 59355 ],\n            [ 62358, 2362, 45142, 31855, 7761, 14619, 59976, 3273, 41509, 51834, 37607, 23036, 41776, 34185, 28639, 14403 ],\n            //\n            [ 18774, 61857, 32625, 55759, 49722, 65321, 53000, 33525, 15885, 26225, 4940, 2088, 33136, 10872, 22439, 7397 ]\n        ],\n        [\n            [ 33894, 6468, 59837, 50260, 28352, 43050, 39848, 54595, 8817, 56415, 64001, 46047, 18360, 2635, 17573, 43498 ],\n            [ 36850, 44880, 24419, 40605, 40417, 38712, 27679, 12460, 45638, 6506, 19409, 48091, 55948, 43822, 23240, 60535 ],\n            //\n            [ 21286, 55271, 10598, 47429, 51819, 24081, 31384, 21020, 22882, 26024, 51725, 61723, 64481, 25107, 60435, 27348 ]\n        ],\n        [\n            [ 48664, 41391, 12141, 45323, 58255, 14560, 3021, 6977, 5450, 62215, 56431, 59832, 45790, 16547, 42497, 40517 ],\n            [ 2678, 36314, 1836, 35135, 1149, 17325, 28240, 18386, 35531, 34278, 9242, 54003, 64864, 29663, 3492, 3699 ],\n            //\n            [ 21608, 48801, 21799, 37295, 31049, 27595, 32709, 36791, 48525, 51854, 54427, 14375, 34701, 16139, 36699, 41451 ]\n        ],\n        [\n            [ 37706, 48841, 37034, 39885, 29691, 45182, 39012, 17495, 16706, 44977, 49642, 8899, 24831, 52038, 33121, 57712 ],\n            [ 33274, 65209, 52513, 62916, 3224, 29262, 34798, 63561, 38305, 36831, 48429, 1569, 5500, 4840, 37741, 47318 ],\n            //\n            [ 27198, 57302, 64144, 21248, 39232, 38897, 61301, 14999, 20291, 16997, 29401, 16604, 51070, 45633, 14879, 31845 ]\n        ],\n        [\n            [ 63358, 55633, 32239, 322, 59667, 32696, 18854, 25623, 32801, 11395, 19555, 2400, 37209, 30610, 20793, 51444 ],\n            [ 54624, 33570, 12040, 39423, 26942, 34925, 59354, 21083, 12582, 58666, 56969, 36968, 8886, 48474, 34259, 12627 ],\n            //\n            [ 50610, 23377, 46002, 45722, 61363, 54639, 49578, 38129, 43365, 2758, 46434, 51884, 63386, 16361, 45206, 36703 ]\n        ],\n        [\n            [ 52952, 63964, 19260, 7586, 12076, 48694, 64634, 48333, 63964, 48432, 1535, 58567, 6030, 63586, 41037, 31062 ],\n            [ 59266, 47862, 33875, 41738, 65332, 41788, 41322, 59959, 46813, 45973, 6520, 7798, 12117, 11895, 49535, 24298 ],\n            //\n            [ 13670, 57005, 23463, 52101, 51122, 24426, 65048, 49130, 15192, 6153, 15855, 18180, 20213, 59743, 39905, 43124 ]\n        ],\n        [\n            [ 3240, 27324, 38820, 37655, 28461, 29406, 7184, 11272, 32783, 26674, 54311, 56747, 22725, 4961, 4461, 52510 ],\n            [ 47386, 4297, 7931, 62542, 19332, 24202, 19323, 17384, 36748, 46336, 4948, 23749, 13750, 40270, 23524, 27969 ],\n            //\n            [ 60766, 22146, 18651, 25970, 18432, 58333, 49166, 33259, 30853, 29742, 61173, 65513, 43202, 65407, 38777, 64151 ]\n        ],\n        [\n            [ 32002, 18450, 5250, 52546, 54322, 49483, 24946, 35882, 58092, 9464, 37957, 48867, 26589, 30632, 44634, 52059 ],\n            [ 30648, 8346, 47326, 55587, 4000, 31628, 52133, 46766, 17132, 3687, 42072, 39029, 28961, 45956, 30432, 62356 ],\n            //\n            [ 25592, 22764, 57418, 64115, 57372, 50231, 10660, 4345, 37165, 8649, 24416, 63357, 23437, 45998, 35162, 3648 ]\n        ],\n        [\n            [ 64716, 10345, 16163, 63579, 9275, 62263, 54557, 27426, 39120, 27816, 65487, 57606, 57107, 49593, 43276, 46015 ],\n            [ 33222, 45786, 33359, 17309, 2433, 54001, 61185, 62636, 32045, 2305, 65521, 40869, 51941, 25383, 8411, 54193 ],\n            //\n            [ 23704, 10713, 21952, 44689, 60872, 6883, 57605, 46522, 16908, 31639, 62094, 5522, 35452, 64966, 58979, 50906 ]\n        ],\n        [\n            [ 61382, 49337, 8747, 7688, 28785, 13747, 31388, 37377, 39492, 45302, 38232, 39873, 60674, 31789, 10548, 17481 ],\n            [ 25138, 11805, 11007, 8476, 9636, 3451, 5516, 64569, 31887, 32165, 9502, 17827, 43990, 52157, 24261, 63352 ],\n            //\n            [ 59542, 33412, 26891, 22100, 57927, 41475, 54989, 55445, 2717, 11448, 60081, 26052, 32237, 44031, 25297, 63137 ]\n        ],\n        [\n            [ 54224, 60738, 29, 5436, 39980, 33143, 29650, 1745, 50389, 38015, 37563, 11309, 17739, 59723, 35114, 11115 ],\n            [ 3282, 50568, 19784, 3562, 51530, 27218, 31073, 30441, 34291, 23634, 11291, 55009, 4036, 3608, 63054, 32540 ],\n            //\n            [ 65112, 5983, 53165, 64610, 8941, 5483, 29881, 58770, 60629, 61476, 13225, 47820, 57753, 6974, 2335, 1767 ]\n        ],\n        [\n            [ 1204, 16942, 8139, 4395, 31569, 44040, 16042, 21150, 46944, 25026, 35927, 54660, 42520, 64537, 30135, 7057 ],\n            [ 26856, 17610, 14536, 52280, 2643, 13618, 21196, 3787, 50679, 60647, 34109, 22732, 6114, 65351, 42399, 5936 ],\n            //\n            [ 28692, 63072, 43105, 436, 63169, 31168, 60093, 26778, 24359, 28546, 44078, 53368, 65350, 60020, 10326, 51680 ]\n        ],\n        [\n            [ 61044, 22182, 49822, 22170, 16932, 19845, 12696, 24606, 34637, 1157, 18094, 63762, 32654, 32740, 7414, 33079 ],\n            [ 19552, 50614, 59844, 34156, 19016, 44122, 8153, 63555, 23394, 39150, 13098, 31118, 25038, 13574, 55256, 61898 ],\n            //\n            [ 34888, 23844, 35470, 2014, 45005, 7905, 17593, 12508, 59903, 38372, 22942, 62417, 55118, 3776, 46838, 12951 ]\n        ],\n        [\n            [ 54130, 42670, 36810, 52429, 36472, 19737, 53927, 59687, 15524, 23318, 32900, 53497, 27340, 51742, 26398, 25533 ],\n            [ 28264, 53802, 18567, 41471, 59850, 34069, 56284, 14636, 37138, 8361, 20394, 62505, 31253, 62930, 52274, 33888 ],\n            //\n            [ 52154, 54765, 51328, 49933, 35173, 51811, 11511, 28949, 45771, 59512, 41715, 46316, 21947, 51282, 20476, 24062 ]\n        ],\n        [\n            [ 4306, 15175, 37114, 12540, 60085, 22127, 64399, 42766, 51259, 65458, 31234, 37939, 10899, 57347, 14998, 36716 ],\n            [ 25434, 57703, 18331, 40824, 31032, 38828, 7526, 20830, 9454, 59458, 19288, 906, 34421, 34359, 38882, 15694 ],\n            //\n            [ 65336, 57818, 58501, 17540, 12289, 15674, 23977, 7612, 9043, 48455, 8397, 8551, 20614, 29505, 60337, 10418 ]\n        ],\n        [\n            [ 46144, 59051, 40877, 26950, 45898, 43662, 40170, 8330, 23830, 5004, 63165, 50461, 48420, 10896, 50972, 15123 ],\n            [ 56404, 3350, 48664, 25653, 21089, 32770, 1455, 42743, 54082, 11919, 9849, 48040, 6066, 45640, 2682, 5257 ],\n            //\n            [ 8330, 25319, 47733, 30996, 62008, 51272, 12389, 52742, 635, 55566, 255, 48756, 11742, 974, 55487, 20772 ]\n        ],\n        [\n            [ 43040, 58248, 49297, 47982, 10122, 20866, 45699, 43304, 60291, 43430, 5965, 8793, 84, 17744, 18635, 6219 ],\n            [ 31776, 9959, 19898, 65074, 62547, 33786, 42467, 26233, 61299, 9088, 49768, 56672, 13225, 988, 57466, 48864 ],\n            //\n            [ 7284, 34299, 20029, 47592, 26261, 32359, 11840, 1669, 1638, 38011, 29830, 6166, 23935, 53690, 15488, 49615 ]\n        ],\n        [\n            [ 23604, 64275, 58304, 11128, 22612, 39714, 33142, 37759, 9628, 53820, 38633, 9761, 62728, 38381, 44561, 23044 ],\n            [ 59558, 4805, 8087, 65155, 37950, 54425, 63789, 22866, 33372, 61606, 32373, 60648, 44236, 8472, 26377, 59238 ],\n            //\n            [ 30366, 24751, 11576, 25332, 8443, 49509, 15752, 35277, 37483, 6762, 12026, 3449, 63652, 51572, 16695, 48241 ]\n        ],\n        [\n            [ 43070, 49720, 22103, 39490, 58033, 17912, 4522, 24392, 50199, 10068, 24028, 56746, 48193, 33247, 21433, 21230 ],\n            [ 61872, 28071, 24499, 28562, 37324, 38328, 57093, 25660, 14679, 20833, 36013, 31544, 57032, 13312, 41406, 65200 ],\n            //\n            [ 54692, 1424, 55112, 5304, 44054, 5507, 40414, 60078, 51020, 4530, 47327, 12694, 65155, 3430, 25132, 36935 ]\n        ],\n        [\n            [ 9234, 35357, 8295, 17134, 14571, 3053, 52619, 40262, 27486, 9246, 4765, 6661, 1484, 37454, 57656, 53279 ],\n            [ 61006, 37148, 4582, 36541, 6741, 29976, 44902, 31565, 44559, 34157, 33482, 8536, 6300, 60896, 8940, 12160 ],\n            //\n            [ 45296, 45741, 57017, 37992, 41, 37183, 13501, 17116, 11173, 44734, 39701, 58936, 22471, 8722, 18494, 62379 ]\n        ],\n        [\n            [ 15208, 14602, 27165, 22293, 61692, 21603, 14811, 59611, 25692, 41215, 20233, 46907, 24626, 38041, 38141, 11650 ],\n            [ 63012, 17498, 22001, 56108, 31978, 31876, 44033, 64995, 10185, 23233, 57017, 23119, 56720, 26566, 28586, 14986 ],\n            //\n            [ 46630, 54323, 41337, 17501, 65278, 9883, 37192, 6664, 13626, 27590, 62696, 42080, 50517, 27715, 59703, 29765 ]\n        ],\n        [\n            [ 55818, 25060, 20483, 35753, 6248, 45807, 33820, 41531, 38212, 1187, 54843, 153, 30383, 26434, 32002, 54917 ],\n            [ 29390, 10510, 45700, 53885, 48709, 1623, 32749, 60879, 61389, 54809, 5564, 25721, 6354, 8419, 14951, 2900 ],\n            //\n            [ 30896, 45036, 64583, 32428, 8385, 515, 47508, 2774, 59581, 22688, 54444, 11672, 45375, 41817, 50352, 42846 ]\n        ],\n        [\n            [ 64850, 50436, 39419, 59623, 36091, 17121, 61187, 55709, 19870, 33015, 11983, 39884, 51525, 31355, 14268, 21160 ],\n            [ 4502, 35393, 37191, 46846, 31450, 25428, 5329, 1333, 35974, 13993, 62015, 21637, 37454, 34264, 17921, 20694 ],\n            //\n            [ 45074, 19149, 1975, 36257, 18211, 54749, 37040, 20764, 39997, 64140, 44923, 14918, 65348, 30321, 26055, 32025 ]\n        ],\n        [\n            [ 52544, 34547, 58944, 16953, 54933, 17867, 8218, 17864, 12875, 1129, 44977, 17952, 27591, 23331, 61033, 48944 ],\n            [ 33648, 49223, 21979, 43016, 6267, 62829, 23044, 3104, 35914, 44640, 4014, 21860, 11861, 7637, 12627, 16706 ],\n            //\n            [ 1404, 29585, 25697, 999, 42103, 25249, 24322, 12485, 24028, 10037, 18644, 2955, 11854, 59281, 28815, 59555 ]\n        ],\n        [\n            [ 59108, 12397, 12413, 49717, 34680, 64761, 23147, 47043, 55397, 50990, 3237, 56518, 43538, 20438, 14533, 3772 ],\n            [ 15586, 34422, 62008, 11387, 30742, 62861, 5540, 56282, 34086, 22176, 7645, 46051, 16637, 62191, 41433, 1203 ],\n            //\n            [ 58680, 29215, 49150, 59554, 27182, 50440, 14525, 65475, 18311, 35050, 59870, 63956, 60478, 28576, 10885, 60138 ]\n        ],\n        [\n            [ 18888, 58894, 4184, 21114, 46554, 14205, 15978, 30881, 51150, 9244, 56099, 64381, 36236, 12508, 26983, 47989 ],\n            [ 60054, 5741, 24598, 24820, 6535, 35908, 35658, 64318, 22, 21504, 40614, 61343, 55759, 19666, 12660, 46288 ],\n            //\n            [ 6024, 18264, 17957, 47561, 46519, 39154, 38827, 14955, 54218, 48150, 18820, 9991, 17906, 64313, 15379, 36484 ]\n        ],\n        [\n            [ 60324, 41988, 36748, 10097, 34197, 21853, 45387, 9766, 44744, 32106, 8610, 52938, 43832, 53263, 11221, 107 ],\n            [ 26578, 61708, 39482, 2538, 61241, 12497, 13244, 45498, 50538, 2087, 21631, 15744, 63147, 31253, 16578, 62067 ],\n            //\n            [ 49602, 47022, 48223, 61728, 48653, 41706, 19854, 38939, 14616, 23549, 9684, 19194, 35120, 1415, 34185, 21353 ]\n        ],\n        [\n            [ 11224, 5723, 8426, 54257, 36712, 23470, 43472, 6426, 13992, 11259, 34903, 36989, 42709, 56563, 35128, 8014 ],\n            [ 6604, 39898, 17211, 8520, 9006, 15693, 63662, 64652, 42717, 14196, 51813, 6894, 36377, 25759, 3183, 23179 ],\n            //\n            [ 42580, 11948, 57697, 44644, 25765, 10896, 39454, 43907, 58868, 15942, 36386, 50172, 39449, 34494, 55884, 52924 ]\n        ],\n        [\n            [ 47378, 61634, 47218, 5653, 36300, 28476, 60709, 18164, 3118, 3936, 34018, 21812, 22921, 6964, 36341, 35070 ],\n            [ 44024, 48275, 47684, 29979, 18763, 53359, 11860, 47715, 60085, 13037, 51476, 55444, 52933, 4340, 57448, 10040 ],\n            //\n            [ 60722, 14122, 45629, 48429, 3460, 44603, 36370, 8476, 58777, 23247, 13767, 48099, 55965, 51750, 599, 59337 ]\n        ],\n        [\n            [ 7284, 39700, 25812, 29025, 46682, 13089, 63311, 47758, 18597, 51098, 39674, 46320, 44386, 24306, 972, 6692 ],\n            [ 30434, 58621, 47535, 22787, 25550, 15314, 52511, 3105, 17581, 38821, 32940, 529, 3227, 35813, 64461, 63353 ],\n            //\n            [ 8690, 31559, 3605, 50420, 25984, 39031, 26853, 59341, 51295, 11004, 46319, 30252, 38322, 54987, 25282, 36859 ]\n        ],\n        [\n            [ 3556, 48628, 12782, 60688, 4811, 44422, 12244, 14224, 49970, 29451, 38892, 42117, 7169, 13686, 30206, 29149 ],\n            [ 41982, 40840, 21310, 15209, 57371, 47863, 44443, 33102, 46431, 44636, 26558, 14214, 36404, 12807, 19013, 47463 ],\n            //\n            [ 828, 25223, 20227, 42054, 47620, 53747, 25821, 21684, 26353, 17834, 6623, 10809, 10508, 29028, 1113, 54455 ]\n        ],\n        [\n            [ 28816, 8280, 7683, 45671, 39880, 50520, 60337, 18989, 33502, 62092, 5330, 28856, 20065, 54899, 27403, 12301 ],\n            [ 64622, 23637, 42943, 48580, 61666, 36683, 32233, 64153, 43987, 51132, 11139, 32516, 6412, 835, 1853, 49354 ],\n            //\n            [ 10742, 62122, 23572, 50596, 45800, 41495, 59725, 21836, 570, 25176, 49615, 52631, 41487, 48606, 43459, 6597 ]\n        ],\n        [\n            [ 51430, 36030, 33046, 38457, 6134, 51288, 22576, 49915, 17667, 21202, 57462, 9834, 23592, 22920, 23146, 49748 ],\n            [ 46324, 11310, 5479, 64411, 27011, 3870, 55002, 45353, 57440, 47794, 41577, 48542, 57533, 48412, 1741, 61540 ],\n            //\n            [ 49210, 54761, 63356, 39886, 38407, 48990, 64599, 35275, 9571, 50943, 1984, 47049, 54182, 24040, 21306, 2605 ]\n        ],\n        [\n            [ 14850, 16752, 4580, 9047, 59052, 21756, 52606, 8919, 30411, 8351, 41166, 30323, 15185, 63652, 25315, 27666 ],\n            [ 108, 9884, 28429, 32584, 314, 50669, 45206, 20255, 680, 10082, 20618, 39565, 21131, 7695, 16847, 39224 ],\n            //\n            [ 6390, 39868, 10653, 64313, 9109, 45390, 23352, 51722, 8153, 52427, 42832, 51525, 32930, 63607, 422, 59252 ]\n        ],\n        [\n            [ 27874, 12244, 26895, 34575, 24895, 7781, 13365, 47749, 12290, 9644, 57917, 61794, 59852, 49691, 27375, 55106 ],\n            [ 7988, 44078, 51153, 20996, 26162, 13234, 8563, 21556, 29175, 1773, 65456, 22950, 35439, 64334, 45058, 27461 ],\n            //\n            [ 9112, 8122, 40047, 64254, 57636, 40591, 20798, 59382, 5743, 17158, 41079, 4310, 5765, 26581, 26331, 5587 ]\n        ],\n        [\n            [ 18658, 779, 8901, 32893, 21256, 13054, 41393, 29834, 48495, 34111, 53236, 24821, 16815, 15998, 41798, 41050 ],\n            [ 13738, 17543, 26211, 63639, 21870, 1036, 13630, 48976, 27027, 35794, 21765, 48793, 21474, 60513, 2280, 12811 ],\n            //\n            [ 17820, 4075, 22309, 57384, 44423, 46058, 24195, 39865, 18722, 18118, 863, 21363, 39512, 63733, 52918, 41773 ]\n        ],\n        [\n            [ 59940, 26110, 9531, 57832, 50626, 41986, 39102, 11018, 49505, 58011, 37589, 40678, 8061, 17354, 35720, 55596 ],\n            [ 46560, 7424, 28458, 31151, 12166, 23206, 53651, 44798, 60986, 31963, 48737, 380, 65273, 56402, 21208, 17059 ],\n            //\n            [ 51972, 42886, 54625, 52885, 33910, 48973, 38764, 34854, 15333, 54142, 6118, 2308, 10177, 55277, 30898, 39102 ]\n        ],\n        [\n            [ 44834, 14099, 14269, 44145, 17924, 44131, 30628, 9709, 57400, 43029, 100, 52749, 337, 48297, 783, 1052 ],\n            [ 63862, 1920, 16335, 59827, 17895, 15684, 31786, 58601, 23574, 25950, 50972, 50813, 64378, 60995, 30245, 62022 ],\n            //\n            [ 11502, 18700, 40469, 37396, 61592, 57845, 22955, 13816, 13604, 48608, 2071, 43311, 32953, 40098, 7048, 3110 ]\n        ],\n        [\n            [ 41474, 62701, 27535, 15883, 13803, 54554, 56190, 120, 35478, 46240, 24783, 54347, 63957, 48941, 48520, 25122 ],\n            [ 21248, 33508, 64087, 36638, 11014, 47760, 46600, 21520, 31823, 9755, 56045, 56683, 53285, 59982, 47938, 33573 ],\n            //\n            [ 2118, 46708, 37609, 11773, 49030, 40132, 48654, 15114, 17760, 16393, 32998, 51097, 44554, 51155, 2530, 57995 ]\n        ],\n        [\n            [ 42372, 35803, 43565, 4418, 61961, 48019, 1753, 20100, 43025, 9632, 42539, 44639, 46276, 51276, 51115, 33339 ],\n            [ 51694, 3881, 4575, 60805, 3534, 11362, 19343, 1273, 1769, 7538, 8247, 51536, 60180, 14828, 38823, 19755 ],\n            //\n            [ 21402, 11284, 8363, 12539, 30731, 48512, 46217, 52578, 47987, 36205, 6664, 31077, 26696, 55204, 19901, 11234 ]\n        ],\n        [\n            [ 53590, 48441, 13307, 50366, 23792, 61679, 26710, 38908, 51271, 46706, 42067, 38922, 46245, 28983, 26319, 60752 ],\n            [ 41988, 21017, 18193, 23731, 43355, 8750, 180, 63826, 6231, 48824, 58202, 33707, 34760, 10762, 36056, 54459 ],\n            //\n            [ 31856, 26795, 60120, 14536, 38050, 43215, 731, 2709, 28447, 10894, 16510, 7326, 65126, 12519, 17121, 24721 ]\n        ],\n        [\n            [ 25238, 34195, 59582, 19059, 45070, 11701, 20628, 54186, 60082, 25245, 15222, 13319, 11598, 51312, 5530, 60262 ],\n            [ 38578, 51402, 6690, 24558, 12775, 8800, 2179, 52835, 12985, 22596, 14941, 58523, 54532, 14575, 19439, 39389 ],\n            //\n            [ 64944, 59332, 854, 41808, 64691, 26446, 39926, 48956, 18586, 4236, 19104, 19987, 12749, 57564, 47820, 59007 ]\n        ],\n        [\n            [ 41510, 592, 29220, 61681, 11598, 54675, 59144, 14510, 6391, 12965, 49716, 42736, 47596, 31585, 39268, 29100 ],\n            [ 53010, 21876, 43547, 14505, 16449, 38357, 43925, 24092, 16828, 5246, 48688, 35091, 58868, 10475, 49856, 47766 ],\n            //\n            [ 42098, 27556, 695, 52167, 39518, 10369, 22897, 49185, 4104, 30434, 60057, 60172, 11063, 1957, 49769, 49979 ]\n        ],\n        [\n            [ 30488, 60485, 30311, 19506, 57273, 12837, 52075, 5351, 17249, 47854, 29083, 53999, 25928, 7099, 5002, 41499 ],\n            [ 44420, 6156, 23096, 53434, 22936, 14271, 20400, 24727, 45856, 38811, 2294, 42092, 64511, 64183, 45717, 31057 ],\n            //\n            [ 48368, 64145, 14396, 58377, 1956, 45060, 33844, 23810, 15649, 53391, 61218, 39526, 55066, 38680, 46148, 42337 ]\n        ],\n        [\n            [ 23592, 56127, 6251, 23611, 1233, 56872, 21125, 46385, 63163, 60841, 10430, 45903, 1406, 56170, 3477, 7195 ],\n            [ 50626, 39619, 53258, 15921, 13831, 49294, 25226, 51889, 3798, 40222, 44015, 19864, 27835, 57349, 24036, 55229 ],\n            //\n            [ 4122, 39269, 35840, 32233, 37298, 35543, 40214, 16841, 41624, 4570, 54921, 710, 40306, 60038, 49613, 54613 ]\n        ],\n        [\n            [ 40756, 22140, 17276, 7313, 20155, 15986, 43876, 41120, 46303, 34776, 48442, 18600, 47305, 12015, 28589, 53124 ],\n            [ 11546, 7152, 10878, 63596, 27305, 61665, 41369, 39527, 5076, 51914, 10170, 43666, 23969, 56912, 16588, 35366 ],\n            //\n            [ 23760, 27347, 49605, 20786, 6053, 9277, 23751, 33308, 25273, 45543, 10432, 57948, 33300, 23630, 64153, 47952 ]\n        ],\n        [\n            [ 16012, 45810, 52880, 25819, 830, 14301, 21558, 30320, 46372, 873, 41212, 29739, 1458, 52238, 8152, 40810 ],\n            [ 24070, 26976, 34392, 12704, 12989, 11497, 53852, 47749, 25664, 29864, 3832, 45852, 27049, 7912, 25664, 63385 ],\n            //\n            [ 818, 56088, 14957, 27462, 32861, 15469, 59307, 11519, 11089, 15675, 43182, 10310, 59323, 21454, 2526, 35584 ]\n        ],\n        [\n            [ 12908, 64847, 23739, 36283, 26212, 29002, 31007, 44451, 63885, 60628, 26575, 64112, 18949, 28175, 34735, 28426 ],\n            [ 14022, 27758, 9356, 24585, 9918, 19666, 5982, 24522, 52253, 59527, 27202, 52171, 37501, 13573, 4993, 27488 ],\n            //\n            [ 41160, 6384, 52136, 50463, 40878, 53034, 9544, 17525, 26338, 11197, 31303, 36652, 63005, 19031, 30144, 10110 ]\n        ],\n        [\n            [ 1380, 33914, 4938, 63171, 28336, 27546, 27475, 55858, 29913, 50293, 25786, 15165, 56584, 17936, 51183, 8080 ],\n            [ 12136, 52794, 41416, 15481, 4656, 10308, 48374, 65023, 49396, 45207, 50124, 31251, 39609, 58390, 19659, 58164 ],\n            //\n            [ 8068, 43361, 49485, 53687, 49576, 44346, 58345, 31847, 7642, 48040, 3493, 12637, 50994, 14908, 59809, 23384 ]\n        ],\n        [\n            [ 19956, 11731, 13065, 53774, 48653, 59198, 43748, 183, 59531, 43693, 36218, 10292, 33193, 50580, 17127, 51116 ],\n            [ 35108, 36730, 39861, 49904, 25603, 7888, 42229, 62386, 59764, 5658, 52221, 59925, 4331, 13676, 49617, 10406 ],\n            //\n            [ 46100, 3213, 25469, 17876, 31068, 34913, 5699, 25770, 31470, 716, 3005, 20793, 45235, 62845, 18983, 62817 ]\n        ],\n        [\n            [ 54732, 64569, 42149, 12973, 52757, 59417, 11060, 24604, 64657, 43269, 56499, 10624, 8388, 1657, 49209, 8930 ],\n            [ 43176, 35297, 22384, 21528, 63036, 33293, 1298, 38535, 14598, 63715, 38323, 55269, 48934, 23049, 63892, 58140 ],\n            //\n            [ 7610, 3122, 27127, 39149, 32246, 53656, 15271, 15223, 8505, 55709, 38732, 49338, 564, 15631, 14496, 44210 ]\n        ],\n        [\n            [ 54570, 25754, 13939, 54961, 39046, 16194, 61834, 62919, 43074, 21148, 56488, 9465, 19007, 42145, 59483, 39522 ],\n            [ 48562, 5320, 3541, 57835, 59045, 4483, 9, 21789, 20867, 30078, 33024, 52153, 50648, 41445, 6105, 40813 ],\n            //\n            [ 37162, 54553, 26415, 11392, 62156, 48013, 52981, 41989, 44786, 18094, 53579, 53097, 272, 52516, 51080, 26055 ]\n        ],\n        [\n            [ 63978, 59876, 21217, 20799, 3353, 55773, 37789, 34609, 2339, 33749, 37611, 30217, 58222, 49400, 26274, 14005 ],\n            [ 47930, 60729, 562, 17383, 14458, 33812, 17635, 24274, 56724, 35192, 19541, 40563, 58593, 17214, 19152, 7134 ],\n            //\n            [ 34288, 26936, 26924, 64203, 29687, 36186, 45278, 948, 6757, 6014, 396, 12010, 591, 52580, 10411, 6786 ]\n        ],\n        [\n            [ 59314, 58255, 50595, 29387, 31214, 63553, 61151, 50533, 30533, 15399, 22717, 30163, 1250, 47947, 62309, 4040 ],\n            [ 31524, 13459, 58037, 18548, 41165, 37387, 26263, 62521, 58032, 14685, 23402, 5957, 7800, 37339, 7297, 5881 ],\n            //\n            [ 63670, 584, 62782, 48075, 63819, 57151, 60388, 65067, 59350, 27594, 39744, 39672, 39352, 36806, 10761, 50335 ]\n        ],\n        [\n            [ 4340, 48710, 53943, 52945, 30302, 55202, 56323, 33252, 63066, 56892, 31406, 8605, 42292, 43510, 57971, 24717 ],\n            [ 17658, 63089, 55361, 22726, 14099, 34027, 38415, 56519, 43464, 33658, 12210, 45361, 55322, 16280, 53265, 15153 ],\n            //\n            [ 17576, 60955, 52972, 37572, 31281, 7613, 57259, 47926, 5101, 41656, 5242, 94, 15936, 13063, 29174, 16805 ]\n        ],\n        [\n            [ 54638, 5684, 41729, 60051, 37970, 37868, 33207, 11537, 63832, 2741, 20394, 12022, 13887, 13247, 59226, 35025 ],\n            [ 53018, 44610, 46540, 14711, 23492, 53339, 22822, 53287, 29013, 40210, 15752, 60060, 27201, 20720, 37779, 18397 ],\n            //\n            [ 46822, 20414, 13489, 20076, 39570, 56458, 6230, 64980, 11314, 23287, 26408, 32800, 23288, 11450, 21471, 45096 ]\n        ],\n        [\n            [ 51548, 27985, 43548, 42485, 16272, 57876, 36462, 64868, 57516, 8782, 49637, 10684, 27146, 41374, 52064, 35631 ],\n            [ 14812, 62258, 17569, 50665, 30915, 38395, 13383, 13365, 9704, 37854, 46278, 28022, 4998, 59846, 46440, 25345 ],\n            //\n            [ 38150, 43285, 30331, 2121, 54230, 61359, 24491, 28928, 11481, 22149, 56518, 47909, 16075, 49006, 15920, 11126 ]\n        ],\n        [\n            [ 44564, 3539, 36684, 59956, 15485, 35557, 23503, 55442, 5680, 41908, 65397, 10219, 23752, 49772, 27886, 35617 ],\n            [ 47792, 21266, 43562, 44407, 30745, 35413, 24622, 49799, 37230, 37176, 31295, 9413, 20879, 57029, 21424, 54832 ],\n            //\n            [ 12834, 65150, 47079, 21134, 22856, 19695, 36008, 37303, 63179, 25084, 7717, 63173, 51017, 46725, 23119, 26997 ]\n        ],\n        [\n            [ 65026, 4692, 51736, 42365, 17256, 28067, 10772, 42346, 12942, 25575, 58191, 17606, 43838, 51811, 34327, 16244 ],\n            [ 25630, 32193, 56402, 23059, 40097, 61006, 10393, 19643, 44270, 7081, 41609, 14648, 50299, 16911, 35302, 4077 ],\n            //\n            [ 56494, 13607, 11071, 64046, 56225, 9721, 39692, 64924, 58387, 48355, 25501, 11718, 706, 53409, 53273, 8958 ]\n        ],\n        [\n            [ 15584, 32908, 4227, 14218, 40016, 57268, 35903, 9207, 54791, 41215, 27778, 15221, 46564, 58555, 20710, 35056 ],\n            [ 61026, 18549, 13202, 62706, 5549, 41338, 17921, 12969, 34822, 14006, 13639, 46265, 34114, 61558, 72, 14480 ],\n            //\n            [ 23732, 22042, 58434, 61361, 43649, 43233, 41018, 63263, 41203, 15990, 62733, 54617, 52614, 54850, 33380, 12457 ]\n        ],\n        [\n            [ 170, 1209, 13693, 60412, 3024, 12805, 31314, 9353, 20597, 25569, 33282, 59278, 3205, 22258, 14148, 42371 ],\n            [ 41340, 52174, 55904, 530, 10526, 10809, 46851, 30699, 59968, 11209, 54572, 32381, 50988, 64858, 50431, 58065 ],\n            //\n            [ 33596, 14700, 14973, 62820, 9830, 44952, 2083, 11787, 42939, 41876, 63267, 19391, 31872, 27074, 1281, 39087 ]\n        ],\n        [\n            [ 34826, 23448, 64590, 9281, 58885, 11088, 38574, 55633, 29291, 13234, 38978, 47976, 23056, 35962, 1949, 34228 ],\n            [ 24860, 55199, 16296, 35971, 26896, 59024, 53967, 41827, 21732, 58750, 4969, 36892, 43607, 21481, 17186, 41769 ],\n            //\n            [ 30762, 48897, 11200, 38671, 24567, 11776, 4656, 44478, 12561, 12524, 21406, 9747, 4407, 61736, 54354, 28735 ]\n        ],\n        [\n            [ 7378, 2808, 11773, 62846, 28917, 16765, 4459, 48894, 53657, 10581, 48945, 38848, 54636, 52277, 35678, 59865 ],\n            [ 20110, 9631, 33272, 11604, 54542, 33108, 42651, 52882, 59723, 9359, 51771, 17632, 13995, 64510, 54407, 15910 ],\n            //\n            [ 64428, 28042, 7507, 57541, 22517, 31303, 14531, 13991, 39188, 56263, 46488, 8721, 43819, 32852, 51701, 55380 ]\n        ],\n        [\n            [ 46790, 40404, 27348, 28847, 11271, 40464, 4541, 58541, 13094, 37488, 7288, 40820, 24693, 62550, 43065, 58024 ],\n            [ 48936, 13653, 35681, 38724, 15080, 49493, 15304, 38397, 4393, 38496, 51998, 40209, 962, 7050, 54982, 48453 ],\n            //\n            [ 47624, 5221, 2227, 62264, 45831, 22453, 10817, 21518, 31746, 63461, 63786, 18926, 54698, 15856, 16802, 37978 ]\n        ],\n        [\n            [ 3710, 45648, 3532, 42603, 23409, 60738, 44989, 61612, 4860, 16290, 55886, 4584, 9203, 1249, 866, 19996 ],\n            [ 45512, 28443, 24947, 10045, 32013, 9594, 29535, 12046, 63123, 55332, 36943, 41644, 2658, 25072, 2265, 27225 ],\n            //\n            [ 37666, 46012, 34066, 46486, 55088, 15235, 11526, 41786, 31823, 24601, 61469, 7536, 59257, 46351, 44078, 17239 ]\n        ],\n        [\n            [ 11612, 63573, 36399, 6384, 59963, 9949, 53618, 65269, 47333, 54246, 18448, 18758, 40762, 17758, 36971, 65512 ],\n            [ 30400, 13161, 47483, 28736, 42734, 27433, 53469, 36189, 16065, 59978, 45367, 515, 13571, 10481, 65437, 37632 ],\n            //\n            [ 60638, 33261, 33349, 11385, 35478, 57407, 51459, 35502, 44933, 49497, 52254, 37256, 36788, 48465, 14604, 7568 ]\n        ],\n        [\n            [ 54818, 6069, 49028, 52242, 5155, 57162, 12564, 41404, 28332, 64171, 4439, 45907, 58919, 18425, 17459, 7732 ],\n            [ 64614, 46246, 13579, 51488, 8781, 50308, 8361, 35308, 47764, 22118, 47432, 32647, 7882, 60678, 21925, 43353 ],\n            //\n            [ 41428, 64340, 63562, 4099, 29648, 36666, 7318, 32314, 51028, 52454, 51563, 14873, 11836, 54590, 62875, 10547 ]\n        ],\n        [\n            [ 57686, 61941, 43989, 11176, 35246, 53235, 40790, 19442, 48177, 43288, 23302, 46270, 63585, 1714, 33180, 19627 ],\n            [ 26636, 374, 14358, 3883, 38775, 26514, 34382, 35690, 59621, 63244, 14646, 13237, 53222, 48478, 64280, 40720 ],\n            //\n            [ 40814, 63200, 13339, 36643, 2158, 20907, 7573, 45913, 55564, 14841, 58413, 45439, 29935, 44646, 60930, 356 ]\n        ],\n        [\n            [ 61552, 25357, 21487, 46443, 63851, 53123, 1246, 39714, 2604, 42464, 51160, 42396, 63139, 53103, 27536, 64616 ],\n            [ 5408, 32727, 54554, 22561, 6340, 61605, 29644, 64936, 6394, 977, 36241, 53842, 42147, 45523, 7658, 32783 ],\n            //\n            [ 11086, 40333, 2080, 62195, 19761, 22811, 50077, 60227, 43854, 51186, 3719, 59207, 50862, 60181, 41867, 14715 ]\n        ],\n        [\n            [ 14892, 44517, 56820, 63277, 17500, 23477, 41761, 24457, 17814, 19914, 8612, 28825, 50394, 41156, 62693, 2796 ],\n            [ 26612, 25889, 2281, 2976, 19050, 46522, 44928, 7120, 62917, 29515, 24656, 28973, 24937, 49166, 16416, 39216 ],\n            //\n            [ 24376, 47766, 29505, 34548, 28027, 27133, 19961, 39300, 64497, 14476, 18097, 24816, 7070, 40039, 44384, 13521 ]\n        ],\n        [\n            [ 30160, 15191, 23787, 22036, 51536, 47183, 7864, 62627, 62891, 8361, 37909, 55938, 7318, 22939, 65420, 20980 ],\n            [ 15022, 55174, 1712, 32644, 48411, 2004, 32888, 45358, 61108, 14418, 39662, 63225, 16883, 54382, 38280, 46508 ],\n            //\n            [ 51454, 2262, 29191, 36827, 29872, 36887, 12629, 3200, 26367, 45605, 18033, 64393, 62186, 55896, 12116, 52640 ]\n        ],\n        [\n            [ 38702, 29119, 39786, 60530, 63731, 58987, 27662, 42345, 26671, 55378, 33121, 25536, 42559, 4924, 59024, 54925 ],\n            [ 14824, 30512, 45347, 7165, 15933, 19828, 44671, 14939, 26036, 14862, 56387, 16860, 58951, 37608, 8713, 19528 ],\n            //\n            [ 39132, 5898, 56260, 111, 6633, 18529, 3586, 46118, 12903, 3230, 46009, 34683, 29687, 63326, 63211, 49296 ]\n        ],\n        [\n            [ 986, 26164, 3268, 28275, 9404, 63925, 33136, 59730, 31988, 56611, 47263, 61254, 8733, 32085, 50289, 13122 ],\n            [ 14258, 23401, 50856, 42141, 25084, 26734, 59974, 7383, 53863, 64125, 52465, 36180, 13622, 201, 27871, 53351 ],\n            //\n            [ 47272, 64848, 46202, 37434, 3539, 17306, 10295, 11614, 18013, 16, 1324, 39875, 20444, 2890, 16545, 44348 ]\n        ],\n        [\n            [ 19866, 10562, 42077, 28523, 35496, 37197, 53883, 14047, 495, 50466, 36300, 22763, 45885, 64592, 38795, 13206 ],\n            [ 13184, 51207, 51786, 45520, 48555, 42973, 44156, 17726, 52427, 37127, 13759, 52125, 4733, 4412, 4953, 56527 ],\n            //\n            [ 1590, 45291, 12525, 30863, 47551, 5952, 31544, 41624, 1305, 19600, 22328, 41628, 42169, 24277, 34012, 56427 ]\n        ],\n        [\n            [ 47154, 55105, 1963, 21, 52878, 45791, 23619, 56321, 500, 38225, 23056, 9462, 40996, 14873, 10761, 49066 ],\n            [ 36572, 50923, 56767, 31505, 18407, 52966, 46823, 59589, 56458, 22347, 15125, 51814, 41865, 44285, 57613, 31261 ],\n            //\n            [ 45080, 37114, 34084, 4403, 11218, 44421, 50399, 57771, 34429, 58981, 10928, 20984, 41078, 12023, 32950, 52502 ]\n        ],\n        [\n            [ 58290, 44776, 10007, 25827, 29024, 10567, 3842, 23954, 37648, 3784, 60833, 43450, 7318, 30405, 52528, 45305 ],\n            [ 45186, 36029, 42940, 32335, 20221, 48954, 1119, 32889, 23083, 20383, 8552, 28953, 8390, 16897, 57258, 44206 ],\n            //\n            [ 55832, 147, 37349, 17470, 11682, 46270, 54584, 41614, 5477, 24140, 62164, 31600, 50118, 22369, 3705, 54163 ]\n        ],\n        [\n            [ 28304, 19326, 37745, 29376, 60397, 9329, 9879, 65180, 16075, 6489, 4008, 32117, 6334, 38630, 38174, 24688 ],\n            [ 26230, 7486, 24396, 49406, 17156, 17622, 46361, 51117, 56354, 10353, 56932, 14401, 36647, 27436, 47112, 64440 ],\n            //\n            [ 11742, 41547, 15790, 50057, 16698, 1429, 29621, 27344, 62344, 61544, 18444, 38136, 34489, 43200, 27607, 43103 ]\n        ],\n        [\n            [ 28714, 40231, 45017, 10161, 58287, 7773, 12346, 24916, 59488, 9923, 48186, 62846, 56705, 356, 60164, 40640 ],\n            [ 11482, 53668, 50081, 28252, 1842, 47135, 6414, 39326, 13097, 44698, 60794, 17000, 31849, 45831, 11320, 15862 ],\n            //\n            [ 63140, 7803, 19175, 38025, 55094, 34247, 44066, 57026, 48589, 50622, 10423, 11999, 55092, 8942, 27131, 32125 ]\n        ],\n        [\n            [ 43260, 469, 18602, 10319, 12902, 47642, 60028, 32785, 6167, 22171, 9608, 26886, 11282, 22250, 16745, 39204 ],\n            [ 8670, 56048, 64394, 47281, 51405, 33386, 29465, 51163, 35023, 38635, 28654, 1787, 52690, 31613, 10258, 3214 ],\n            //\n            [ 8050, 5348, 31788, 49488, 2187, 7106, 27858, 1711, 25837, 56064, 60976, 50925, 56298, 17118, 54899, 54335 ]\n        ],\n        [\n            [ 17536, 52887, 65320, 16442, 62916, 39926, 27636, 33799, 39163, 60632, 908, 60503, 60745, 46691, 65450, 43160 ],\n            [ 5674, 62261, 48198, 62643, 46790, 64079, 41204, 58899, 17751, 47507, 54972, 59225, 38007, 43884, 15254, 35151 ],\n            //\n            [ 18642, 7612, 28171, 32004, 6223, 22171, 24140, 7174, 21251, 54536, 44281, 29012, 47056, 7918, 43209, 13623 ]\n        ],\n        [\n            [ 63322, 363, 20242, 49489, 33904, 18324, 434, 29036, 52439, 26135, 22799, 23901, 272, 4439, 56821, 13538 ],\n            [ 55590, 23583, 44120, 907, 50130, 3973, 49978, 28031, 34446, 21197, 36724, 30549, 46871, 46990, 60040, 7130 ],\n            //\n            [ 57316, 46758, 64156, 59883, 32897, 30969, 8926, 46030, 50626, 48055, 3741, 3362, 9530, 23756, 47883, 7163 ]\n        ],\n        [\n            [ 23752, 65046, 40941, 22054, 19446, 42911, 34058, 42494, 34700, 39133, 20174, 22723, 45653, 15739, 27608, 19637 ],\n            [ 14418, 5536, 43002, 36788, 50411, 39814, 42288, 19806, 35562, 40858, 55322, 21339, 6420, 25381, 28596, 56607 ],\n            //\n            [ 2758, 55398, 40494, 50399, 8816, 46317, 16301, 12045, 52060, 28427, 53610, 30914, 42195, 27664, 20195, 44885 ]\n        ],\n        [\n            [ 36780, 7868, 35709, 2906, 44941, 11894, 58225, 28475, 12115, 36926, 54421, 5173, 35919, 52796, 7255, 18806 ],\n            [ 20648, 25057, 22379, 60213, 2884, 28172, 9721, 29824, 36850, 31343, 32574, 62253, 2382, 4197, 862, 12837 ],\n            //\n            [ 52622, 54759, 7165, 32039, 29484, 18181, 17736, 535, 63279, 40334, 11549, 3906, 3183, 6320, 48320, 59162 ]\n        ],\n        [\n            [ 24726, 4060, 58724, 57885, 20365, 12153, 9230, 2, 30469, 9539, 27197, 47047, 1215, 25864, 14836, 58699 ],\n            [ 6550, 27410, 46954, 56547, 39749, 46299, 44712, 43228, 17428, 25189, 13518, 33946, 4632, 61697, 31714, 20686 ],\n            //\n            [ 53290, 43355, 55544, 14805, 15504, 16967, 39691, 58383, 56900, 14443, 64587, 48259, 32627, 37783, 7142, 12114 ]\n        ],\n        [\n            [ 31996, 35939, 23662, 12510, 26079, 12026, 41904, 1317, 48468, 47653, 44550, 35807, 7129, 14570, 1459, 35094 ],\n            [ 36020, 25791, 44328, 42488, 28506, 47817, 32725, 54997, 26301, 15663, 21674, 47862, 8754, 7834, 1362, 40436 ],\n            //\n            [ 64198, 37630, 9627, 27010, 53612, 51231, 48673, 13813, 19262, 33525, 44917, 35072, 63273, 29896, 56891, 3722 ]\n        ],\n        [\n            [ 8106, 60347, 58622, 64647, 11441, 34999, 50932, 62905, 17956, 42482, 36767, 37770, 26992, 22228, 65004, 17926 ],\n            [ 26190, 20175, 52788, 55564, 20646, 24278, 44949, 22761, 61178, 47259, 4005, 57397, 33347, 25965, 55782, 3840 ],\n            //\n            [ 34352, 42166, 56827, 6601, 29978, 63273, 34804, 59382, 1191, 17054, 42650, 37483, 37020, 29198, 11674, 44774 ]\n        ],\n        [\n            [ 30056, 64570, 54116, 32297, 18909, 22938, 48979, 42932, 45906, 43781, 44995, 6678, 17029, 41522, 64134, 49977 ],\n            [ 19214, 25507, 65162, 22693, 5105, 40381, 32682, 16502, 33136, 29968, 48025, 3006, 59670, 25274, 52276, 27911 ],\n            //\n            [ 33930, 24196, 3057, 10520, 43642, 23602, 56889, 37205, 30440, 22627, 24315, 21984, 45268, 31184, 25438, 52683 ]\n        ],\n        [\n            [ 472, 14023, 20119, 43958, 3423, 47660, 25703, 56917, 65468, 60582, 54020, 14733, 24150, 63726, 12004, 57907 ],\n            [ 61266, 40888, 19400, 64935, 18721, 37531, 33333, 2774, 62107, 61817, 12103, 32362, 53151, 536, 64316, 48667 ],\n            //\n            [ 4840, 3498, 54236, 48928, 24325, 51571, 49052, 29004, 17407, 26083, 43622, 17101, 31876, 56565, 3473, 27468 ]\n        ],\n        [\n            [ 35612, 16584, 53585, 6828, 58379, 41641, 8514, 12057, 38779, 63423, 27991, 15679, 3919, 45794, 129, 64414 ],\n            [ 34188, 50219, 61948, 59563, 8825, 33988, 14871, 34554, 32166, 62457, 879, 8279, 31053, 28409, 21617, 2360 ],\n            //\n            [ 3842, 32320, 63157, 61862, 63647, 31005, 14581, 10227, 39974, 63746, 62522, 7840, 11462, 7486, 46651, 48000 ]\n        ],\n        [\n            [ 10560, 43124, 24111, 31225, 62372, 47422, 13309, 44081, 27034, 7816, 8567, 62253, 21137, 5414, 42674, 32463 ],\n            [ 8390, 27719, 32164, 25547, 23530, 57091, 34878, 28033, 1998, 6210, 32352, 21883, 27390, 56051, 35676, 4245 ],\n            //\n            [ 42686, 47185, 20244, 44037, 51071, 4064, 35360, 21987, 10083, 33452, 44364, 15841, 11963, 1861, 7012, 20339 ]\n        ],\n        [\n            [ 38376, 25490, 64592, 61538, 24228, 6284, 6082, 46884, 49784, 59305, 12906, 10710, 44933, 36299, 5009, 60378 ],\n            [ 2614, 46786, 42315, 1885, 16663, 24369, 18018, 37624, 26361, 29512, 38822, 32013, 61064, 45410, 43011, 11327 ],\n            //\n            [ 64616, 2472, 36083, 41761, 39307, 746, 46630, 36957, 34356, 39450, 19238, 48147, 2309, 49370, 37876, 9239 ]\n        ],\n        [\n            [ 45386, 35440, 59561, 31075, 57856, 5669, 19402, 41999, 44390, 40729, 26504, 35596, 19138, 11099, 38253, 6575 ],\n            [ 40312, 52406, 46176, 20338, 26903, 19034, 13416, 41387, 12869, 33596, 29319, 21552, 26743, 64430, 35765, 56866 ],\n            //\n            [ 40354, 33734, 6457, 13004, 42796, 16069, 6595, 55878, 28867, 51342, 36808, 5287, 21067, 21560, 41323, 23871 ]\n        ],\n        [\n            [ 47582, 13703, 48069, 53177, 55029, 54733, 31756, 58894, 13456, 20987, 7746, 44141, 18074, 38852, 12841, 50623 ],\n            [ 40550, 9414, 60864, 23973, 54408, 29680, 31639, 32746, 65346, 40993, 12187, 64922, 22355, 33799, 34888, 21149 ],\n            //\n            [ 59874, 43797, 52175, 17416, 16260, 39519, 22855, 42421, 3181, 31337, 24816, 39494, 63253, 8873, 63019, 2438 ]\n        ],\n        [\n            [ 50676, 5410, 40162, 41568, 55577, 44583, 20023, 51622, 42624, 36753, 18706, 229, 18200, 55249, 8744, 47459 ],\n            [ 58088, 32256, 40690, 39198, 38201, 48388, 26398, 45691, 44070, 43750, 18146, 58581, 34536, 43965, 21884, 28505 ],\n            //\n            [ 40378, 56424, 12107, 22584, 40535, 14510, 56053, 59877, 30866, 6429, 36252, 44357, 28818, 1778, 38936, 59633 ]\n        ],\n        [\n            [ 25636, 39790, 28981, 52856, 819, 13089, 61750, 39795, 5561, 11403, 53097, 60749, 19791, 5207, 33299, 19876 ],\n            [ 28242, 41994, 1881, 61975, 19051, 28191, 46582, 25276, 46820, 41690, 48275, 1321, 53970, 18035, 5635, 45376 ],\n            //\n            [ 61280, 28698, 31734, 37481, 26262, 1744, 12783, 44370, 3377, 58592, 6826, 60980, 39027, 61326, 28012, 36961 ]\n        ],\n        [\n            [ 29516, 5485, 41405, 23629, 2835, 1572, 30872, 23324, 8171, 21528, 55619, 26197, 10714, 59425, 15544, 8770 ],\n            [ 52660, 28424, 8981, 2842, 60706, 61905, 51111, 17779, 40691, 30414, 63159, 46649, 31118, 59838, 53147, 25213 ],\n            //\n            [ 29804, 9221, 22712, 50929, 40966, 36843, 45935, 36511, 4297, 15481, 447, 3438, 60098, 39746, 1157, 59116 ]\n        ],\n        [\n            [ 2996, 43826, 1244, 21841, 7713, 29963, 35225, 13683, 37178, 65067, 18919, 30442, 63937, 47430, 595, 1059 ],\n            [ 23292, 7454, 22644, 42645, 31631, 16023, 15127, 11641, 22438, 17903, 2818, 28237, 37790, 12173, 40409, 1243 ],\n            //\n            [ 37738, 62557, 13130, 3528, 58803, 19254, 20607, 58433, 9849, 3558, 5106, 51521, 14004, 13233, 31040, 24005 ]\n        ],\n        [\n            [ 55232, 38742, 37208, 2526, 40783, 25534, 33712, 17286, 48221, 62432, 30144, 35775, 43662, 35831, 28260, 25520 ],\n            [ 44566, 57483, 9371, 23656, 49732, 2256, 31671, 64866, 55423, 47060, 64848, 6956, 16831, 55701, 55438, 6935 ],\n            //\n            [ 9602, 24997, 35929, 58397, 23128, 19209, 55578, 812, 35634, 8573, 52215, 35407, 5661, 1717, 46608, 26481 ]\n        ],\n        [\n            [ 21894, 36407, 14531, 5192, 38837, 42962, 17748, 13809, 14404, 61854, 46619, 52, 38460, 10734, 59904, 2860 ],\n            [ 56042, 40601, 33561, 28006, 30441, 20615, 64977, 24636, 50823, 55617, 56206, 56926, 39594, 10451, 38362, 18410 ],\n            //\n            [ 50188, 55875, 51480, 25920, 43417, 62641, 16222, 60507, 15610, 26281, 29699, 11335, 4471, 61825, 352, 27159 ]\n        ],\n        [\n            [ 43690, 58899, 17869, 42058, 2649, 45412, 54936, 4916, 58884, 38039, 51974, 20180, 38587, 53709, 53591, 34531 ],\n            [ 27770, 10053, 37828, 32127, 25212, 14416, 27450, 34997, 55750, 30961, 47385, 37689, 51517, 40160, 52796, 29429 ],\n            //\n            [ 28230, 34123, 19213, 65289, 40438, 61826, 47405, 1487, 15232, 50105, 23559, 19299, 56289, 9073, 10143, 1131 ]\n        ],\n        [\n            [ 59940, 32035, 11350, 23010, 34062, 1120, 23176, 7796, 61259, 55827, 65356, 17795, 16261, 38152, 8236, 7955 ],\n            [ 24392, 36903, 604, 44354, 18296, 46428, 2174, 133, 32762, 65021, 2535, 61969, 7038, 27704, 27957, 26163 ],\n            //\n            [ 23354, 45507, 34148, 16809, 57196, 8629, 37119, 17741, 20177, 52233, 16948, 12301, 14213, 47687, 21633, 55538 ]\n        ],\n        [\n            [ 896, 33078, 58540, 2336, 19509, 45637, 19486, 8468, 59878, 31626, 65165, 50718, 49470, 64053, 28903, 40270 ],\n            [ 11854, 56770, 22421, 43985, 59520, 5987, 18613, 35556, 40465, 48754, 36229, 2641, 40946, 7392, 1961, 64296 ],\n            //\n            [ 58624, 51107, 13193, 9015, 3366, 62034, 65393, 22632, 37297, 58511, 17298, 50098, 25460, 13779, 48664, 42812 ]\n        ],\n        [\n            [ 59428, 24759, 18350, 64640, 9189, 49895, 34249, 39142, 10656, 57678, 14724, 38189, 62252, 15429, 45055, 19495 ],\n            [ 42584, 19445, 48401, 23482, 50334, 20900, 48670, 37072, 39994, 9922, 7862, 38385, 51325, 21101, 39398, 57132 ],\n            //\n            [ 13194, 18161, 12745, 59879, 44457, 26211, 25730, 5240, 19306, 1938, 22016, 54497, 24623, 3060, 25853, 1441 ]\n        ],\n        [\n            [ 57458, 12836, 53684, 64751, 41577, 36799, 11378, 63125, 28388, 36989, 22519, 41089, 56055, 13295, 58119, 63595 ],\n            [ 10038, 50750, 1810, 20139, 27070, 45981, 2238, 10876, 2119, 54525, 3789, 13351, 39003, 12084, 24439, 25914 ],\n            //\n            [ 25800, 29087, 59415, 196, 48494, 22458, 61013, 38596, 55532, 23507, 26266, 3472, 16011, 19761, 16083, 4807 ]\n        ],\n        [\n            [ 43520, 19502, 8944, 27832, 6579, 60237, 53355, 50852, 56732, 23496, 22401, 57225, 43315, 18792, 58496, 41470 ],\n            [ 5888, 12432, 54249, 12384, 49713, 35186, 13946, 48549, 33593, 20613, 23969, 16748, 46365, 1836, 30528, 20491 ],\n            //\n            [ 33272, 57779, 42372, 56704, 38896, 57863, 28950, 59974, 38059, 1512, 10223, 26766, 36848, 35864, 35062, 6533 ]\n        ],\n        [\n            [ 46028, 4422, 4974, 10423, 22094, 61917, 44460, 50008, 35064, 24212, 38918, 58529, 64362, 18698, 35421, 63486 ],\n            [ 582, 42485, 50607, 28021, 17850, 2613, 51710, 8876, 36241, 38177, 819, 35520, 62230, 57401, 3841, 15443 ],\n            //\n            [ 44332, 6994, 26246, 65069, 2310, 38272, 56570, 15064, 60248, 65486, 62051, 34084, 2079, 30502, 50572, 9634 ]\n        ],\n        [\n            [ 30004, 7991, 20020, 7593, 26472, 18936, 38552, 19708, 38757, 759, 21066, 364, 18621, 7099, 42221, 21474 ],\n            [ 54598, 23195, 37026, 47315, 19511, 33365, 2088, 32527, 33194, 57445, 21004, 41929, 10034, 55908, 13565, 55843 ],\n            //\n            [ 23314, 23270, 59239, 63358, 23501, 58990, 23901, 42056, 33330, 40915, 46958, 18781, 347, 48981, 28759, 17084 ]\n        ],\n        [\n            [ 45218, 19724, 31667, 51235, 35359, 26169, 47846, 4172, 51767, 31900, 40453, 49407, 36600, 36785, 26479, 42520 ],\n            [ 16696, 21523, 6691, 20132, 35753, 19230, 5628, 47908, 52094, 7862, 62747, 51442, 60502, 41522, 23392, 43680 ],\n            //\n            [ 47246, 63930, 31753, 34746, 30374, 60139, 13814, 49748, 30603, 46863, 33157, 58403, 47057, 38874, 6852, 49654 ]\n        ],\n        [\n            [ 27658, 48207, 12862, 19175, 4890, 18881, 48952, 49911, 36819, 44395, 63314, 48335, 52007, 26432, 52598, 22125 ],\n            [ 45266, 44327, 39870, 46578, 56931, 9018, 46997, 32266, 40691, 28485, 14617, 36725, 15673, 49167, 61855, 53737 ],\n            //\n            [ 3318, 36896, 31330, 19110, 58575, 9748, 59155, 31016, 63252, 10557, 12919, 64554, 12855, 5094, 51707, 7457 ]\n        ],\n        [\n            [ 43656, 9236, 38022, 4625, 6718, 52405, 57531, 54684, 28060, 22714, 36210, 8955, 40827, 38012, 45872, 8529 ],\n            [ 29942, 62013, 53423, 798, 9084, 51563, 9724, 36976, 39644, 64420, 64585, 2621, 14389, 58479, 20606, 10753 ],\n            //\n            [ 2870, 14949, 51432, 9154, 41467, 12609, 12184, 44975, 12220, 46737, 38336, 24659, 6319, 1337, 12683, 5426 ]\n        ],\n        [\n            [ 58326, 24982, 64826, 39919, 36895, 9380, 23316, 57032, 45392, 44829, 21992, 34698, 65037, 15274, 11394, 31629 ],\n            [ 3186, 63663, 17539, 55625, 53061, 18679, 21465, 61876, 41061, 50145, 5555, 35309, 20379, 45922, 42327, 40005 ],\n            //\n            [ 38838, 32550, 17377, 53186, 13872, 51608, 50728, 58840, 10263, 59211, 60261, 52, 52276, 41405, 26686, 21063 ]\n        ],\n        [\n            [ 49544, 53401, 7228, 46173, 5103, 36879, 14009, 38191, 50837, 57052, 20746, 36322, 48371, 60497, 45535, 24482 ],\n            [ 26670, 9121, 39805, 26944, 31621, 48962, 19344, 16598, 55087, 21074, 8626, 25822, 35005, 28099, 64165, 16257 ],\n            //\n            [ 24454, 45495, 38472, 49167, 63443, 50502, 43548, 18625, 11937, 33637, 33787, 29411, 35243, 18564, 25266, 55802 ]\n        ],\n        [\n            [ 65000, 31559, 26250, 31134, 25646, 61314, 8695, 63212, 34520, 12553, 56700, 27139, 41048, 46967, 35995, 40839 ],\n            [ 18242, 43236, 21821, 13345, 7595, 57518, 60148, 50651, 22713, 50367, 35114, 6705, 11764, 51937, 39223, 55623 ],\n            //\n            [ 52676, 31195, 13433, 13073, 26987, 50172, 38375, 41651, 45574, 21726, 55018, 21606, 21999, 20533, 57636, 1625 ]\n        ],\n        [\n            [ 51892, 49507, 43337, 17717, 32341, 25818, 1842, 63312, 44082, 30174, 39768, 45585, 7994, 63477, 1145, 35046 ],\n            [ 64070, 19234, 57850, 38654, 26620, 26554, 50327, 7143, 36998, 61023, 23540, 45585, 44493, 49902, 27720, 6955 ],\n            //\n            [ 13256, 31016, 36623, 53786, 1340, 2495, 47034, 25714, 25577, 47980, 22291, 31029, 59783, 4291, 27533, 3343 ]\n        ],\n        [\n            [ 32766, 13819, 50813, 8961, 50216, 44034, 16927, 40372, 252, 42388, 51950, 38874, 16649, 34679, 31581, 30855 ],\n            [ 64482, 11664, 6529, 12190, 34157, 35976, 23616, 16759, 333, 30233, 59488, 18508, 13284, 12931, 46188, 33601 ],\n            //\n            [ 44600, 8337, 30770, 46753, 57558, 58360, 7487, 2644, 43912, 62137, 8386, 23443, 27025, 905, 49721, 16650 ]\n        ],\n        [\n            [ 4332, 2498, 28239, 54004, 32479, 31690, 7452, 41914, 55990, 13159, 34772, 19254, 8209, 42501, 49449, 38791 ],\n            [ 38646, 12234, 14554, 7079, 51964, 65149, 35080, 18402, 27179, 19293, 41466, 57012, 49846, 20785, 57589, 2980 ],\n            //\n            [ 11716, 8108, 36739, 22422, 24876, 62155, 21204, 36782, 37200, 12335, 39593, 57072, 12547, 60194, 23494, 54010 ]\n        ],\n        [\n            [ 58716, 1222, 11150, 48727, 34104, 52003, 48823, 43343, 28371, 43538, 45781, 37678, 39465, 34890, 17176, 501 ],\n            [ 64592, 41691, 8537, 48525, 13182, 12206, 6791, 38864, 3527, 25421, 61185, 33797, 16620, 43229, 20234, 2928 ],\n            //\n            [ 27842, 46560, 43622, 47535, 54034, 26069, 41291, 11199, 52952, 61535, 28190, 37594, 62091, 7096, 57297, 26255 ]\n        ],\n        [\n            [ 9772, 16617, 1001, 1709, 37225, 53728, 24713, 31108, 10206, 58989, 48502, 59114, 18606, 26563, 22464, 45005 ],\n            [ 49516, 47580, 48327, 15750, 19285, 31272, 19963, 63687, 26556, 24618, 36685, 2823, 5914, 64191, 42924, 39485 ],\n            //\n            [ 9780, 43458, 35113, 44502, 34737, 33930, 40237, 42986, 16113, 23488, 7720, 38446, 36231, 6124, 23262, 13330 ]\n        ],\n        [\n            [ 16254, 24301, 30744, 9023, 3372, 17548, 59392, 59899, 54926, 14033, 22360, 44702, 23627, 1803, 27580, 43861 ],\n            [ 19804, 55063, 34017, 30937, 37041, 12029, 46515, 16153, 64027, 26816, 56755, 11776, 48521, 32894, 4914, 64416 ],\n            //\n            [ 35884, 56321, 62410, 15168, 23138, 42068, 41903, 20292, 50217, 305, 54892, 52499, 40279, 47100, 27690, 22582 ]\n        ],\n        [\n            [ 28442, 44864, 17476, 17328, 3471, 7888, 3012, 23833, 65166, 62401, 23749, 63633, 19972, 37054, 18356, 16220 ],\n            [ 15280, 62252, 13054, 1905, 43583, 17850, 43104, 60045, 52052, 4153, 62132, 53899, 33300, 1858, 59790, 21372 ],\n            //\n            [ 4056, 34619, 8427, 27480, 42853, 15317, 47739, 16166, 1365, 53824, 39435, 45885, 35000, 26016, 63232, 24273 ]\n        ],\n        [\n            [ 63562, 43188, 56624, 14540, 54181, 55498, 63697, 12722, 54417, 1394, 19031, 33339, 50762, 8296, 6370, 57665 ],\n            [ 54278, 18317, 4649, 45157, 30737, 46407, 41931, 64165, 34053, 43348, 38707, 11149, 65218, 13721, 58664, 58347 ],\n            //\n            [ 10624, 6514, 65504, 8127, 26392, 42254, 29813, 41297, 12945, 34945, 16883, 19585, 48525, 6637, 29742, 55292 ]\n        ],\n        [\n            [ 16286, 61247, 62680, 46076, 24736, 1616, 10539, 28754, 2837, 9252, 24568, 6265, 65484, 39305, 41348, 37806 ],\n            [ 8004, 49848, 49409, 6448, 1365, 4192, 27812, 26413, 58736, 6949, 49138, 64477, 11120, 36001, 38044, 2180 ],\n            //\n            [ 638, 30298, 56655, 9399, 30117, 59304, 4810, 26219, 18520, 24727, 31943, 19160, 57857, 57269, 43467, 8800 ]\n        ],\n        [\n            [ 50388, 19779, 11209, 23913, 15389, 48047, 14403, 38990, 60733, 8461, 64771, 39408, 1095, 39088, 21865, 36722 ],\n            [ 57182, 21269, 34363, 45184, 28913, 36712, 31846, 18702, 55322, 65131, 61262, 18378, 980, 14273, 40016, 5825 ],\n            //\n            [ 39162, 887, 41162, 38817, 41457, 598, 38782, 57112, 59910, 53118, 37892, 23886, 44942, 32377, 40386, 57741 ]\n        ],\n        [\n            [ 14088, 58183, 40693, 11498, 59178, 13954, 8180, 18305, 19346, 3689, 35857, 21341, 33115, 2087, 41148, 42414 ],\n            [ 12886, 1441, 16913, 53760, 44121, 25165, 5003, 20706, 41053, 39837, 48125, 16658, 16757, 52382, 51164, 56796 ],\n            //\n            [ 49594, 64893, 48594, 20848, 64624, 20156, 32909, 27928, 46014, 50100, 43407, 34407, 2435, 8182, 37248, 43340 ]\n        ],\n        [\n            [ 58310, 1592, 28742, 24194, 18728, 65401, 53797, 10574, 1677, 9136, 39854, 58470, 49277, 37232, 64675, 52972 ],\n            [ 4706, 27191, 63024, 64286, 23572, 3597, 33207, 59242, 1288, 43692, 17976, 29666, 19434, 33031, 31811, 24222 ],\n            //\n            [ 29992, 59478, 50840, 38693, 63335, 29799, 47633, 426, 64291, 47237, 19989, 34117, 23751, 42351, 35771, 48515 ]\n        ],\n        [\n            [ 63996, 20257, 30254, 8091, 24616, 17271, 40242, 6078, 10800, 6342, 26258, 12386, 16536, 42513, 6271, 10372 ],\n            [ 43820, 62675, 30346, 15521, 11722, 49993, 2282, 34059, 10775, 27843, 64776, 40791, 24381, 26591, 17000, 45568 ],\n            //\n            [ 58472, 40357, 40041, 10399, 16041, 21611, 58355, 19218, 23469, 45222, 44902, 14629, 64540, 56237, 21298, 40009 ]\n        ],\n        [\n            [ 55834, 42483, 17217, 64552, 59262, 60017, 15302, 52313, 54062, 60480, 5043, 17519, 5069, 14258, 28402, 7385 ],\n            [ 56272, 52576, 19036, 3864, 29679, 28982, 63116, 46097, 52952, 24087, 9807, 38775, 52063, 37359, 27371, 64098 ],\n            //\n            [ 42832, 23116, 56743, 48105, 59536, 61997, 50875, 53022, 53095, 35208, 48043, 2516, 4268, 6665, 40152, 28278 ]\n        ],\n        [\n            [ 18968, 38818, 33032, 33581, 52420, 33776, 60542, 38157, 23372, 64251, 32920, 26186, 3158, 45905, 1266, 10077 ],\n            [ 47400, 1720, 11866, 50174, 14210, 41884, 7953, 42652, 25562, 39752, 57005, 42541, 28348, 55858, 25895, 55261 ],\n            //\n            [ 20184, 426, 14275, 55361, 9014, 36892, 54317, 21931, 3632, 19042, 44851, 62146, 62605, 16010, 15513, 52732 ]\n        ],\n        [\n            [ 20356, 12599, 11901, 44476, 1927, 27434, 64567, 60255, 30030, 42549, 43998, 6410, 46906, 61361, 27282, 15419 ],\n            [ 45608, 28052, 24633, 61100, 33255, 15130, 34678, 1372, 10900, 47429, 59776, 45346, 51975, 40512, 18800, 37485 ],\n            //\n            [ 42312, 29149, 20322, 64207, 54182, 41762, 47810, 7881, 55922, 16555, 8873, 57904, 17885, 24584, 52454, 12487 ]\n        ],\n        [\n            [ 24642, 23381, 7652, 19569, 23453, 28831, 34214, 11418, 58016, 18482, 40654, 42282, 15111, 27847, 30598, 48350 ],\n            [ 6372, 38522, 17278, 43351, 64597, 46670, 114, 58610, 21207, 54227, 34230, 29174, 17607, 32575, 46039, 63986 ],\n            //\n            [ 53194, 19356, 43083, 41674, 6500, 11908, 18863, 16446, 26309, 57022, 44735, 24560, 58971, 18622, 7319, 10047 ]\n        ],\n        [\n            [ 51782, 21927, 31099, 51955, 25946, 60918, 5200, 58491, 10948, 40549, 63970, 42954, 9762, 52051, 23329, 12711 ],\n            [ 55184, 9925, 48392, 21424, 22627, 12739, 30046, 5446, 42641, 12280, 2074, 34917, 38959, 61700, 28284, 30464 ],\n            //\n            [ 55314, 24572, 30584, 20886, 47283, 59790, 11104, 50050, 33766, 53599, 58295, 10698, 18752, 40595, 49531, 44526 ]\n        ],\n        [\n            [ 8558, 2401, 20214, 37617, 25582, 29537, 51079, 3668, 19266, 18377, 47313, 37246, 14197, 10393, 56760, 53375 ],\n            [ 36726, 48832, 54877, 41119, 40432, 52865, 31546, 22680, 55227, 51320, 4927, 29937, 57113, 39160, 23945, 57338 ],\n            //\n            [ 15050, 56256, 11488, 5386, 23917, 5512, 39822, 21825, 14586, 40417, 37016, 32519, 52869, 17473, 58245, 5307 ]\n        ],\n        [\n            [ 10896, 14177, 23010, 3602, 47655, 17252, 49326, 26946, 42105, 10526, 5515, 63723, 54447, 26786, 46387, 42106 ],\n            [ 6444, 56627, 43803, 492, 9136, 17144, 1579, 60040, 11581, 10752, 17784, 14413, 12013, 17454, 60745, 13259 ],\n            //\n            [ 25008, 22624, 38598, 62937, 25506, 61215, 30483, 43651, 12358, 54985, 24565, 32918, 3951, 38687, 58254, 43249 ]\n        ],\n        [\n            [ 26784, 16872, 37263, 4600, 36883, 42798, 12459, 44527, 24992, 34816, 56303, 23502, 47964, 51298, 63830, 29440 ],\n            [ 24620, 33473, 41773, 22568, 40484, 58271, 52336, 19977, 16154, 4369, 1813, 42044, 57409, 41829, 16650, 37229 ],\n            //\n            [ 55136, 16549, 18430, 26236, 18861, 49554, 11007, 15169, 63910, 62016, 17602, 14770, 61440, 8427, 20974, 23067 ]\n        ],\n        [\n            [ 16414, 20993, 37974, 10331, 43658, 61010, 2776, 36101, 46541, 11946, 43576, 34743, 11255, 1275, 33995, 54333 ],\n            [ 61216, 56921, 11172, 28307, 60462, 39490, 11732, 18164, 10072, 6187, 33679, 26941, 54430, 46654, 64965, 856 ],\n            //\n            [ 8736, 920, 9802, 58823, 54695, 57112, 58013, 27221, 3214, 15584, 1703, 15514, 29292, 16203, 22220, 1114 ]\n        ],\n        [\n            [ 24206, 20320, 57851, 27248, 21791, 2383, 38324, 13875, 33222, 6145, 9478, 42023, 9396, 34468, 19459, 33452 ],\n            [ 14436, 55262, 18528, 61447, 43124, 21759, 12517, 65347, 64375, 1825, 45823, 27399, 58852, 64560, 27673, 33187 ],\n            //\n            [ 58496, 20491, 21786, 33413, 59395, 46274, 59249, 18265, 2809, 26471, 3226, 15789, 13417, 7732, 5267, 9038 ]\n        ],\n        [\n            [ 50432, 44076, 33747, 31874, 63273, 42245, 46592, 34335, 62549, 12246, 39180, 26064, 27547, 3398, 63555, 43030 ],\n            [ 32542, 29876, 45438, 20361, 23064, 25771, 57094, 34629, 27360, 61638, 51470, 13604, 59960, 21552, 50356, 21586 ],\n            //\n            [ 22354, 19379, 926, 9196, 27220, 59527, 225, 22840, 59906, 35900, 23413, 45646, 34923, 64781, 15477, 17994 ]\n        ],\n        [\n            [ 40918, 16348, 35265, 29764, 58407, 37057, 19199, 15527, 52718, 7668, 37925, 25471, 18454, 25788, 38398, 36036 ],\n            [ 6520, 28277, 1539, 27230, 6767, 58252, 10451, 57586, 31417, 26947, 54246, 65216, 38782, 27819, 36475, 49683 ],\n            //\n            [ 57718, 56247, 25828, 12748, 55356, 40486, 55050, 23382, 4223, 39537, 19733, 33288, 8455, 26163, 51418, 48394 ]\n        ],\n        [\n            [ 8282, 41307, 17573, 9361, 25346, 25618, 21944, 57078, 56108, 47175, 2758, 195, 37752, 62936, 6389, 2600 ],\n            [ 7126, 27802, 18149, 28906, 36246, 10830, 8530, 19238, 48049, 31759, 39849, 47876, 2129, 39665, 30372, 6268 ],\n            //\n            [ 29936, 64363, 29959, 15514, 1050, 63721, 46634, 22698, 51514, 24653, 42046, 27366, 11888, 25298, 10994, 26137 ]\n        ],\n        [\n            [ 38138, 16631, 55248, 43499, 13954, 5589, 13241, 49018, 62090, 43619, 62775, 44121, 48061, 13874, 29630, 14489 ],\n            [ 45868, 31450, 15832, 51865, 62674, 39386, 20366, 47000, 44788, 40766, 13710, 42080, 30003, 1188, 45459, 19819 ],\n            //\n            [ 24362, 29778, 19061, 13844, 33631, 52635, 24560, 16177, 32517, 36303, 1358, 48314, 36303, 2773, 59942, 49889 ]\n        ],\n        [\n            [ 40324, 52648, 31639, 47517, 42471, 65007, 17064, 50027, 25698, 42365, 51483, 53918, 47429, 1006, 49072, 59584 ],\n            [ 47066, 11396, 54262, 27553, 27940, 22151, 22935, 25209, 44191, 62445, 35273, 11809, 45828, 12236, 54974, 51978 ],\n            //\n            [ 31716, 62923, 5818, 2872, 96, 27769, 31003, 12376, 6956, 18064, 46854, 10656, 46401, 46378, 43105, 49596 ]\n        ],\n        [\n            [ 35874, 48747, 19964, 25200, 21102, 39287, 32392, 22395, 3450, 56574, 37490, 26865, 38685, 31959, 21389, 14096 ],\n            [ 34880, 631, 10186, 58792, 57925, 18600, 43818, 51736, 11754, 21546, 14103, 2354, 57564, 46922, 33405, 64784 ],\n            //\n            [ 16096, 5989, 19990, 59394, 62487, 3242, 40735, 20949, 45866, 50603, 24117, 24986, 61920, 30762, 35415, 45603 ]\n        ],\n        [\n            [ 25738, 5150, 22282, 56020, 38492, 411, 26444, 35775, 65072, 56072, 54541, 55208, 4361, 41605, 17875, 32507 ],\n            [ 36058, 53442, 6316, 21224, 54326, 41761, 22493, 31010, 63671, 40305, 37318, 34416, 48982, 4513, 6539, 4065 ],\n            //\n            [ 25088, 59564, 27489, 25633, 10165, 42474, 392, 7767, 53270, 40321, 38051, 54763, 39843, 61410, 60158, 17278 ]\n        ],\n        [\n            [ 12824, 11416, 37263, 4782, 36080, 62442, 47420, 58461, 60777, 18354, 48408, 5838, 23634, 57891, 9637, 23890 ],\n            [ 45478, 24039, 48206, 48110, 33088, 33399, 43801, 50869, 44014, 27483, 37475, 13450, 52621, 20462, 58697, 65225 ],\n            //\n            [ 13444, 51726, 41256, 20937, 56834, 60695, 39950, 50598, 55307, 53152, 20991, 4837, 10482, 57090, 49086, 2745 ]\n        ],\n        [\n            [ 22368, 39470, 7538, 28267, 13144, 35876, 14664, 36422, 27273, 20872, 25123, 12981, 13833, 22499, 39157, 28638 ],\n            [ 11384, 18432, 63818, 34651, 21097, 23525, 45521, 9701, 57381, 49820, 17427, 47592, 28682, 48557, 20751, 59796 ],\n            //\n            [ 7154, 12385, 2132, 30639, 17142, 31186, 14804, 59858, 33141, 25036, 34419, 57928, 3997, 20211, 45559, 15494 ]\n        ],\n        [\n            [ 56482, 43435, 11557, 24492, 13059, 59144, 65150, 13973, 23356, 54074, 33285, 38172, 55341, 32375, 55554, 28763 ],\n            [ 65218, 3099, 52583, 57558, 36433, 57388, 34937, 53232, 19009, 9133, 18132, 38090, 50081, 10475, 64006, 5143 ],\n            //\n            [ 22560, 19366, 5134, 54818, 49736, 39678, 39401, 21381, 18771, 3990, 63132, 52455, 40270, 8086, 41575, 52033 ]\n        ],\n        [\n            [ 43624, 2672, 64331, 49141, 50560, 2255, 56698, 62625, 21661, 21328, 30499, 62755, 42292, 53538, 38413, 50990 ],\n            [ 47052, 35122, 53335, 30104, 14308, 43417, 47848, 47853, 51179, 5455, 1910, 19468, 40943, 64594, 23812, 4184 ],\n            //\n            [ 5216, 36504, 1045, 4905, 51365, 8696, 40370, 43309, 56521, 29925, 15718, 50707, 22476, 53291, 29005, 4116 ]\n        ],\n        [\n            [ 50552, 15820, 42601, 6305, 48196, 30541, 50999, 60550, 51468, 17622, 9129, 47399, 13315, 2727, 51157, 46900 ],\n            [ 32486, 26174, 63982, 10393, 44543, 55313, 26338, 52677, 3343, 27147, 31996, 43044, 43087, 32862, 35653, 49516 ],\n            //\n            [ 39002, 29476, 36022, 18380, 57538, 11840, 13884, 34911, 33918, 32066, 57408, 9925, 16128, 17064, 4498, 39504 ]\n        ],\n        [\n            [ 7900, 63468, 30605, 60146, 24795, 8451, 65472, 26462, 29123, 8459, 16820, 26784, 50744, 41729, 20947, 48188 ],\n            [ 63634, 19414, 17135, 45587, 50250, 29230, 51519, 48401, 628, 62734, 40211, 6787, 54555, 56916, 7876, 27670 ],\n            //\n            [ 20716, 1136, 43322, 7805, 2530, 12528, 1233, 20151, 35769, 41678, 21415, 22262, 41348, 1929, 18198, 8798 ]\n        ],\n        [\n            [ 21012, 25572, 38058, 50150, 39976, 22214, 64172, 48566, 52450, 50806, 10023, 36514, 11128, 29316, 48400, 43598 ],\n            [ 42986, 61219, 24836, 20608, 28361, 38565, 53713, 50120, 55064, 64813, 48422, 31691, 20882, 18958, 22373, 18872 ],\n            //\n            [ 46612, 15584, 38674, 36657, 18371, 16457, 15715, 13043, 19871, 56380, 9638, 38287, 19170, 60592, 10589, 22147 ]\n        ],\n        [\n            [ 60266, 39676, 4250, 56270, 7226, 27196, 60061, 48198, 18757, 58284, 4673, 61564, 20471, 63481, 11519, 1161 ],\n            [ 12592, 6740, 51782, 50918, 58059, 49603, 30091, 48769, 63726, 4515, 9500, 42915, 20789, 57941, 43557, 15074 ],\n            //\n            [ 24280, 56801, 49544, 17589, 37611, 17655, 31192, 46392, 37532, 22386, 3527, 54442, 37680, 49081, 7076, 11260 ]\n        ],\n        [\n            [ 18612, 40720, 2442, 64118, 31472, 28848, 33783, 21120, 11140, 41510, 24004, 47695, 51377, 3392, 38776, 24772 ],\n            [ 45524, 2156, 16583, 29496, 2911, 30451, 45661, 12197, 22359, 60679, 41480, 20332, 520, 3765, 17646, 8954 ],\n            //\n            [ 18162, 44514, 453, 46371, 3288, 40270, 54028, 36887, 27826, 46531, 34930, 52848, 3711, 28321, 16198, 59424 ]\n        ],\n        [\n            [ 65532, 42558, 6404, 25942, 32561, 60299, 57613, 35143, 5783, 64083, 42881, 45738, 26559, 29419, 33120, 51213 ],\n            [ 4990, 52531, 33960, 7766, 44903, 17259, 6060, 5807, 21184, 18841, 34651, 32371, 17333, 27610, 3869, 21805 ],\n            //\n            [ 26444, 23452, 40782, 18762, 56756, 24819, 6568, 57524, 31984, 21964, 12080, 38680, 23338, 59483, 39288, 64485 ]\n        ],\n        [\n            [ 1592, 3064, 33452, 38852, 36907, 63456, 43944, 2156, 26240, 18064, 9975, 63533, 50417, 19051, 39042, 14222 ],\n            [ 46222, 47342, 16340, 7090, 2784, 30013, 10292, 36514, 37572, 65147, 28256, 47213, 7473, 3426, 5240, 4418 ],\n            //\n            [ 150, 22462, 40913, 26757, 38240, 12119, 52098, 55362, 36218, 29872, 7630, 54709, 44860, 9041, 59969, 50110 ]\n        ],\n        [\n            [ 43102, 1240, 29595, 51657, 3548, 49011, 2570, 65395, 7960, 20892, 50858, 33777, 64805, 41899, 54033, 9217 ],\n            [ 58170, 14462, 24162, 47972, 21291, 949, 50280, 11250, 858, 39218, 16714, 57754, 44570, 18572, 9459, 58674 ],\n            //\n            [ 19754, 32565, 48473, 58120, 27034, 12393, 48943, 64566, 9079, 16617, 10806, 1779, 16714, 31579, 16375, 29685 ]\n        ],\n        [\n            [ 56808, 15021, 60044, 46068, 58802, 62067, 35821, 60863, 3249, 64268, 61739, 18433, 9960, 36355, 19751, 29334 ],\n            [ 2504, 24635, 9929, 31821, 40178, 41428, 9787, 1218, 17459, 15478, 47874, 16913, 8716, 50871, 44257, 3764 ],\n            //\n            [ 56142, 33016, 57371, 31673, 3865, 16092, 60208, 11705, 25033, 1466, 55684, 18500, 53680, 61426, 52077, 55302 ]\n        ],\n        [\n            [ 36562, 64155, 36418, 36831, 34503, 42233, 28874, 40192, 48929, 22508, 12386, 35928, 13581, 24027, 27275, 23200 ],\n            [ 22702, 3452, 56608, 9745, 35167, 38715, 63576, 58251, 13023, 64738, 26584, 42482, 7735, 60525, 10108, 63776 ],\n            //\n            [ 21274, 7470, 48129, 36445, 7164, 19080, 22894, 5070, 52043, 52704, 46164, 65283, 36979, 17725, 41480, 49870 ]\n        ],\n        [\n            [ 59856, 64192, 17813, 38435, 11505, 9593, 52756, 5184, 11332, 20534, 25561, 46934, 15190, 42910, 35311, 3771 ],\n            [ 32718, 2780, 33484, 2588, 29048, 29928, 397, 3888, 4519, 57164, 55096, 3495, 18680, 82, 31616, 3679 ],\n            //\n            [ 35540, 29875, 39635, 38116, 13963, 2439, 28695, 35206, 47607, 52947, 36139, 16322, 50162, 51174, 17981, 5576 ]\n        ],\n        [\n            [ 33554, 38118, 33147, 37298, 3758, 51461, 26787, 55597, 9608, 10777, 24929, 38689, 41237, 42293, 51270, 36514 ],\n            [ 776, 35597, 7002, 19351, 5874, 15665, 13087, 20640, 6202, 5054, 30369, 47809, 61723, 31493, 43059, 48002 ],\n            //\n            [ 36758, 24317, 39085, 15562, 22269, 41029, 4657, 61090, 4400, 3500, 14250, 19282, 18055, 3478, 57995, 15581 ]\n        ],\n        [\n            [ 24362, 53852, 32188, 3703, 27946, 17698, 1668, 56772, 42694, 55238, 44361, 34669, 3729, 26426, 11293, 54813 ],\n            [ 31486, 53108, 53972, 6629, 53470, 28891, 26915, 28134, 60652, 2508, 27187, 56439, 8811, 23926, 2450, 11692 ],\n            //\n            [ 21292, 16187, 55084, 35224, 63715, 32450, 12503, 48893, 20878, 5927, 55873, 11108, 53077, 43777, 1013, 42199 ]\n        ],\n        [\n            [ 5392, 60183, 56275, 24082, 61441, 43921, 16684, 44238, 7149, 11595, 56252, 26135, 18057, 19373, 28446, 37899 ],\n            [ 52734, 46783, 11639, 8776, 20248, 23971, 45130, 4720, 21566, 55511, 11022, 56359, 65363, 36042, 45913, 50254 ],\n            //\n            [ 19626, 60178, 47355, 57636, 49334, 58293, 30255, 59815, 53920, 63097, 51233, 27398, 21832, 56809, 3390, 45216 ]\n        ],\n        [\n            [ 30196, 3937, 45670, 14625, 49278, 17900, 33320, 10657, 17458, 4917, 24926, 21598, 31947, 63215, 53057, 35487 ],\n            [ 63946, 34010, 59075, 40842, 53796, 23958, 28473, 35928, 22209, 43923, 31157, 53819, 29608, 60694, 46330, 62255 ],\n            //\n            [ 7204, 53984, 1994, 38097, 22523, 46236, 34374, 53531, 26102, 60060, 28002, 42329, 15798, 13913, 8633, 15949 ]\n        ],\n        [\n            [ 49448, 21729, 62067, 30399, 6516, 6937, 47588, 18088, 29541, 30707, 10651, 23412, 35270, 11372, 63612, 4019 ],\n            [ 54756, 29929, 47197, 5669, 12469, 33980, 61637, 51885, 10258, 40380, 64212, 59010, 49123, 5538, 54316, 36916 ],\n            //\n            [ 58932, 18819, 13721, 2738, 11689, 11592, 57770, 63962, 40437, 15674, 38, 34951, 22899, 60425, 3527, 6250 ]\n        ],\n        [\n            [ 45390, 47686, 12558, 26533, 32620, 55766, 34087, 30991, 51220, 12140, 23391, 13724, 14397, 30598, 21861, 64362 ],\n            [ 45248, 26170, 7008, 61763, 22566, 2457, 11663, 5283, 34161, 60891, 9974, 25045, 29594, 3756, 44266, 36023 ],\n            //\n            [ 64384, 265, 44330, 36446, 19188, 53374, 4863, 63681, 1356, 9717, 10853, 5230, 54315, 57014, 3615, 39223 ]\n        ],\n        [\n            [ 62558, 6117, 4110, 59295, 24387, 23655, 19372, 5349, 53825, 18623, 5365, 29104, 25030, 45761, 22640, 23250 ],\n            [ 47642, 1814, 38034, 48604, 11088, 32713, 66, 25018, 63725, 60739, 63989, 24640, 45234, 52098, 30189, 58823 ],\n            //\n            [ 31966, 60938, 33091, 20868, 27053, 55718, 63740, 34823, 63284, 50743, 54516, 55854, 22695, 61399, 20701, 42020 ]\n        ],\n        [\n            [ 46800, 12374, 44636, 30131, 42052, 20867, 366, 61285, 30277, 62950, 3490, 5844, 22587, 61999, 13871, 16152 ],\n            [ 12266, 39904, 35870, 6341, 51881, 11220, 46645, 2709, 32415, 50427, 35055, 9083, 60483, 3375, 31247, 56572 ],\n            //\n            [ 42820, 18058, 33837, 21708, 33906, 37356, 33052, 12435, 51500, 34165, 58234, 47393, 8400, 18244, 11109, 21469 ]\n        ],\n        [\n            [ 53882, 51162, 54852, 56186, 32038, 47133, 57057, 31389, 6013, 7294, 1079, 11661, 24188, 14360, 44830, 39879 ],\n            [ 18464, 49, 63065, 51954, 9999, 25371, 32274, 7426, 49225, 31069, 61319, 31326, 7983, 21862, 2520, 57817 ],\n            //\n            [ 49844, 26166, 17697, 20920, 32504, 22238, 62006, 39864, 4029, 19231, 25822, 52406, 64068, 21688, 2944, 39476 ]\n        ],\n        [\n            [ 33620, 6146, 37762, 1945, 42960, 55514, 35189, 62202, 41945, 27576, 13658, 53800, 22891, 63682, 57925, 1724 ],\n            [ 49234, 34979, 38225, 38652, 30868, 3560, 16779, 49865, 18520, 4213, 52527, 51498, 28064, 56591, 39068, 48422 ],\n            //\n            [ 19204, 36537, 26091, 57163, 26310, 49705, 39936, 6908, 58413, 33845, 26259, 9746, 44816, 58963, 25184, 64159 ]\n        ],\n        [\n            [ 54500, 27670, 38222, 23965, 37135, 21035, 23806, 58676, 58928, 15268, 62451, 2100, 19113, 46496, 45934, 35337 ],\n            [ 55590, 41822, 60175, 62370, 15136, 54327, 40676, 1742, 21309, 44781, 60203, 9398, 4362, 4003, 32726, 15012 ],\n            //\n            [ 49216, 27396, 45516, 65059, 11138, 62254, 39241, 12070, 1424, 12286, 32900, 42655, 36184, 46180, 57268, 48085 ]\n        ],\n        [\n            [ 40904, 64556, 45782, 11806, 31314, 34566, 34349, 11122, 36973, 18039, 46403, 63610, 32096, 24721, 40283, 34718 ],\n            [ 34692, 1223, 14364, 14593, 51032, 41861, 25852, 25600, 41509, 20671, 51860, 12582, 2629, 53796, 10577, 38481 ],\n            //\n            [ 20010, 13241, 47547, 50241, 57749, 35712, 58467, 53137, 2023, 20936, 59582, 11467, 45369, 38272, 52600, 6306 ]\n        ],\n        [\n            [ 19002, 39127, 22385, 32172, 14219, 25533, 34815, 18865, 8341, 53116, 22908, 37316, 61340, 56272, 2400, 50845 ],\n            [ 30904, 37012, 17892, 63155, 63193, 29783, 63701, 20355, 51513, 35005, 22466, 7969, 12836, 63592, 8647, 35679 ],\n            //\n            [ 53892, 12022, 7480, 19644, 62853, 38634, 36549, 54803, 57819, 11235, 5670, 38838, 11375, 24298, 21646, 36392 ]\n        ],\n        [\n            [ 26514, 22135, 65441, 50628, 61589, 15075, 51722, 19860, 32414, 47421, 46702, 52912, 12452, 39305, 44521, 22801 ],\n            [ 18678, 41365, 24431, 42423, 12475, 7168, 35538, 9686, 6950, 3506, 27191, 62469, 16029, 10775, 53827, 1594 ],\n            //\n            [ 15246, 33481, 39828, 62945, 35337, 30500, 30635, 1360, 55879, 13360, 20824, 55736, 45662, 36199, 6583, 9563 ]\n        ],\n        [\n            [ 39218, 53651, 29338, 43507, 48406, 19636, 63965, 45780, 39524, 1491, 41956, 7283, 32459, 26455, 1279, 4275 ],\n            [ 19366, 44452, 28112, 9057, 44980, 43316, 26026, 55788, 58217, 52613, 59340, 39856, 49473, 63772, 64160, 37815 ],\n            //\n            [ 37928, 15723, 4481, 65144, 52430, 48928, 28581, 6708, 61210, 3857, 47495, 50135, 55537, 48719, 63990, 50298 ]\n        ],\n        [\n            [ 64772, 15496, 53260, 21001, 20305, 6406, 50124, 57019, 50560, 48179, 62457, 13847, 50909, 59614, 23963, 7033 ],\n            [ 2642, 20926, 44375, 31056, 28936, 1947, 36757, 44795, 14411, 53178, 10835, 7814, 20672, 26460, 63003, 60551 ],\n            //\n            [ 40058, 56575, 52932, 32250, 32063, 22583, 14214, 33720, 23678, 55139, 43582, 35795, 42757, 14578, 41447, 16320 ]\n        ],\n        [\n            [ 52184, 28869, 12689, 37648, 51213, 61392, 59490, 33391, 27107, 37181, 12671, 9953, 15413, 12106, 50347, 56986 ],\n            [ 7064, 58805, 49963, 10510, 53424, 58995, 25679, 48370, 58596, 39649, 13138, 48431, 972, 35566, 250, 53343 ],\n            //\n            [ 10824, 48855, 28126, 16856, 48365, 59965, 24610, 20018, 3481, 33183, 3194, 24247, 44732, 1676, 12658, 19476 ]\n        ],\n        [\n            [ 56310, 8717, 46397, 29972, 61489, 57985, 14265, 43426, 4484, 1946, 21429, 30857, 12457, 41255, 20209, 11868 ],\n            [ 120, 64340, 56397, 6091, 16437, 47103, 65164, 58442, 39246, 43086, 21620, 23645, 41878, 21778, 12598, 56343 ],\n            //\n            [ 16524, 11918, 15444, 4725, 63923, 29368, 36484, 57543, 39736, 47890, 48063, 62680, 46120, 49597, 36733, 31272 ]\n        ],\n        [\n            [ 9422, 31727, 62086, 30479, 23784, 34685, 11576, 45039, 36082, 11890, 46827, 19285, 61806, 35406, 39438, 19564 ],\n            [ 59922, 49798, 20433, 16055, 23720, 26253, 9601, 50669, 1356, 55481, 28886, 29630, 59522, 58785, 28958, 42709 ],\n            //\n            [ 56866, 39951, 43959, 20789, 15838, 33745, 22636, 5604, 52921, 868, 41198, 64540, 11645, 18242, 33665, 62775 ]\n        ],\n        [\n            [ 32402, 10064, 55154, 54796, 38505, 13697, 38020, 35637, 43628, 34402, 7278, 62229, 45932, 26111, 41499, 22939 ],\n            [ 43490, 34917, 20676, 48122, 28219, 17503, 51713, 54423, 63197, 16333, 58687, 26519, 35883, 3942, 39733, 2037 ],\n            //\n            [ 50312, 60425, 5575, 41043, 48164, 56341, 62651, 45348, 50756, 41110, 3241, 56109, 59548, 29825, 45510, 26067 ]\n        ],\n        [\n            [ 23006, 55335, 23259, 24081, 62338, 65336, 60700, 16382, 21604, 32575, 33233, 61421, 50533, 64971, 32993, 37325 ],\n            [ 56288, 10274, 65510, 40289, 5185, 15149, 8742, 61919, 33076, 17897, 4078, 35736, 16294, 63471, 6467, 17393 ],\n            //\n            [ 3192, 1405, 12736, 58011, 11229, 7264, 35686, 58730, 9040, 17195, 61786, 48853, 40942, 35412, 31256, 1037 ]\n        ],\n        [\n            [ 62446, 41216, 56912, 46784, 58113, 15500, 12621, 45266, 52568, 4333, 31306, 33007, 6569, 62258, 13272, 1676 ],\n            [ 32184, 65359, 55344, 15122, 7225, 63750, 13388, 28981, 5813, 26516, 61151, 56849, 7588, 37768, 43317, 36914 ],\n            //\n            [ 56146, 11026, 50398, 22932, 48592, 5425, 32408, 9520, 61575, 60659, 28226, 20690, 64910, 6547, 56592, 7090 ]\n        ],\n        [\n            [ 49268, 61617, 28579, 37644, 2729, 61298, 48732, 13669, 27303, 11342, 8639, 59427, 38703, 16071, 6088, 40620 ],\n            [ 61288, 58657, 52288, 56350, 48598, 31383, 30076, 31366, 23077, 31854, 20965, 6972, 33371, 1946, 41312, 33817 ],\n            //\n            [ 44866, 48304, 28300, 32283, 7762, 31944, 5571, 16543, 6702, 44953, 5323, 36863, 31834, 48345, 38482, 49481 ]\n        ],\n        [\n            [ 34966, 43942, 58255, 18746, 65272, 59188, 45674, 16638, 29734, 19543, 54518, 52889, 31581, 26415, 23254, 20196 ],\n            [ 33372, 48563, 9557, 27382, 42131, 50690, 23677, 11185, 65371, 22267, 504, 36929, 46790, 20396, 43006, 28737 ],\n            //\n            [ 17030, 16888, 41629, 2330, 44604, 20033, 355, 30500, 60158, 40376, 54020, 14913, 1663, 11398, 36387, 50497 ]\n        ],\n        [\n            [ 64200, 11419, 9172, 11367, 25482, 1900, 18470, 49743, 53763, 8275, 60712, 29029, 43335, 5654, 48146, 45864 ],\n            [ 49190, 64250, 13261, 51011, 30359, 37787, 29329, 50667, 26392, 4428, 62704, 29669, 23730, 49691, 16166, 43967 ],\n            //\n            [ 23966, 24384, 62251, 911, 56187, 62573, 52348, 18175, 26352, 29510, 17364, 21015, 27988, 56485, 64457, 53987 ]\n        ],\n        [\n            [ 42784, 31888, 28611, 42263, 26528, 6002, 32490, 5219, 56963, 29121, 16685, 31282, 53747, 55339, 42538, 46662 ],\n            [ 52396, 31851, 47353, 2187, 53340, 36733, 60019, 55840, 51846, 50944, 29613, 59725, 43496, 8154, 1539, 9437 ],\n            //\n            [ 35626, 58547, 41751, 46368, 45467, 7928, 13945, 55261, 26420, 58412, 31064, 35723, 8429, 20812, 19275, 16926 ]\n        ],\n        [\n            [ 45724, 2657, 10904, 55205, 43502, 26028, 2763, 57886, 56510, 22917, 39951, 22438, 42292, 60295, 7803, 15372 ],\n            [ 48412, 25476, 46349, 61600, 40523, 50835, 39476, 65332, 6515, 28207, 17748, 37420, 30257, 61748, 9906, 62696 ],\n            //\n            [ 55630, 41533, 57922, 27899, 28871, 28138, 37046, 64311, 15854, 21323, 50617, 41877, 41353, 46961, 35904, 14920 ]\n        ],\n        [\n            [ 26378, 28048, 19468, 49356, 48614, 24231, 35925, 22733, 4507, 48034, 45387, 1091, 21820, 9197, 52734, 21425 ],\n            [ 64242, 62837, 44801, 29240, 64600, 10500, 31284, 41575, 20488, 53358, 29483, 47317, 12516, 44438, 57157, 56486 ],\n            //\n            [ 62304, 42453, 60550, 31698, 19119, 12998, 21626, 12565, 58221, 14638, 24260, 48034, 59464, 34238, 27108, 52454 ]\n        ],\n        [\n            [ 33688, 14274, 16800, 18600, 24412, 51391, 9466, 23008, 48428, 33270, 34942, 51942, 55300, 24669, 29883, 2983 ],\n            [ 4878, 49041, 31351, 48179, 2025, 2617, 32221, 4102, 61082, 29511, 5403, 64346, 19917, 53968, 314, 54458 ],\n            //\n            [ 11872, 60232, 8640, 53242, 50458, 56536, 2586, 41573, 10676, 62267, 23048, 8155, 21596, 58316, 16782, 22338 ]\n        ],\n        [\n            [ 54600, 19001, 8203, 17258, 1952, 24194, 31817, 18377, 31985, 47415, 61219, 18027, 35909, 30277, 5343, 28267 ],\n            [ 51522, 10698, 30284, 55863, 11658, 14972, 62040, 46083, 47541, 4890, 56877, 27487, 47773, 51538, 45917, 12531 ],\n            //\n            [ 10132, 51292, 12475, 7418, 41523, 20551, 34414, 31238, 46322, 56930, 15886, 56008, 62024, 4148, 58779, 57683 ]\n        ],\n        [\n            [ 28492, 27646, 25100, 18647, 61297, 34225, 49273, 9453, 2225, 30355, 63374, 36408, 65259, 16512, 37039, 18788 ],\n            [ 34890, 49626, 17560, 21308, 56142, 47435, 24338, 2253, 61188, 59253, 15025, 2021, 51962, 31589, 4210, 32612 ],\n            //\n            [ 12728, 554, 15557, 42320, 38206, 63810, 38143, 14973, 59400, 5528, 48817, 56282, 5376, 3274, 34245, 8194 ]\n        ],\n        [\n            [ 26592, 31721, 38619, 45148, 53298, 12633, 56464, 38802, 2476, 12600, 32271, 24022, 1744, 8118, 61674, 1883 ],\n            [ 40814, 57031, 16747, 13602, 26388, 15991, 33168, 55728, 19589, 39882, 1087, 54873, 6058, 35011, 14132, 50106 ],\n            //\n            [ 2994, 23561, 34625, 42515, 28372, 33122, 8183, 41413, 29854, 40901, 61435, 639, 48837, 50335, 14191, 3255 ]\n        ],\n        [\n            [ 46668, 51305, 38273, 13204, 13458, 15593, 3460, 23101, 39991, 40994, 26026, 46286, 11714, 26470, 65282, 4212 ],\n            [ 45090, 59093, 61383, 42929, 55827, 46176, 49536, 32066, 28688, 1175, 55885, 35107, 3778, 52072, 57566, 10651 ],\n            //\n            [ 18924, 26298, 27893, 51058, 57660, 26826, 45243, 57459, 5401, 60745, 15683, 5142, 30042, 9247, 45301, 62157 ]\n        ],\n        [\n            [ 65056, 10818, 11062, 13870, 23652, 52363, 27265, 2069, 10145, 22504, 30949, 62094, 6488, 16914, 50350, 48739 ],\n            [ 38520, 42908, 32970, 686, 45445, 1148, 49500, 9819, 47809, 42477, 28761, 35973, 59532, 44167, 10346, 13721 ],\n            //\n            [ 33768, 21140, 49714, 19739, 9014, 6966, 44675, 39896, 63671, 59879, 37833, 30298, 5491, 35731, 50790, 29233 ]\n        ],\n        [\n            [ 19070, 44295, 29960, 20417, 45732, 28611, 15942, 52913, 43858, 2407, 18516, 27755, 7639, 30321, 65483, 45533 ],\n            [ 34870, 65018, 14064, 1903, 34932, 53328, 14485, 18506, 1838, 38756, 30225, 6657, 19751, 9614, 39834, 8732 ],\n            //\n            [ 9174, 459, 61827, 7698, 63763, 58894, 7839, 9401, 23109, 15082, 22041, 38550, 41152, 41531, 60582, 20597 ]\n        ],\n        [\n            [ 22462, 3773, 44047, 30302, 29091, 11181, 17680, 60418, 54617, 43357, 52292, 19493, 15539, 26971, 21767, 27430 ],\n            [ 27440, 42964, 10577, 63971, 30074, 33322, 54831, 39197, 32811, 26581, 5406, 51869, 60413, 38828, 2357, 16255 ],\n            //\n            [ 17208, 26270, 32814, 48765, 2371, 6224, 2086, 11305, 27046, 7814, 6546, 53175, 40740, 53337, 46884, 65202 ]\n        ],\n        [\n            [ 3362, 2612, 26552, 10582, 62240, 24345, 33762, 29506, 43091, 709, 13081, 25780, 50109, 35975, 30423, 42477 ],\n            [ 14644, 30263, 7437, 62732, 27994, 34883, 5529, 21172, 10767, 45235, 42559, 9907, 51123, 62789, 24466, 38811 ],\n            //\n            [ 29816, 64506, 44358, 26708, 20466, 1482, 2857, 12475, 13741, 825, 49419, 4416, 20562, 35486, 56024, 36413 ]\n        ],\n        [\n            [ 47404, 42050, 15279, 3650, 4034, 60146, 44931, 5018, 45079, 35261, 58135, 52082, 30222, 16766, 1123, 29064 ],\n            [ 30818, 34360, 56663, 61087, 28756, 48997, 11505, 14816, 58125, 64905, 37774, 17231, 54748, 56923, 39161, 64485 ],\n            //\n            [ 3382, 56176, 43370, 21057, 31148, 28486, 64799, 44197, 30498, 3280, 27394, 31308, 52096, 49639, 27585, 24771 ]\n        ],\n        [\n            [ 15316, 4453, 45791, 25586, 4756, 23663, 30622, 46785, 43992, 31320, 38173, 56691, 58343, 62063, 7427, 63195 ],\n            [ 1710, 11342, 6994, 23228, 42330, 10174, 60349, 5345, 26647, 1830, 53507, 2840, 61919, 23558, 7078, 9401 ],\n            //\n            [ 25304, 53432, 49780, 29573, 23422, 41435, 8477, 19426, 44134, 14118, 33147, 18669, 44064, 19425, 26820, 8312 ]\n        ],\n        [\n            [ 26290, 4992, 18446, 34700, 33841, 24756, 50669, 46828, 1477, 24371, 32047, 46656, 7474, 29752, 61723, 48393 ],\n            [ 27092, 48258, 63629, 13876, 21877, 21784, 15448, 44921, 32806, 39851, 149, 52209, 49626, 63135, 41519, 17908 ],\n            //\n            [ 22584, 41832, 44500, 51065, 57235, 12321, 43427, 38834, 64816, 13310, 45964, 33133, 33275, 13353, 32762, 17842 ]\n        ],\n        [\n            [ 56364, 51973, 15425, 9160, 11268, 39224, 26851, 63829, 13011, 49095, 54522, 23835, 56542, 16912, 17088, 62937 ],\n            [ 43802, 20021, 50311, 38757, 9319, 18340, 16301, 62350, 12747, 30487, 58053, 36823, 49468, 22221, 49480, 59756 ],\n            //\n            [ 49668, 39315, 22668, 5505, 54755, 34179, 35352, 26700, 17208, 50679, 54143, 41238, 51638, 34438, 14651, 26741 ]\n        ],\n        [\n            [ 44564, 34911, 42363, 57232, 45584, 24203, 5924, 41923, 4052, 24978, 6426, 44378, 48502, 7384, 57565, 27922 ],\n            [ 48526, 36720, 41730, 19748, 26458, 56004, 8439, 33039, 31323, 9221, 33639, 10763, 59264, 29949, 40523, 3420 ],\n            //\n            [ 43076, 55885, 28633, 50646, 49021, 24160, 11995, 47496, 9817, 32671, 26020, 27169, 46545, 42837, 51901, 12817 ]\n        ],\n        [\n            [ 54676, 8031, 64418, 57835, 13319, 8440, 33197, 1584, 41261, 38273, 53046, 2833, 49583, 39467, 21868, 5825 ],\n            [ 20278, 24305, 13684, 10259, 4567, 47311, 37854, 1459, 46520, 59763, 44523, 7705, 3977, 5515, 36053, 9187 ],\n            //\n            [ 43048, 38310, 50723, 3612, 6111, 25195, 35939, 12040, 41597, 16359, 50512, 37397, 47101, 8341, 53724, 10680 ]\n        ],\n        [\n            [ 48674, 46723, 32843, 17259, 24100, 39407, 43163, 9724, 15245, 37891, 15915, 38375, 39798, 5580, 13019, 26342 ],\n            [ 61572, 4938, 54950, 37882, 1862, 32502, 27996, 63070, 59302, 61512, 59910, 37119, 52417, 6476, 15516, 21326 ],\n            //\n            [ 56194, 34816, 19935, 9528, 56486, 15275, 20548, 41449, 38482, 36475, 25336, 50389, 52675, 20236, 61311, 64077 ]\n        ],\n        [\n            [ 20522, 2019, 22805, 35826, 62081, 54259, 39276, 28812, 60519, 61132, 22942, 22853, 18301, 26997, 9461, 23955 ],\n            [ 20330, 48667, 12395, 30159, 58182, 40315, 52732, 23768, 46111, 58056, 60452, 10266, 12805, 64855, 23100, 4248 ],\n            //\n            [ 59508, 21446, 58581, 43618, 7433, 60014, 61575, 16974, 16498, 32487, 48863, 29615, 1013, 13222, 24618, 39416 ]\n        ],\n        [\n            [ 56208, 12535, 49880, 57754, 52947, 58658, 7808, 58585, 43807, 29120, 34330, 9998, 23449, 30458, 45209, 48136 ],\n            [ 37674, 34258, 27163, 42589, 53742, 13265, 27325, 29494, 14903, 46148, 43500, 56954, 16515, 57303, 47656, 12450 ],\n            //\n            [ 41898, 33230, 47001, 30887, 43137, 16625, 13801, 33175, 49844, 27096, 52473, 20388, 14460, 35168, 15079, 1494 ]\n        ],\n        [\n            [ 60338, 17991, 15896, 39199, 52236, 11505, 59360, 57487, 32257, 47205, 53260, 51451, 37049, 13208, 15201, 10200 ],\n            [ 48800, 14962, 19280, 43892, 51201, 50579, 51172, 27656, 51892, 60398, 55182, 9806, 7622, 29154, 35247, 10912 ],\n            //\n            [ 42840, 43365, 65340, 27838, 57975, 5790, 63347, 38780, 48029, 25164, 39066, 54556, 43818, 37389, 7217, 22978 ]\n        ],\n        [\n            [ 2968, 57060, 43227, 33530, 1652, 27986, 21000, 65418, 50530, 17514, 20751, 8076, 46702, 11462, 54145, 18038 ],\n            [ 10740, 11892, 42880, 36634, 48630, 36566, 49599, 10901, 41195, 17791, 20640, 1300, 22449, 29772, 58039, 32137 ],\n            //\n            [ 42096, 1948, 19810, 46779, 29628, 43763, 51782, 20463, 40381, 1213, 64615, 53652, 53853, 28948, 49762, 36033 ]\n        ],\n        [\n            [ 60916, 44455, 2487, 18699, 48974, 58826, 58913, 45030, 26581, 52979, 31870, 31635, 4186, 3602, 1644, 62737 ],\n            [ 64706, 41862, 41787, 2622, 3067, 14071, 23473, 28890, 183, 55975, 36744, 43140, 7356, 47161, 62309, 57421 ],\n            //\n            [ 48156, 54716, 43339, 26443, 18101, 53206, 36400, 11420, 17663, 16165, 30992, 39784, 45835, 21308, 24809, 48077 ]\n        ],\n        [\n            [ 38900, 59489, 53866, 18817, 54565, 6235, 13767, 20818, 18084, 6317, 51469, 6239, 15249, 49332, 22880, 59021 ],\n            [ 6896, 21369, 9326, 22446, 22745, 34057, 41544, 46547, 19938, 33297, 34534, 59708, 177, 49689, 63319, 64102 ],\n            //\n            [ 1368, 37565, 15740, 5497, 34253, 27136, 52579, 20503, 59422, 63811, 12109, 20891, 18433, 12391, 27971, 24382 ]\n        ],\n        [\n            [ 58108, 905, 8919, 40853, 46282, 40589, 38765, 36351, 22817, 61191, 11523, 63582, 17988, 34279, 50560, 53385 ],\n            [ 55416, 34387, 34340, 21033, 64001, 49952, 38222, 44491, 13435, 12436, 31415, 38650, 24641, 52011, 47449, 53450 ],\n            //\n            [ 32256, 57142, 2905, 13971, 17574, 25853, 41890, 51930, 23790, 42503, 54365, 3763, 17338, 44515, 41481, 47554 ]\n        ],\n        [\n            [ 23490, 30875, 6947, 34874, 24468, 39690, 11160, 21358, 62993, 50943, 17021, 716, 16512, 7693, 45051, 1889 ],\n            [ 59056, 33071, 41328, 14638, 31748, 11460, 17799, 23370, 38761, 28076, 4140, 31810, 5435, 24688, 4366, 14957 ],\n            //\n            [ 38658, 6985, 27547, 4009, 23822, 64189, 48871, 46012, 28058, 34017, 49733, 20538, 22634, 60490, 39857, 56684 ]\n        ],\n        [\n            [ 56358, 15222, 63996, 16284, 2953, 21346, 33711, 11777, 27324, 966, 29965, 3370, 38118, 53076, 58803, 9622 ],\n            [ 33534, 29873, 35377, 28583, 48470, 62605, 38112, 22865, 11486, 62554, 27524, 34890, 49299, 39436, 42924, 26784 ],\n            //\n            [ 18206, 53203, 28989, 3594, 30717, 41499, 31337, 54582, 53366, 12795, 13291, 19413, 58135, 65315, 37801, 34126 ]\n        ],\n        [\n            [ 3346, 51158, 18211, 44304, 2247, 34652, 37767, 6296, 54200, 44188, 15706, 30149, 18936, 5170, 20940, 42134 ],\n            [ 40018, 61533, 1079, 13552, 10857, 42480, 51812, 11230, 5467, 53776, 1707, 50397, 46768, 49499, 57111, 33423 ],\n            //\n            [ 64986, 34791, 58199, 19309, 40719, 59185, 20120, 50841, 37132, 37892, 13338, 36662, 59652, 47500, 20036, 28716 ]\n        ],\n        [\n            [ 22954, 48957, 12636, 11332, 37938, 24580, 3972, 173, 36790, 7625, 23756, 18850, 20494, 2193, 17306, 34133 ],\n            [ 37706, 57173, 4763, 60441, 34195, 40514, 3942, 44957, 44953, 35110, 25020, 65533, 19406, 13300, 51605, 55349 ],\n            //\n            [ 47718, 36816, 61481, 40699, 38690, 63253, 47976, 64598, 34874, 17964, 52183, 6979, 50776, 19666, 11286, 9158 ]\n        ],\n        [\n            [ 46084, 29358, 53337, 43178, 35606, 4451, 17331, 55812, 43020, 26807, 20189, 59220, 23983, 1373, 13942, 36332 ],\n            [ 31834, 12930, 21816, 29783, 32091, 50371, 1787, 61481, 21779, 50772, 56487, 40780, 18840, 43040, 36291, 51450 ],\n            //\n            [ 42646, 16294, 47289, 18198, 52209, 42766, 28915, 24998, 42175, 58237, 20664, 62750, 33075, 20741, 30138, 56473 ]\n        ],\n        [\n            [ 18292, 59805, 54565, 18403, 57208, 42885, 24197, 19578, 31071, 62234, 45730, 41000, 56732, 16432, 14548, 43197 ],\n            [ 48124, 30933, 7533, 39380, 43700, 17476, 7034, 65240, 39348, 52409, 50407, 15059, 33651, 23617, 55104, 21805 ],\n            //\n            [ 56292, 35238, 24411, 18371, 52398, 10490, 31028, 46526, 48921, 63236, 10300, 34795, 53084, 4221, 13473, 27842 ]\n        ],\n        [\n            [ 57638, 24443, 56549, 32063, 42913, 17446, 8994, 36800, 61821, 4533, 31559, 54297, 28533, 42270, 65063, 3784 ],\n            [ 4544, 43837, 11503, 45549, 31805, 33074, 65131, 7416, 31548, 25024, 47327, 30325, 43647, 37848, 15791, 48616 ],\n            //\n            [ 16662, 3669, 37290, 32879, 15831, 4552, 42805, 8390, 22308, 35530, 18577, 54116, 3271, 38669, 14279, 38062 ]\n        ],\n        [\n            [ 35282, 30346, 56172, 2637, 29275, 22941, 25454, 6243, 58236, 58106, 41435, 62605, 55205, 45590, 46032, 47423 ],\n            [ 24782, 27657, 30453, 9239, 14976, 51094, 11924, 27639, 46575, 38405, 54255, 20859, 1498, 26436, 1980, 20001 ],\n            //\n            [ 8142, 5832, 53662, 49060, 47205, 23460, 14581, 54466, 16159, 7557, 29261, 3044, 37361, 13977, 31472, 53603 ]\n        ],\n        [\n            [ 29654, 8559, 57017, 32034, 38891, 4145, 60067, 50913, 60215, 17295, 56920, 25665, 15886, 39175, 61757, 40671 ],\n            [ 44536, 49731, 1559, 58594, 34473, 6349, 30935, 29896, 53862, 6153, 61861, 42698, 37474, 52161, 60160, 11842 ],\n            //\n            [ 12672, 920, 51599, 3932, 52712, 42451, 31752, 9967, 59339, 43745, 22828, 41506, 1176, 6877, 32884, 380 ]\n        ],\n        [\n            [ 13416, 19492, 14543, 27877, 266, 8748, 9227, 44344, 32292, 61465, 63852, 62513, 4405, 18166, 14899, 55587 ],\n            [ 2848, 2209, 44313, 21561, 16106, 2339, 58038, 48338, 64589, 61596, 5651, 16162, 53945, 34321, 21904, 15566 ],\n            //\n            [ 21938, 46122, 4544, 50970, 16139, 26657, 43367, 50501, 19802, 9010, 31953, 15260, 44346, 31204, 13440, 20808 ]\n        ],\n        [\n            [ 59930, 64959, 15434, 60558, 32297, 30583, 39186, 34007, 22009, 61823, 46219, 38354, 36259, 35568, 60327, 19330 ],\n            [ 10284, 15092, 57078, 57354, 17473, 63523, 831, 40804, 21955, 50764, 38081, 9244, 24413, 17810, 22422, 5175 ],\n            //\n            [ 62124, 34030, 9317, 60032, 6930, 30364, 38783, 37742, 1868, 48106, 35144, 49337, 14232, 24194, 4708, 20231 ]\n        ],\n        [\n            [ 52654, 26256, 30393, 23456, 34213, 9077, 35321, 33445, 28594, 60337, 27076, 6255, 60762, 15764, 55709, 39468 ],\n            [ 45090, 29670, 46854, 57399, 45304, 59426, 60882, 61195, 50918, 39258, 6814, 1183, 58519, 2893, 47806, 49220 ],\n            //\n            [ 49850, 58802, 41633, 52431, 49719, 42218, 15379, 29292, 35311, 41157, 28745, 59096, 64905, 43884, 27024, 35759 ]\n        ],\n        [\n            [ 22190, 37270, 8031, 21691, 34927, 2697, 54962, 16961, 33386, 5358, 30378, 25904, 26383, 42553, 31825, 42057 ],\n            [ 41762, 53624, 3857, 54133, 18032, 8411, 52049, 32914, 4180, 13940, 43398, 41943, 30728, 497, 63529, 48000 ],\n            //\n            [ 23596, 13344, 48207, 62529, 1687, 52500, 6989, 7582, 19675, 37709, 20907, 23527, 10583, 50048, 60779, 19369 ]\n        ],\n        [\n            [ 38412, 13567, 4908, 52001, 35082, 48773, 28851, 7838, 38878, 38575, 63280, 35144, 36160, 61703, 61477, 55344 ],\n            [ 54302, 22419, 6114, 40423, 15531, 853, 12162, 56107, 7766, 11824, 18212, 58990, 13311, 11300, 20853, 26580 ],\n            //\n            [ 18424, 32658, 13284, 64273, 27151, 2919, 61935, 46954, 45308, 52807, 29784, 4411, 4360, 64745, 6044, 64717 ]\n        ],\n        [\n            [ 1560, 41433, 57693, 53748, 15390, 50842, 11049, 4883, 49272, 5848, 11543, 43422, 31177, 43863, 37156, 39314 ],\n            [ 64342, 40097, 30118, 32073, 29536, 16960, 5060, 38154, 7801, 33540, 39316, 7835, 59404, 21535, 52207, 53952 ],\n            //\n            [ 63472, 53303, 37277, 32113, 43469, 25775, 43363, 65509, 35819, 30694, 20673, 38215, 43809, 50726, 37695, 25771 ]\n        ],\n        [\n            [ 35092, 41331, 34615, 31338, 7631, 11993, 26394, 29933, 61632, 13212, 57309, 48904, 53627, 55910, 51686, 2121 ],\n            [ 56790, 21854, 2736, 8670, 23116, 54318, 14976, 37463, 61818, 11460, 44864, 51503, 914, 23269, 56508, 35316 ],\n            //\n            [ 40676, 28131, 41158, 22989, 56374, 49772, 19103, 54847, 13683, 10108, 23091, 20820, 31928, 57630, 31623, 64886 ]\n        ],\n        [\n            [ 8404, 31858, 37997, 21087, 21572, 61923, 45234, 17974, 44559, 59538, 40304, 31086, 44465, 43319, 49247, 33758 ],\n            [ 21762, 50743, 10012, 27932, 20244, 42186, 35012, 17957, 64569, 58714, 10750, 26897, 29429, 19844, 40824, 38292 ],\n            //\n            [ 54, 44973, 58640, 48521, 34318, 29625, 2240, 19743, 44957, 11520, 28299, 1905, 38676, 36741, 34294, 61654 ]\n        ],\n        [\n            [ 54252, 22527, 45067, 56498, 20472, 4834, 14037, 27582, 17161, 41837, 36941, 47149, 59508, 17777, 35609, 27148 ],\n            [ 17080, 796, 11437, 36355, 55212, 10648, 50707, 10498, 54453, 53223, 35788, 60547, 50997, 29852, 44471, 24453 ],\n            //\n            [ 62506, 15199, 43592, 64453, 32714, 36427, 1766, 33498, 65074, 53121, 32712, 2000, 28650, 59118, 1492, 54088 ]\n        ],\n        [\n            [ 33912, 22241, 26949, 23144, 47183, 10673, 13311, 12547, 52151, 9622, 59110, 38977, 47898, 22019, 45810, 13457 ],\n            [ 27692, 26359, 25252, 14699, 47795, 54117, 63516, 43537, 56510, 22912, 62855, 58747, 46051, 14654, 48858, 2440 ],\n            //\n            [ 27688, 44348, 32458, 51073, 17391, 39258, 8677, 9200, 17303, 48694, 20745, 40981, 59634, 63179, 57156, 44010 ]\n        ],\n        [\n            [ 34314, 53070, 14327, 9488, 4751, 6651, 57595, 4333, 58056, 30197, 13233, 38592, 64269, 27669, 1805, 34143 ],\n            [ 15958, 38727, 44844, 31826, 33656, 7085, 33337, 559, 18287, 10971, 57776, 39313, 47189, 15001, 17568, 53521 ],\n            //\n            [ 58542, 36850, 50104, 24495, 12543, 56850, 20464, 34142, 10352, 18505, 675, 29411, 57788, 21467, 49566, 4691 ]\n        ],\n        [\n            [ 57196, 31994, 45955, 61163, 20795, 10593, 14615, 57760, 22116, 27515, 57451, 56749, 55249, 5273, 16407, 4597 ],\n            [ 19310, 42132, 43036, 36029, 26766, 2478, 59760, 61011, 33442, 60235, 26881, 64812, 5762, 57381, 33407, 16779 ],\n            //\n            [ 22462, 14292, 36457, 27576, 13510, 11771, 8181, 61157, 63411, 17637, 44111, 5076, 56109, 41280, 14207, 33235 ]\n        ]\n    ];\n    return table;\n}\n"]}